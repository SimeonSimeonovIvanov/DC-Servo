
/*
 * Copyright (c) 2006-2008 by Roland Riegel <feedback@roland-riegel.de>
 *
 * This file is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef HAL_H
#define HAL_H

#include <stdbool.h>
#include <stdint.h>

//#include "enc28j60_init.h"
//#include "enc28j60_packet.h"
//#include "enc28j60_status.h"

#include "enc424j600/enc424j600.h"

/**
 * \addtogroup net
 *
 * @{
 */
/**
 * \addtogroup net_hal Hardware abstraction layer
 *
 * This compile-time configuration module links the network protocol
 * stack with the driver of the hardware chipset.
 *
 * @{
 */
/**
 * \file
 * Hardware abstraction (license: GPLv2)
 *
 * \author Roland Riegel
 */

/**
 * Initializes the network hardware and assigns the given hardware address.
 *
 * \param[in] mac A pointer to a 6-byte buffer containing the network mac address.
 * \returns TRUE on success, FALSE on failure.
 */
#define hal_init(mac) enc424j600Init(mac)

/**
 * Fetches the next ethernet packet from the device.
 *
 * The packet has to be written into the given buffer and the size of the packet
 * (ethernet header plus payload, exclusive the CRC) must be returned.
 *
 * Zero must be returned in the following cases:
 * - There is no packet pending.
 * - The packet is too large to completely fit into the buffer and must be
 *   discarded.
 * - Some error occured.
 *
 * \param[out] buffer The pointer to the buffer which receives the packet.
 * \param[in] buffer_len The length of the buffer.
 * \returns The packet size in bytes on success, \c 0 in the cases noted above.
 */
#define hal_receive_packet(buffer, buffer_len) enc424j600PacketReceive(buffer, buffer_len)
//enc28j60_receive_packet((buffer), (buffer_len))

// ETHERNET_MAX_PACKET_SIZE

/**
 * Sends an ethernet packet to the device.
 *
 * The packet buffer contains the ethernet header and the payload without CRC.
 * If the CRC cannot be generated by the network hardware, it has to be calculated
 * by the driver.
 *
 * \param[in] buffer A pointer to the buffer containing the packet to be sent.
 * \param[in] buffer_len The length of the ethernet packet header plus payload.
 * \returns TRUE if the packet was sent, FALSE otherwise.
 */
#define hal_send_packet(buffer, buffer_len) enc424j600PacketSend(buffer, buffer_len)
//enc28j60_send_packet((buffer), (buffer_len))

/**
 * Checks wether the network link is up and has been continuously up since the last call.
 *
 * \returns \c TRUE if the network link is and has been up, \c FALSE otherwise.
 */
#define hal_link_up()	enc424j600MACIsLinked()
//enc28j60_link_up()

/**
 * @}
 * @}
 */

#endif

