
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002282  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00002282  00002316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000259  00800096  00800096  0000234c  2**0
                  ALLOC
  3 .debug_aranges 00000240  00000000  00000000  0000234c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000095f  00000000  00000000  0000258c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003115  00000000  00000000  00002eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001113  00000000  00000000  00006000  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002809  00000000  00000000  00007113  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005b0  00000000  00000000  0000991c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000120b  00000000  00000000  00009ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001c28  00000000  00000000  0000b0d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 01 	jmp	0x254	; 0x254 <__ctors_end>
       4:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__vector_1>
       8:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_2>
       c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      10:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      14:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__vector_5>
      18:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      1c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      20:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      24:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      28:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      2c:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_11>
      30:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      34:	0c 94 fa 0a 	jmp	0x15f4	; 0x15f4 <__vector_13>
      38:	0c 94 21 0b 	jmp	0x1642	; 0x1642 <__vector_14>
      3c:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__vector_15>
      40:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_16>
      44:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      48:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__vector_18>
      4c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      50:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>

00000054 <aucCRCHi>:
      54:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      64:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      74:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      84:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      94:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      a4:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      b4:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      c4:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      d4:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      e4:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      f4:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
     104:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     114:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
     124:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     134:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     144:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@

00000154 <aucCRCLo>:
     154:	00 c0 c1 01 c3 03 02 c2 c6 06 07 c7 05 c5 c4 04     ................
     164:	cc 0c 0d cd 0f cf ce 0e 0a ca cb 0b c9 09 08 c8     ................
     174:	d8 18 19 d9 1b db da 1a 1e de df 1f dd 1d 1c dc     ................
     184:	14 d4 d5 15 d7 17 16 d6 d2 12 13 d3 11 d1 d0 10     ................
     194:	f0 30 31 f1 33 f3 f2 32 36 f6 f7 37 f5 35 34 f4     .01.3..26..7.54.
     1a4:	3c fc fd 3d ff 3f 3e fe fa 3a 3b fb 39 f9 f8 38     <..=.?>..:;.9..8
     1b4:	28 e8 e9 29 eb 2b 2a ea ee 2e 2f ef 2d ed ec 2c     (..).+*.../.-..,
     1c4:	e4 24 25 e5 27 e7 e6 26 22 e2 e3 23 e1 21 20 e0     .$%.'..&"..#.! .
     1d4:	a0 60 61 a1 63 a3 a2 62 66 a6 a7 67 a5 65 64 a4     .`a.c..bf..g.ed.
     1e4:	6c ac ad 6d af 6f 6e ae aa 6a 6b ab 69 a9 a8 68     l..m.on..jk.i..h
     1f4:	78 b8 b9 79 bb 7b 7a ba be 7e 7f bf 7d bd bc 7c     x..y.{z..~..}..|
     204:	b4 74 75 b5 77 b7 b6 76 72 b2 b3 73 b1 71 70 b0     .tu.w..vr..s.qp.
     214:	50 90 91 51 93 53 52 92 96 56 57 97 55 95 94 54     P..Q.SR..VW.U..T
     224:	9c 5c 5d 9d 5f 9f 9e 5e 5a 9a 9b 5b 99 59 58 98     .\]._..^Z..[.YX.
     234:	88 48 49 89 4b 8b 8a 4a 4e 8e 8f 4f 8d 4d 4c 8c     .HI.K..JN..O.ML.
     244:	44 84 85 45 87 47 46 86 82 42 43 83 41 81 80 40     D..E.GF..BC.A..@

00000254 <__ctors_end>:
     254:	11 24       	eor	r1, r1
     256:	1f be       	out	0x3f, r1	; 63
     258:	cf e5       	ldi	r28, 0x5F	; 95
     25a:	d8 e0       	ldi	r29, 0x08	; 8
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	cd bf       	out	0x3d, r28	; 61

00000260 <__do_copy_data>:
     260:	10 e0       	ldi	r17, 0x00	; 0
     262:	a0 e6       	ldi	r26, 0x60	; 96
     264:	b0 e0       	ldi	r27, 0x00	; 0
     266:	e2 e8       	ldi	r30, 0x82	; 130
     268:	f2 e2       	ldi	r31, 0x22	; 34
     26a:	02 c0       	rjmp	.+4      	; 0x270 <.do_copy_data_start>

0000026c <.do_copy_data_loop>:
     26c:	05 90       	lpm	r0, Z+
     26e:	0d 92       	st	X+, r0

00000270 <.do_copy_data_start>:
     270:	a6 39       	cpi	r26, 0x96	; 150
     272:	b1 07       	cpc	r27, r17
     274:	d9 f7       	brne	.-10     	; 0x26c <.do_copy_data_loop>

00000276 <__do_clear_bss>:
     276:	12 e0       	ldi	r17, 0x02	; 2
     278:	a6 e9       	ldi	r26, 0x96	; 150
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	01 c0       	rjmp	.+2      	; 0x280 <.do_clear_bss_start>

0000027e <.do_clear_bss_loop>:
     27e:	1d 92       	st	X+, r1

00000280 <.do_clear_bss_start>:
     280:	af 3e       	cpi	r26, 0xEF	; 239
     282:	b1 07       	cpc	r27, r17
     284:	e1 f7       	brne	.-8      	; 0x27e <.do_clear_bss_loop>
     286:	0e 94 21 04 	call	0x842	; 0x842 <main>
     28a:	0c 94 3f 11 	jmp	0x227e	; 0x227e <_exit>

0000028e <__bad_interrupt>:
     28e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000292 <__vector_11>:
}

/*! \brief Timer interrupt to control the sampling interval
 */
ISR( TIMER0_OVF_vect )
{
     292:	1f 92       	push	r1
     294:	0f 92       	push	r0
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	0f 92       	push	r0
     29a:	11 24       	eor	r1, r1
     29c:	8f 93       	push	r24
	TCNT0 = 5;
     29e:	85 e0       	ldi	r24, 0x05	; 5
     2a0:	82 bf       	out	0x32, r24	; 50
	gFlagsCurrentPid.pidTimer = TRUE;
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	80 93 97 00 	sts	0x0097, r24
}
     2a8:	8f 91       	pop	r24
     2aa:	0f 90       	pop	r0
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	0f 90       	pop	r0
     2b0:	1f 90       	pop	r1
     2b2:	18 95       	reti

000002b4 <__vector_1>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ISR( INT0_vect )
{
     2b4:	1f 92       	push	r1
     2b6:	0f 92       	push	r0
     2b8:	0f b6       	in	r0, 0x3f	; 63
     2ba:	0f 92       	push	r0
     2bc:	11 24       	eor	r1, r1
}
     2be:	0f 90       	pop	r0
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	0f 90       	pop	r0
     2c4:	1f 90       	pop	r1
     2c6:	18 95       	reti

000002c8 <__vector_2>:

ISR( INT1_vect )
{
     2c8:	1f 92       	push	r1
     2ca:	0f 92       	push	r0
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	0f 92       	push	r0
     2d0:	11 24       	eor	r1, r1
}
     2d2:	0f 90       	pop	r0
     2d4:	0f be       	out	0x3f, r0	; 63
     2d6:	0f 90       	pop	r0
     2d8:	1f 90       	pop	r1
     2da:	18 95       	reti

000002dc <__vector_16>:
//////////////////////////////////////////////////////////////////////////////////
ISR( ADC_vect )
{
     2dc:	1f 92       	push	r1
     2de:	0f 92       	push	r0
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	0f 92       	push	r0
     2e4:	11 24       	eor	r1, r1
     2e6:	8f 93       	push	r24
     2e8:	9f 93       	push	r25
     2ea:	af 93       	push	r26
     2ec:	bf 93       	push	r27
     2ee:	ef 93       	push	r30
     2f0:	ff 93       	push	r31
	} else {
		n = 0;
	}
#endif*/

	arrADC[ channel ] = ADC;
     2f2:	e0 91 b4 00 	lds	r30, 0x00B4
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	84 b1       	in	r24, 0x04	; 4
     2fa:	95 b1       	in	r25, 0x05	; 5
     2fc:	ee 0f       	add	r30, r30
     2fe:	ff 1f       	adc	r31, r31
     300:	ee 57       	subi	r30, 0x7E	; 126
     302:	fe 4f       	sbci	r31, 0xFE	; 254
     304:	91 83       	std	Z+1, r25	; 0x01
     306:	80 83       	st	Z, r24

	if( 1 == channel ) {
     308:	80 91 b4 00 	lds	r24, 0x00B4
     30c:	81 30       	cpi	r24, 0x01	; 1
     30e:	b9 f4       	brne	.+46     	; 0x33e <__vector_16+0x62>
		if( PIND & (1<<PD3) ) {
     310:	83 9b       	sbis	0x10, 3	; 16
     312:	15 c0       	rjmp	.+42     	; 0x33e <__vector_16+0x62>
			arrADC[ channel ] = -arrADC[ channel ];
     314:	e0 91 b4 00 	lds	r30, 0x00B4
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	a0 91 b4 00 	lds	r26, 0x00B4
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	aa 0f       	add	r26, r26
     322:	bb 1f       	adc	r27, r27
     324:	ae 57       	subi	r26, 0x7E	; 126
     326:	be 4f       	sbci	r27, 0xFE	; 254
     328:	8d 91       	ld	r24, X+
     32a:	9c 91       	ld	r25, X
     32c:	90 95       	com	r25
     32e:	81 95       	neg	r24
     330:	9f 4f       	sbci	r25, 0xFF	; 255
     332:	ee 0f       	add	r30, r30
     334:	ff 1f       	adc	r31, r31
     336:	ee 57       	subi	r30, 0x7E	; 126
     338:	fe 4f       	sbci	r31, 0xFE	; 254
     33a:	91 83       	std	Z+1, r25	; 0x01
     33c:	80 83       	st	Z, r24
		}
	}

	if( ++channel >= ( sizeof(arrADC) / sizeof(*arrADC) ) ) {
     33e:	80 91 b4 00 	lds	r24, 0x00B4
     342:	8f 5f       	subi	r24, 0xFF	; 255
     344:	80 93 b4 00 	sts	0x00B4, r24
     348:	80 91 b4 00 	lds	r24, 0x00B4
     34c:	84 30       	cpi	r24, 0x04	; 4
     34e:	28 f0       	brcs	.+10     	; 0x35a <__vector_16+0x7e>
		channel = 0;
     350:	10 92 b4 00 	sts	0x00B4, r1
		adcFlag = 1;
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	80 93 96 00 	sts	0x0096, r24
	}

	ADMUX = channel;
     35a:	80 91 b4 00 	lds	r24, 0x00B4
     35e:	87 b9       	out	0x07, r24	; 7
	  else {
		ADCSRA |= (1<<ADSC);
	}
	TIFR1 |= (1<<ICF1);
#else
	ADCSRA |= (1<<ADSC);
     360:	36 9a       	sbi	0x06, 6	; 6
#endif
}
     362:	ff 91       	pop	r31
     364:	ef 91       	pop	r30
     366:	bf 91       	pop	r27
     368:	af 91       	pop	r26
     36a:	9f 91       	pop	r25
     36c:	8f 91       	pop	r24
     36e:	0f 90       	pop	r0
     370:	0f be       	out	0x3f, r0	; 63
     372:	0f 90       	pop	r0
     374:	1f 90       	pop	r1
     376:	18 95       	reti

00000378 <eMBRegInputCB>:

eMBErrorCode eMBRegInputCB
(
	UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs
)
{
     378:	dc 01       	movw	r26, r24
	unsigned int iRegIndex;
 
	// MB_FUNC_READ_INPUT_REGISTER           (  4 )
	if( (usAddress >= REG_INPUT_START) &&
     37a:	61 15       	cp	r22, r1
     37c:	71 05       	cpc	r23, r1
     37e:	f9 f0       	breq	.+62     	; 0x3be <eMBRegInputCB+0x46>
     380:	ca 01       	movw	r24, r20
     382:	86 0f       	add	r24, r22
     384:	97 1f       	adc	r25, r23
     386:	41 97       	sbiw	r24, 0x11	; 17
     388:	d0 f4       	brcc	.+52     	; 0x3be <eMBRegInputCB+0x46>
		(usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS)
	) {
		iRegIndex = (int)(usAddress - REG_INPUT_START);
     38a:	61 50       	subi	r22, 0x01	; 1
     38c:	70 40       	sbci	r23, 0x00	; 0
     38e:	12 c0       	rjmp	.+36     	; 0x3b4 <eMBRegInputCB+0x3c>
		while( usNRegs > 0 ) {
			*pucRegBuffer++ = (unsigned char)(uiRegInputBuf[iRegIndex] >> 8);
     390:	fb 01       	movw	r30, r22
     392:	ee 0f       	add	r30, r30
     394:	ff 1f       	adc	r31, r31
     396:	ec 59       	subi	r30, 0x9C	; 156
     398:	fe 4f       	sbci	r31, 0xFE	; 254
     39a:	80 81       	ld	r24, Z
     39c:	91 81       	ldd	r25, Z+1	; 0x01
     39e:	9c 93       	st	X, r25
            *pucRegBuffer++ = (unsigned char)(uiRegInputBuf[iRegIndex] & 0xFF);
     3a0:	80 81       	ld	r24, Z
     3a2:	91 81       	ldd	r25, Z+1	; 0x01
     3a4:	11 96       	adiw	r26, 0x01	; 1
     3a6:	8c 93       	st	X, r24
     3a8:	11 97       	sbiw	r26, 0x01	; 1

eMBErrorCode eMBRegInputCB
(
	UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs
)
{
     3aa:	12 96       	adiw	r26, 0x02	; 2
	) {
		iRegIndex = (int)(usAddress - REG_INPUT_START);
		while( usNRegs > 0 ) {
			*pucRegBuffer++ = (unsigned char)(uiRegInputBuf[iRegIndex] >> 8);
            *pucRegBuffer++ = (unsigned char)(uiRegInputBuf[iRegIndex] & 0xFF);
			++iRegIndex;
     3ac:	6f 5f       	subi	r22, 0xFF	; 255
     3ae:	7f 4f       	sbci	r23, 0xFF	; 255
			--usNRegs;
     3b0:	41 50       	subi	r20, 0x01	; 1
     3b2:	50 40       	sbci	r21, 0x00	; 0
	// MB_FUNC_READ_INPUT_REGISTER           (  4 )
	if( (usAddress >= REG_INPUT_START) &&
		(usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS)
	) {
		iRegIndex = (int)(usAddress - REG_INPUT_START);
		while( usNRegs > 0 ) {
     3b4:	41 15       	cp	r20, r1
     3b6:	51 05       	cpc	r21, r1
     3b8:	59 f7       	brne	.-42     	; 0x390 <eMBRegInputCB+0x18>
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	08 95       	ret
     3be:	81 e0       	ldi	r24, 0x01	; 1
			--usNRegs;
		}
		return MB_ENOERR;
	}
	return MB_ENOREG;
}
     3c0:	08 95       	ret

000003c2 <arrToDiscBuff>:

	return MB_ENOREG;
}
///////////////////////////////////////////////////////////////////////////////////////////
void arrToDiscBuff( unsigned char *ucRegDiscBuf, uint8_t *inPort, uint8_t n )
{
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	ec 01       	movw	r28, r24
     3cc:	a0 e0       	ldi	r26, 0x00	; 0
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
	int i, j;

	for( i = 0; i < n; i++ ) {
     3d0:	50 e0       	ldi	r21, 0x00	; 0
		j = i / 8;

		if( inPort[ i ] ) {
			ucRegDiscBuf[ j ] |=  ( 1<<( i - ( 8 * j ) ) );
		} else {
			ucRegDiscBuf[ j ] &= ~( 1<<( i - ( 8 * j ) ) );
     3d2:	01 e0       	ldi	r16, 0x01	; 1
     3d4:	10 e0       	ldi	r17, 0x00	; 0
     3d6:	32 c0       	rjmp	.+100    	; 0x43c <arrToDiscBuff+0x7a>
void arrToDiscBuff( unsigned char *ucRegDiscBuf, uint8_t *inPort, uint8_t n )
{
	int i, j;

	for( i = 0; i < n; i++ ) {
		j = i / 8;
     3d8:	cd 01       	movw	r24, r26
     3da:	e3 e0       	ldi	r30, 0x03	; 3
     3dc:	95 95       	asr	r25
     3de:	87 95       	ror	r24
     3e0:	ea 95       	dec	r30
     3e2:	e1 f7       	brne	.-8      	; 0x3dc <arrToDiscBuff+0x1a>

		if( inPort[ i ] ) {
     3e4:	fb 01       	movw	r30, r22
     3e6:	ea 0f       	add	r30, r26
     3e8:	fb 1f       	adc	r31, r27
     3ea:	20 81       	ld	r18, Z
     3ec:	fe 01       	movw	r30, r28
     3ee:	e8 0f       	add	r30, r24
     3f0:	f9 1f       	adc	r31, r25
     3f2:	33 e0       	ldi	r19, 0x03	; 3
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	3a 95       	dec	r19
     3fa:	e1 f7       	brne	.-8      	; 0x3f4 <arrToDiscBuff+0x32>
     3fc:	22 23       	and	r18, r18
     3fe:	71 f0       	breq	.+28     	; 0x41c <arrToDiscBuff+0x5a>
			ucRegDiscBuf[ j ] |=  ( 1<<( i - ( 8 * j ) ) );
     400:	9d 01       	movw	r18, r26
     402:	28 1b       	sub	r18, r24
     404:	39 0b       	sbc	r19, r25
     406:	c9 01       	movw	r24, r18
     408:	98 01       	movw	r18, r16
     40a:	02 c0       	rjmp	.+4      	; 0x410 <arrToDiscBuff+0x4e>
     40c:	22 0f       	add	r18, r18
     40e:	33 1f       	adc	r19, r19
     410:	8a 95       	dec	r24
     412:	e2 f7       	brpl	.-8      	; 0x40c <arrToDiscBuff+0x4a>
     414:	c9 01       	movw	r24, r18
     416:	20 81       	ld	r18, Z
     418:	28 2b       	or	r18, r24
     41a:	0e c0       	rjmp	.+28     	; 0x438 <arrToDiscBuff+0x76>
		} else {
			ucRegDiscBuf[ j ] &= ~( 1<<( i - ( 8 * j ) ) );
     41c:	9d 01       	movw	r18, r26
     41e:	28 1b       	sub	r18, r24
     420:	39 0b       	sbc	r19, r25
     422:	c9 01       	movw	r24, r18
     424:	98 01       	movw	r18, r16
     426:	02 c0       	rjmp	.+4      	; 0x42c <arrToDiscBuff+0x6a>
     428:	22 0f       	add	r18, r18
     42a:	33 1f       	adc	r19, r19
     42c:	8a 95       	dec	r24
     42e:	e2 f7       	brpl	.-8      	; 0x428 <arrToDiscBuff+0x66>
     430:	c9 01       	movw	r24, r18
     432:	80 95       	com	r24
     434:	20 81       	ld	r18, Z
     436:	28 23       	and	r18, r24
     438:	20 83       	st	Z, r18
///////////////////////////////////////////////////////////////////////////////////////////
void arrToDiscBuff( unsigned char *ucRegDiscBuf, uint8_t *inPort, uint8_t n )
{
	int i, j;

	for( i = 0; i < n; i++ ) {
     43a:	11 96       	adiw	r26, 0x01	; 1
     43c:	a4 17       	cp	r26, r20
     43e:	b5 07       	cpc	r27, r21
     440:	5c f2       	brlt	.-106    	; 0x3d8 <arrToDiscBuff+0x16>
			ucRegDiscBuf[ j ] |=  ( 1<<( i - ( 8 * j ) ) );
		} else {
			ucRegDiscBuf[ j ] &= ~( 1<<( i - ( 8 * j ) ) );
		}
	}
}
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	1f 91       	pop	r17
     448:	0f 91       	pop	r16
     44a:	08 95       	ret

0000044c <pidInit>:
	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void pidInit(void)
{
	pid_Init(
     44c:	89 e1       	ldi	r24, 0x19	; 25
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	40 e0       	ldi	r20, 0x00	; 0
     456:	50 e0       	ldi	r21, 0x00	; 0
     458:	20 e2       	ldi	r18, 0x20	; 32
     45a:	31 e0       	ldi	r19, 0x01	; 1
     45c:	0e 94 6a 07 	call	0xed4	; 0xed4 <pid_Init>
		K_I_CURRENT * SCALING_FACTOR,
		K_D_CURRENT * SCALING_FACTOR,
		(pidData_t*)&pidCurrentData
	);

	pid_Init(
     460:	80 e8       	ldi	r24, 0x80	; 128
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	60 e0       	ldi	r22, 0x00	; 0
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	40 e0       	ldi	r20, 0x00	; 0
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	22 e3       	ldi	r18, 0x32	; 50
     46e:	31 e0       	ldi	r19, 0x01	; 1
     470:	0e 94 6a 07 	call	0xed4	; 0xed4 <pid_Init>
		K_I_SPEED * SCALING_FACTOR,
		K_D_SPEED * SCALING_FACTOR,
		(pidData_t*)&pidSpeedData
	);

	uiRegHolding[  0 ] = pidCurrentData.P_Factor;
     474:	80 91 26 01 	lds	r24, 0x0126
     478:	90 91 27 01 	lds	r25, 0x0127
     47c:	90 93 f9 00 	sts	0x00F9, r25
     480:	80 93 f8 00 	sts	0x00F8, r24
	uiRegHolding[  1 ] = pidCurrentData.I_Factor;
     484:	80 91 28 01 	lds	r24, 0x0128
     488:	90 91 29 01 	lds	r25, 0x0129
     48c:	90 93 fb 00 	sts	0x00FB, r25
     490:	80 93 fa 00 	sts	0x00FA, r24
	uiRegHolding[  2 ] = pidCurrentData.D_Factor;
     494:	80 91 2a 01 	lds	r24, 0x012A
     498:	90 91 2b 01 	lds	r25, 0x012B
     49c:	90 93 fd 00 	sts	0x00FD, r25
     4a0:	80 93 fc 00 	sts	0x00FC, r24
	uiRegHolding[  3 ] = SCALING_FACTOR;
     4a4:	20 e8       	ldi	r18, 0x80	; 128
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	30 93 ff 00 	sts	0x00FF, r19
     4ac:	20 93 fe 00 	sts	0x00FE, r18

	uiRegHolding[ 10 ] = pidSpeedData.P_Factor;
     4b0:	80 91 38 01 	lds	r24, 0x0138
     4b4:	90 91 39 01 	lds	r25, 0x0139
     4b8:	90 93 0d 01 	sts	0x010D, r25
     4bc:	80 93 0c 01 	sts	0x010C, r24
	uiRegHolding[ 11 ] = pidSpeedData.I_Factor;
     4c0:	80 91 3a 01 	lds	r24, 0x013A
     4c4:	90 91 3b 01 	lds	r25, 0x013B
     4c8:	90 93 0f 01 	sts	0x010F, r25
     4cc:	80 93 0e 01 	sts	0x010E, r24
	uiRegHolding[ 12 ] = pidSpeedData.D_Factor;
     4d0:	80 91 3c 01 	lds	r24, 0x013C
     4d4:	90 91 3d 01 	lds	r25, 0x013D
     4d8:	90 93 11 01 	sts	0x0111, r25
     4dc:	80 93 10 01 	sts	0x0110, r24
	uiRegHolding[ 13 ] = SCALING_FACTOR;
     4e0:	30 93 13 01 	sts	0x0113, r19
     4e4:	20 93 12 01 	sts	0x0112, r18
	// Set up timer, enable timer/counte 0 overflow interrupt
#ifdef __AVR_ATmega644__
	TCCR0B = (1<<CS01) | (1<<CS00);
	TIMSK0 = (1<<TOIE0);
#elif __AVR_ATmega32__
	TCCR0 = (1<<CS01) | (1<<CS00);
     4e8:	83 e0       	ldi	r24, 0x03	; 3
     4ea:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);
     4ec:	89 b7       	in	r24, 0x39	; 57
     4ee:	81 60       	ori	r24, 0x01	; 1
     4f0:	89 bf       	out	0x39, r24	; 57
#elif __AVR_ATmega16__
	TCCR0 = (1<<CS01) | (1<<CS00);
	TIMSK |= (1<<TOIE0);
#endif

	TCNT0 = 5;
     4f2:	85 e0       	ldi	r24, 0x05	; 5
     4f4:	82 bf       	out	0x32, r24	; 50
}
     4f6:	08 95       	ret

000004f8 <eMBRegHoldingCB>:
eMBErrorCode eMBRegHoldingCB
(
	UCHAR * pucRegBuffer, USHORT usAddress,
	USHORT usNRegs, eMBRegisterMode eMode
)
{
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	ec 01       	movw	r28, r24
     506:	8a 01       	movw	r16, r20
	unsigned int iRegIndex;
	
	/* Check if we have registers mapped at this block. */
	if( (usAddress >= REG_HOLDING_START) &&
     508:	61 15       	cp	r22, r1
     50a:	71 05       	cpc	r23, r1
     50c:	09 f4       	brne	.+2      	; 0x510 <eMBRegHoldingCB+0x18>
     50e:	b5 c0       	rjmp	.+362    	; 0x67a <eMBRegHoldingCB+0x182>
     510:	ca 01       	movw	r24, r20
     512:	86 0f       	add	r24, r22
     514:	97 1f       	adc	r25, r23
     516:	46 97       	sbiw	r24, 0x16	; 22
     518:	08 f0       	brcs	.+2      	; 0x51c <eMBRegHoldingCB+0x24>
     51a:	af c0       	rjmp	.+350    	; 0x67a <eMBRegHoldingCB+0x182>
		(usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS)
	) {
		switch(eMode) {
     51c:	22 23       	and	r18, r18
     51e:	21 f0       	breq	.+8      	; 0x528 <eMBRegHoldingCB+0x30>
     520:	21 30       	cpi	r18, 0x01	; 1
     522:	09 f0       	breq	.+2      	; 0x526 <eMBRegHoldingCB+0x2e>
     524:	aa c0       	rjmp	.+340    	; 0x67a <eMBRegHoldingCB+0x182>
     526:	17 c0       	rjmp	.+46     	; 0x556 <eMBRegHoldingCB+0x5e>
		case MB_REG_READ:
			iRegIndex = (int)(usAddress - 1);
     528:	61 50       	subi	r22, 0x01	; 1
     52a:	70 40       	sbci	r23, 0x00	; 0
     52c:	10 c0       	rjmp	.+32     	; 0x54e <eMBRegHoldingCB+0x56>
			while( usNRegs > 0 ) {
				*pucRegBuffer++ = uiRegHolding[iRegIndex]>>8;
     52e:	fb 01       	movw	r30, r22
     530:	ee 0f       	add	r30, r30
     532:	ff 1f       	adc	r31, r31
     534:	e8 50       	subi	r30, 0x08	; 8
     536:	ff 4f       	sbci	r31, 0xFF	; 255
     538:	80 81       	ld	r24, Z
     53a:	91 81       	ldd	r25, Z+1	; 0x01
     53c:	98 83       	st	Y, r25
				*pucRegBuffer++ = uiRegHolding[iRegIndex];
     53e:	80 81       	ld	r24, Z
     540:	91 81       	ldd	r25, Z+1	; 0x01
     542:	89 83       	std	Y+1, r24	; 0x01
eMBErrorCode eMBRegHoldingCB
(
	UCHAR * pucRegBuffer, USHORT usAddress,
	USHORT usNRegs, eMBRegisterMode eMode
)
{
     544:	22 96       	adiw	r28, 0x02	; 2
		case MB_REG_READ:
			iRegIndex = (int)(usAddress - 1);
			while( usNRegs > 0 ) {
				*pucRegBuffer++ = uiRegHolding[iRegIndex]>>8;
				*pucRegBuffer++ = uiRegHolding[iRegIndex];
				++iRegIndex;
     546:	6f 5f       	subi	r22, 0xFF	; 255
     548:	7f 4f       	sbci	r23, 0xFF	; 255
				--usNRegs;
     54a:	01 50       	subi	r16, 0x01	; 1
     54c:	10 40       	sbci	r17, 0x00	; 0
		(usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS)
	) {
		switch(eMode) {
		case MB_REG_READ:
			iRegIndex = (int)(usAddress - 1);
			while( usNRegs > 0 ) {
     54e:	01 15       	cp	r16, r1
     550:	11 05       	cpc	r17, r1
     552:	69 f7       	brne	.-38     	; 0x52e <eMBRegHoldingCB+0x36>
     554:	90 c0       	rjmp	.+288    	; 0x676 <eMBRegHoldingCB+0x17e>
		/*
		 	Update current register values.
		 	MB_FUNC_WRITE_MULTIPLE_REGISTERS             (16)
		*/
		case MB_REG_WRITE: {
			iRegIndex = (int)(usAddress - 1);
     556:	7b 01       	movw	r14, r22
     558:	08 94       	sec
     55a:	e1 08       	sbc	r14, r1
     55c:	f1 08       	sbc	r15, r1
     55e:	ba 01       	movw	r22, r20
     560:	a7 01       	movw	r20, r14
     562:	16 c0       	rjmp	.+44     	; 0x590 <eMBRegHoldingCB+0x98>
			while( usNRegs > 0 ) {
				uiRegHolding[iRegIndex]  = (*pucRegBuffer++)<<8;
     564:	b8 81       	ld	r27, Y
     566:	a0 e0       	ldi	r26, 0x00	; 0
     568:	fa 01       	movw	r30, r20
     56a:	ee 0f       	add	r30, r30
     56c:	ff 1f       	adc	r31, r31
     56e:	e8 50       	subi	r30, 0x08	; 8
     570:	ff 4f       	sbci	r31, 0xFF	; 255
     572:	b1 83       	std	Z+1, r27	; 0x01
     574:	a0 83       	st	Z, r26
				uiRegHolding[iRegIndex] |= *pucRegBuffer++;
     576:	20 81       	ld	r18, Z
     578:	31 81       	ldd	r19, Z+1	; 0x01
     57a:	89 81       	ldd	r24, Y+1	; 0x01
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	28 2b       	or	r18, r24
     580:	39 2b       	or	r19, r25
     582:	31 83       	std	Z+1, r19	; 0x01
     584:	20 83       	st	Z, r18
eMBErrorCode eMBRegHoldingCB
(
	UCHAR * pucRegBuffer, USHORT usAddress,
	USHORT usNRegs, eMBRegisterMode eMode
)
{
     586:	22 96       	adiw	r28, 0x02	; 2
		case MB_REG_WRITE: {
			iRegIndex = (int)(usAddress - 1);
			while( usNRegs > 0 ) {
				uiRegHolding[iRegIndex]  = (*pucRegBuffer++)<<8;
				uiRegHolding[iRegIndex] |= *pucRegBuffer++;
				++iRegIndex;
     588:	4f 5f       	subi	r20, 0xFF	; 255
     58a:	5f 4f       	sbci	r21, 0xFF	; 255
				--usNRegs;
     58c:	61 50       	subi	r22, 0x01	; 1
     58e:	70 40       	sbci	r23, 0x00	; 0
		 	Update current register values.
		 	MB_FUNC_WRITE_MULTIPLE_REGISTERS             (16)
		*/
		case MB_REG_WRITE: {
			iRegIndex = (int)(usAddress - 1);
			while( usNRegs > 0 ) {
     590:	61 15       	cp	r22, r1
     592:	71 05       	cpc	r23, r1
     594:	39 f7       	brne	.-50     	; 0x564 <eMBRegHoldingCB+0x6c>
				uiRegHolding[iRegIndex] |= *pucRegBuffer++;
				++iRegIndex;
				--usNRegs;
			}

			switch( iRegIndex ) {
     596:	a7 01       	movw	r20, r14
     598:	40 0f       	add	r20, r16
     59a:	51 1f       	adc	r21, r17
     59c:	43 30       	cpi	r20, 0x03	; 3
     59e:	51 05       	cpc	r21, r1
     5a0:	69 f1       	breq	.+90     	; 0x5fc <eMBRegHoldingCB+0x104>
     5a2:	44 30       	cpi	r20, 0x04	; 4
     5a4:	51 05       	cpc	r21, r1
     5a6:	40 f4       	brcc	.+16     	; 0x5b8 <eMBRegHoldingCB+0xc0>
     5a8:	41 30       	cpi	r20, 0x01	; 1
     5aa:	51 05       	cpc	r21, r1
     5ac:	89 f0       	breq	.+34     	; 0x5d0 <eMBRegHoldingCB+0xd8>
     5ae:	42 30       	cpi	r20, 0x02	; 2
     5b0:	51 05       	cpc	r21, r1
     5b2:	09 f0       	breq	.+2      	; 0x5b6 <eMBRegHoldingCB+0xbe>
     5b4:	60 c0       	rjmp	.+192    	; 0x676 <eMBRegHoldingCB+0x17e>
     5b6:	15 c0       	rjmp	.+42     	; 0x5e2 <eMBRegHoldingCB+0xea>
     5b8:	4c 30       	cpi	r20, 0x0C	; 12
     5ba:	51 05       	cpc	r21, r1
     5bc:	d9 f1       	breq	.+118    	; 0x634 <eMBRegHoldingCB+0x13c>
     5be:	4d 30       	cpi	r20, 0x0D	; 13
     5c0:	51 05       	cpc	r21, r1
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <eMBRegHoldingCB+0xce>
     5c4:	44 c0       	rjmp	.+136    	; 0x64e <eMBRegHoldingCB+0x156>
     5c6:	4b 30       	cpi	r20, 0x0B	; 11
     5c8:	51 05       	cpc	r21, r1
     5ca:	09 f0       	breq	.+2      	; 0x5ce <eMBRegHoldingCB+0xd6>
     5cc:	54 c0       	rjmp	.+168    	; 0x676 <eMBRegHoldingCB+0x17e>
     5ce:	29 c0       	rjmp	.+82     	; 0x622 <eMBRegHoldingCB+0x12a>
			case 1: {
				pid_Init(
     5d0:	80 91 f8 00 	lds	r24, 0x00F8
     5d4:	90 91 f9 00 	lds	r25, 0x00F9
     5d8:	60 91 28 01 	lds	r22, 0x0128
     5dc:	70 91 29 01 	lds	r23, 0x0129
     5e0:	08 c0       	rjmp	.+16     	; 0x5f2 <eMBRegHoldingCB+0xfa>
				);
				pid_Reset_Integrator( (pidData_t*)&pidCurrentData );
			}
			 break;
			case 2: {
				pid_Init(
     5e2:	80 91 26 01 	lds	r24, 0x0126
     5e6:	90 91 27 01 	lds	r25, 0x0127
     5ea:	60 91 fa 00 	lds	r22, 0x00FA
     5ee:	70 91 fb 00 	lds	r23, 0x00FB
     5f2:	40 91 2a 01 	lds	r20, 0x012A
     5f6:	50 91 2b 01 	lds	r21, 0x012B
     5fa:	0c c0       	rjmp	.+24     	; 0x614 <eMBRegHoldingCB+0x11c>
				);
				pid_Reset_Integrator( (pidData_t*)&pidCurrentData );
			}
			 break;
			case 3: {
				pid_Init(
     5fc:	80 91 26 01 	lds	r24, 0x0126
     600:	90 91 27 01 	lds	r25, 0x0127
     604:	60 91 28 01 	lds	r22, 0x0128
     608:	70 91 29 01 	lds	r23, 0x0129
     60c:	40 91 fc 00 	lds	r20, 0x00FC
     610:	50 91 fd 00 	lds	r21, 0x00FD
     614:	20 e2       	ldi	r18, 0x20	; 32
     616:	31 e0       	ldi	r19, 0x01	; 1
     618:	0e 94 6a 07 	call	0xed4	; 0xed4 <pid_Init>
					pidCurrentData.P_Factor,
					pidCurrentData.I_Factor,
					uiRegHolding[ 2 ],
					(pidData_t*)&pidCurrentData
				);
				pid_Reset_Integrator( (pidData_t*)&pidCurrentData );
     61c:	80 e2       	ldi	r24, 0x20	; 32
     61e:	91 e0       	ldi	r25, 0x01	; 1
     620:	28 c0       	rjmp	.+80     	; 0x672 <eMBRegHoldingCB+0x17a>
			}
			 break;

			case 11: {
				pid_Init(
     622:	80 91 0c 01 	lds	r24, 0x010C
     626:	90 91 0d 01 	lds	r25, 0x010D
     62a:	60 91 3a 01 	lds	r22, 0x013A
     62e:	70 91 3b 01 	lds	r23, 0x013B
     632:	08 c0       	rjmp	.+16     	; 0x644 <eMBRegHoldingCB+0x14c>
				);
				pid_Reset_Integrator( (pidData_t*)&pidSpeedData );
			}
			 break;
			case 12: {
				pid_Init(
     634:	80 91 38 01 	lds	r24, 0x0138
     638:	90 91 39 01 	lds	r25, 0x0139
     63c:	60 91 0e 01 	lds	r22, 0x010E
     640:	70 91 0f 01 	lds	r23, 0x010F
     644:	40 91 3c 01 	lds	r20, 0x013C
     648:	50 91 3d 01 	lds	r21, 0x013D
     64c:	0c c0       	rjmp	.+24     	; 0x666 <eMBRegHoldingCB+0x16e>
				);
				pid_Reset_Integrator( (pidData_t*)&pidSpeedData );
			}
			 break;
			case 13: {
				pid_Init(
     64e:	80 91 38 01 	lds	r24, 0x0138
     652:	90 91 39 01 	lds	r25, 0x0139
     656:	60 91 3a 01 	lds	r22, 0x013A
     65a:	70 91 3b 01 	lds	r23, 0x013B
     65e:	40 91 10 01 	lds	r20, 0x0110
     662:	50 91 11 01 	lds	r21, 0x0111
     666:	22 e3       	ldi	r18, 0x32	; 50
     668:	31 e0       	ldi	r19, 0x01	; 1
     66a:	0e 94 6a 07 	call	0xed4	; 0xed4 <pid_Init>
					pidSpeedData.P_Factor,
					pidSpeedData.I_Factor,
					uiRegHolding[ 12 ],
					(pidData_t*)&pidSpeedData
				);
				pid_Reset_Integrator( (pidData_t*)&pidSpeedData );
     66e:	82 e3       	ldi	r24, 0x32	; 50
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	0e 94 63 08 	call	0x10c6	; 0x10c6 <pid_Reset_Integrator>
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	01 c0       	rjmp	.+2      	; 0x67c <eMBRegHoldingCB+0x184>
     67a:	81 e0       	ldi	r24, 0x01	; 1
		 return MB_ENOERR;
		}
	}

	return MB_ENOREG;
}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	08 95       	ret

0000068a <eMBRegDiscreteCB>:
///////////////////////////////////////////////////////////////////////////////////////////
eMBErrorCode eMBRegDiscreteCB
(
	UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete
)
{
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	df 93       	push	r29
     690:	cf 93       	push	r28
     692:	00 d0       	rcall	.+0      	; 0x694 <eMBRegDiscreteCB+0xa>
     694:	00 d0       	rcall	.+0      	; 0x696 <eMBRegDiscreteCB+0xc>
     696:	0f 92       	push	r0
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	8c 01       	movw	r16, r24
	volatile eMBErrorCode eStatus = MB_ENOERR;
     69e:	19 82       	std	Y+1, r1	; 0x01
	volatile short iNDiscrete = ( short )usNDiscrete;
     6a0:	5b 83       	std	Y+3, r21	; 0x03
     6a2:	4a 83       	std	Y+2, r20	; 0x02
	volatile unsigned short usBitOffset;

	// MB_FUNC_READ_DISCRETE_INPUTS          ( 2 )
	/* Check if we have registers mapped at this block. */
	if( (usAddress >= REG_DISC_START) &&
     6a4:	61 15       	cp	r22, r1
     6a6:	71 05       	cpc	r23, r1
     6a8:	69 f1       	breq	.+90     	; 0x704 <eMBRegDiscreteCB+0x7a>
     6aa:	46 0f       	add	r20, r22
     6ac:	57 1f       	adc	r21, r23
     6ae:	42 32       	cpi	r20, 0x22	; 34
     6b0:	51 05       	cpc	r21, r1
     6b2:	40 f5       	brcc	.+80     	; 0x704 <eMBRegDiscreteCB+0x7a>
		(usAddress + usNDiscrete <= REG_DISC_START + REG_DISC_SIZE)
	) {
		usBitOffset = ( unsigned short )( usAddress - REG_DISC_START );
     6b4:	61 50       	subi	r22, 0x01	; 1
     6b6:	70 40       	sbci	r23, 0x00	; 0
     6b8:	7d 83       	std	Y+5, r23	; 0x05
     6ba:	6c 83       	std	Y+4, r22	; 0x04
     6bc:	1c c0       	rjmp	.+56     	; 0x6f6 <eMBRegDiscreteCB+0x6c>
		while(iNDiscrete > 0) {
			*pucRegBuffer++ =
     6be:	6c 81       	ldd	r22, Y+4	; 0x04
     6c0:	7d 81       	ldd	r23, Y+5	; 0x05
     6c2:	8a 81       	ldd	r24, Y+2	; 0x02
     6c4:	9b 81       	ldd	r25, Y+3	; 0x03
     6c6:	09 97       	sbiw	r24, 0x09	; 9
     6c8:	14 f0       	brlt	.+4      	; 0x6ce <eMBRegDiscreteCB+0x44>
     6ca:	48 e0       	ldi	r20, 0x08	; 8
     6cc:	03 c0       	rjmp	.+6      	; 0x6d4 <eMBRegDiscreteCB+0x4a>
     6ce:	8a 81       	ldd	r24, Y+2	; 0x02
     6d0:	9b 81       	ldd	r25, Y+3	; 0x03
     6d2:	48 2f       	mov	r20, r24
     6d4:	8b ea       	ldi	r24, 0xAB	; 171
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 47 10 	call	0x208e	; 0x208e <xMBUtilGetBits>
     6dc:	f8 01       	movw	r30, r16
     6de:	81 93       	st	Z+, r24
     6e0:	8f 01       	movw	r16, r30
			xMBUtilGetBits( (unsigned char*)ucRegDiscBuf, usBitOffset,
                            (unsigned char)(iNDiscrete>8? 8:iNDiscrete)
			);
			iNDiscrete -= 8;
     6e2:	8a 81       	ldd	r24, Y+2	; 0x02
     6e4:	9b 81       	ldd	r25, Y+3	; 0x03
     6e6:	08 97       	sbiw	r24, 0x08	; 8
     6e8:	9b 83       	std	Y+3, r25	; 0x03
     6ea:	8a 83       	std	Y+2, r24	; 0x02
			usBitOffset += 8;
     6ec:	8c 81       	ldd	r24, Y+4	; 0x04
     6ee:	9d 81       	ldd	r25, Y+5	; 0x05
     6f0:	08 96       	adiw	r24, 0x08	; 8
     6f2:	9d 83       	std	Y+5, r25	; 0x05
     6f4:	8c 83       	std	Y+4, r24	; 0x04
	/* Check if we have registers mapped at this block. */
	if( (usAddress >= REG_DISC_START) &&
		(usAddress + usNDiscrete <= REG_DISC_START + REG_DISC_SIZE)
	) {
		usBitOffset = ( unsigned short )( usAddress - REG_DISC_START );
		while(iNDiscrete > 0) {
     6f6:	8a 81       	ldd	r24, Y+2	; 0x02
     6f8:	9b 81       	ldd	r25, Y+3	; 0x03
     6fa:	18 16       	cp	r1, r24
     6fc:	19 06       	cpc	r1, r25
     6fe:	fc f2       	brlt	.-66     	; 0x6be <eMBRegDiscreteCB+0x34>
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	01 c0       	rjmp	.+2      	; 0x706 <eMBRegDiscreteCB+0x7c>
			usBitOffset += 8;
		}
		return MB_ENOERR;
	}

	return eStatus;
     704:	89 81       	ldd	r24, Y+1	; 0x01
}
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
     710:	cf 91       	pop	r28
     712:	df 91       	pop	r29
     714:	1f 91       	pop	r17
     716:	0f 91       	pop	r16
     718:	08 95       	ret

0000071a <eMBRegCoilsCB>:
eMBErrorCode eMBRegCoilsCB
(
	UCHAR * pucRegBuffer, USHORT usAddress,
	USHORT usNCoils, eMBRegisterMode eMode
)
{
     71a:	ef 92       	push	r14
     71c:	ff 92       	push	r15
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	7c 01       	movw	r14, r24
    short           iNCoils = ( short )usNCoils;
    unsigned short  usBitOffset;
	
	/* Check if we have registers mapped at this block. */
	if( (usAddress >= REG_COILS_START) &&
     728:	61 15       	cp	r22, r1
     72a:	71 05       	cpc	r23, r1
     72c:	c9 f1       	breq	.+114    	; 0x7a0 <eMBRegCoilsCB+0x86>
     72e:	ca 01       	movw	r24, r20
     730:	86 0f       	add	r24, r22
     732:	97 1f       	adc	r25, r23
     734:	4a 97       	sbiw	r24, 0x1a	; 26
     736:	a0 f5       	brcc	.+104    	; 0x7a0 <eMBRegCoilsCB+0x86>
(
	UCHAR * pucRegBuffer, USHORT usAddress,
	USHORT usNCoils, eMBRegisterMode eMode
)
{
    short           iNCoils = ( short )usNCoils;
     738:	ea 01       	movw	r28, r20
	
	/* Check if we have registers mapped at this block. */
	if( (usAddress >= REG_COILS_START) &&
		(usAddress + usNCoils <= REG_COILS_START + REG_COILS_SIZE)
	) {
		usBitOffset = (unsigned short)(usAddress - REG_COILS_START);
     73a:	8b 01       	movw	r16, r22
     73c:	01 50       	subi	r16, 0x01	; 1
     73e:	10 40       	sbci	r17, 0x00	; 0
		switch(eMode) {
     740:	22 23       	and	r18, r18
     742:	a1 f0       	breq	.+40     	; 0x76c <eMBRegCoilsCB+0x52>
     744:	21 30       	cpi	r18, 0x01	; 1
     746:	61 f5       	brne	.+88     	; 0x7a0 <eMBRegCoilsCB+0x86>
     748:	26 c0       	rjmp	.+76     	; 0x796 <eMBRegCoilsCB+0x7c>
			Read current values and pass to protocol stack.
			MB_FUNC_READ_COILS						( 1 )
		*/
		case MB_REG_READ:
			while( iNCoils > 0 ) {
				*pucRegBuffer++ =
     74a:	ae 01       	movw	r20, r28
     74c:	c9 30       	cpi	r28, 0x09	; 9
     74e:	d1 05       	cpc	r29, r1
     750:	14 f0       	brlt	.+4      	; 0x756 <eMBRegCoilsCB+0x3c>
     752:	48 e0       	ldi	r20, 0x08	; 8
     754:	50 e0       	ldi	r21, 0x00	; 0
     756:	82 ea       	ldi	r24, 0xA2	; 162
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	b8 01       	movw	r22, r16
     75c:	0e 94 47 10 	call	0x208e	; 0x208e <xMBUtilGetBits>
     760:	f7 01       	movw	r30, r14
     762:	81 93       	st	Z+, r24
     764:	7f 01       	movw	r14, r30
				xMBUtilGetBits( (unsigned char*)ucRegCoilsBuf, usBitOffset,
								(unsigned char)((iNCoils > 8) ? 8 : iNCoils)
				);
				usBitOffset += 8;
     766:	08 5f       	subi	r16, 0xF8	; 248
     768:	1f 4f       	sbci	r17, 0xFF	; 255
				iNCoils -= 8;
     76a:	28 97       	sbiw	r28, 0x08	; 8
		/*
			Read current values and pass to protocol stack.
			MB_FUNC_READ_COILS						( 1 )
		*/
		case MB_REG_READ:
			while( iNCoils > 0 ) {
     76c:	1c 16       	cp	r1, r28
     76e:	1d 06       	cpc	r1, r29
     770:	64 f3       	brlt	.-40     	; 0x74a <eMBRegCoilsCB+0x30>
     772:	14 c0       	rjmp	.+40     	; 0x79c <eMBRegCoilsCB+0x82>
		 	MB_FUNC_WRITE_SINGLE_COIL				( 5 )
			MB_FUNC_WRITE_MULTIPLE_COILS			( 15 )
		 */
		 case MB_REG_WRITE:
		 	while( iNCoils > 0 ) {
				xMBUtilSetBits( (unsigned char*)ucRegCoilsBuf, usBitOffset,
     774:	f7 01       	movw	r30, r14
     776:	21 91       	ld	r18, Z+
     778:	7f 01       	movw	r14, r30
     77a:	ae 01       	movw	r20, r28
     77c:	c9 30       	cpi	r28, 0x09	; 9
     77e:	d1 05       	cpc	r29, r1
     780:	14 f0       	brlt	.+4      	; 0x786 <eMBRegCoilsCB+0x6c>
     782:	48 e0       	ldi	r20, 0x08	; 8
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	82 ea       	ldi	r24, 0xA2	; 162
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	b8 01       	movw	r22, r16
     78c:	0e 94 0d 10 	call	0x201a	; 0x201a <xMBUtilSetBits>
								(unsigned char)((iNCoils > 8) ? 8 : iNCoils),
								*pucRegBuffer++
				);
				usBitOffset += 8;
     790:	08 5f       	subi	r16, 0xF8	; 248
     792:	1f 4f       	sbci	r17, 0xFF	; 255
				iNCoils -= 8;
     794:	28 97       	sbiw	r28, 0x08	; 8
		 	Update current register values.
		 	MB_FUNC_WRITE_SINGLE_COIL				( 5 )
			MB_FUNC_WRITE_MULTIPLE_COILS			( 15 )
		 */
		 case MB_REG_WRITE:
		 	while( iNCoils > 0 ) {
     796:	1c 16       	cp	r1, r28
     798:	1d 06       	cpc	r1, r29
     79a:	64 f3       	brlt	.-40     	; 0x774 <eMBRegCoilsCB+0x5a>
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <eMBRegCoilsCB+0x88>
     7a0:	81 e0       	ldi	r24, 0x01	; 1
		 return MB_ENOERR;
		}
	}
	
	return MB_ENOREG;
}
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	1f 91       	pop	r17
     7a8:	0f 91       	pop	r16
     7aa:	ff 90       	pop	r15
     7ac:	ef 90       	pop	r14
     7ae:	08 95       	ret

000007b0 <__vector_18>:
#elif __AVR_ATmega32__
ISR( ANA_COMP_vect )
#elif __AVR_ATmega16__
ISR( ANA_COMP_vect )
#endif
{
     7b0:	1f 92       	push	r1
     7b2:	0f 92       	push	r0
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	0f 92       	push	r0
     7b8:	11 24       	eor	r1, r1
     7ba:	2f 93       	push	r18
     7bc:	3f 93       	push	r19
     7be:	4f 93       	push	r20
     7c0:	5f 93       	push	r21
     7c2:	6f 93       	push	r22
     7c4:	7f 93       	push	r23
     7c6:	8f 93       	push	r24
     7c8:	9f 93       	push	r25
     7ca:	af 93       	push	r26
     7cc:	bf 93       	push	r27
     7ce:	ef 93       	push	r30
     7d0:	ff 93       	push	r31
	PORTD &= ~( (1<<PD7) | (1<<PD6) | (1<<PD5) | (1<<PD4) );
     7d2:	82 b3       	in	r24, 0x12	; 18
     7d4:	8f 70       	andi	r24, 0x0F	; 15
     7d6:	82 bb       	out	0x12, r24	; 18
	ucACmpOverCurrent = 1;
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	80 93 b1 00 	sts	0x00B1, r24


// Write a single byte to the registers.
inline static void registers_write_byte(uint8_t address, uint8_t value)
{
    registers[address] = value;
     7de:	80 91 aa 01 	lds	r24, 0x01AA
     7e2:	8e 7f       	andi	r24, 0xFE	; 254
     7e4:	80 93 aa 01 	sts	0x01AA, r24

    // Disable PWM to the servo motor.
    registers_write_byte(REG_FLAGS_LO, flags_lo & ~(1<<FLAGS_LO_PWM_ENABLED));

    // Stop now!
    pwm_stop();
     7e8:	0e 94 4d 06 	call	0xc9a	; 0xc9a <pwm_stop>
	pwm_disable();
}
     7ec:	ff 91       	pop	r31
     7ee:	ef 91       	pop	r30
     7f0:	bf 91       	pop	r27
     7f2:	af 91       	pop	r26
     7f4:	9f 91       	pop	r25
     7f6:	8f 91       	pop	r24
     7f8:	7f 91       	pop	r23
     7fa:	6f 91       	pop	r22
     7fc:	5f 91       	pop	r21
     7fe:	4f 91       	pop	r20
     800:	3f 91       	pop	r19
     802:	2f 91       	pop	r18
     804:	0f 90       	pop	r0
     806:	0f be       	out	0x3f, r0	; 63
     808:	0f 90       	pop	r0
     80a:	1f 90       	pop	r1
     80c:	18 95       	reti

0000080e <Set_Input_Current>:
{
	int16_t PWM;

	PWM = inputValue;

	ucFB = 0;
     80e:	10 92 b3 00 	sts	0x00B3, r1
	if( PWM < 0 ) {
     812:	97 fd       	sbrc	r25, 7
     814:	02 c0       	rjmp	.+4      	; 0x81a <Set_Input_Current+0xc>
     816:	9c 01       	movw	r18, r24
     818:	07 c0       	rjmp	.+14     	; 0x828 <Set_Input_Current+0x1a>
		PWM = -PWM;
     81a:	22 27       	eor	r18, r18
     81c:	33 27       	eor	r19, r19
     81e:	28 1b       	sub	r18, r24
     820:	39 0b       	sbc	r19, r25
		ucFB = 1;
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	80 93 b3 00 	sts	0x00B3, r24

	if( PWM > 255 ) {
		PWM = 255;
	}

	current_loop_update( PWM, ucFB );
     828:	60 91 b3 00 	lds	r22, 0x00B3
     82c:	c9 01       	movw	r24, r18
     82e:	2f 3f       	cpi	r18, 0xFF	; 255
     830:	31 05       	cpc	r19, r1
     832:	19 f0       	breq	.+6      	; 0x83a <Set_Input_Current+0x2c>
     834:	14 f0       	brlt	.+4      	; 0x83a <Set_Input_Current+0x2c>
     836:	8f ef       	ldi	r24, 0xFF	; 255
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 7d 10 	call	0x20fa	; 0x20fa <current_loop_update>

	sei();
     83e:	78 94       	sei
}
     840:	08 95       	ret

00000842 <main>:
volatile UCHAR ucSlaveID = 10;
volatile uint8_t ucReady = 1, ucOn = 0, ucEMS = 0, ucACmpOverCurrent = 0;
volatile uint8_t mbFB = 0, ucFB = 0;

int main(void)
{
     842:	ef 92       	push	r14
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
	eMBErrorCode eStatus;
	const UCHAR ucSlaveID[] = { 0xAA, 0xBB, 0xCC };

	DDRB = 1;
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	87 bb       	out	0x17, r24	; 23
	//////////////////////////////////////////////////////////////////////////////
	memset( inPort, 0, sizeof(inPort) );
     84c:	80 e2       	ldi	r24, 0x20	; 32
     84e:	e4 e4       	ldi	r30, 0x44	; 68
     850:	f1 e0       	ldi	r31, 0x01	; 1
     852:	df 01       	movw	r26, r30
     854:	1d 92       	st	X+, r1
     856:	8a 95       	dec	r24
     858:	e9 f7       	brne	.-6      	; 0x854 <main+0x12>

	registers_init();
     85a:	0e 94 b0 06 	call	0xd60	; 0xd60 <registers_init>
	//////////////////////////////////////////////////////////////////////////////
	pidInit();
     85e:	0e 94 26 02 	call	0x44c	; 0x44c <pidInit>
	//////////////////////////////////////////////////////////////////////////////
	pwm_init();
     862:	0e 94 63 06 	call	0xcc6	; 0xcc6 <pwm_init>
     866:	80 91 aa 01 	lds	r24, 0x01AA
     86a:	81 60       	ori	r24, 0x01	; 1
     86c:	80 93 aa 01 	sts	0x01AA, r24
	pwm_enable();
	TIFR1 |= (1<<ICF1);
     870:	88 b7       	in	r24, 0x38	; 56
     872:	80 62       	ori	r24, 0x20	; 32
     874:	88 bf       	out	0x38, r24	; 56
  	SFIOR = (1<<ADTS2) | (1<<ADTS1) | (1<<ADTS0);
  #elif __AVR_ATmega16__
	SFIOR = (1<<ADTS2) | (1<<ADTS1) | (1<<ADTS0);
 #endif
#else
	ADCSRA = (1<<ADEN)  | (1<<ADSC)  | (1<<ADIE)  |
     876:	8d ec       	ldi	r24, 0xCD	; 205
     878:	86 b9       	out	0x06, r24	; 6
			 (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
#endif

	PORTA = DDRA = 0xF0;
     87a:	80 ef       	ldi	r24, 0xF0	; 240
     87c:	8a bb       	out	0x1a, r24	; 26
     87e:	8a b3       	in	r24, 0x1a	; 26
     880:	8b bb       	out	0x1b, r24	; 27
	// Init Analog Comparator
	//ACSR = (1<<ACIE)  |
	//	   (1<<ACIS1) | (1<<ACIS0); // Comparator Interrupt on Rising Output Edge
	//////////////////////////////////////////////////////////////////////////////

	eStatus = eMBInit( MB_RTU, 0x0A, 0, 115200, MB_PAR_EVEN );
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	6a e0       	ldi	r22, 0x0A	; 10
     886:	40 e0       	ldi	r20, 0x00	; 0
     888:	00 e0       	ldi	r16, 0x00	; 0
     88a:	12 ec       	ldi	r17, 0xC2	; 194
     88c:	21 e0       	ldi	r18, 0x01	; 1
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	52 e0       	ldi	r21, 0x02	; 2
     892:	e5 2e       	mov	r14, r21
     894:	0e 94 6e 09 	call	0x12dc	; 0x12dc <eMBInit>
	eStatus = eMBSetSlaveID( 0x34, TRUE, ucSlaveID, 3 );
     898:	84 e3       	ldi	r24, 0x34	; 52
     89a:	61 e0       	ldi	r22, 0x01	; 1
     89c:	42 e6       	ldi	r20, 0x62	; 98
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	23 e0       	ldi	r18, 0x03	; 3
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <eMBSetSlaveID>
	sei();
     8a8:	78 94       	sei
	
	/* Enable the Modbus Protocol Stack. */
	eStatus = eMBEnable();
     8aa:	0e 94 c0 08 	call	0x1180	; 0x1180 <eMBEnable>
					}
				}
			}

			gFlagsCurrentPid.pidTimer = FALSE;
			PORTB ^= 1;
     8ae:	11 e0       	ldi	r17, 0x01	; 1
				}

				CurrentLimitSP = (unsigned int)arrADC[2];

				gFlagsSpeedPid.pidTimer = FALSE;
				PORTB ^= 2;
     8b0:	02 e0       	ldi	r16, 0x02	; 2
	eStatus = eMBEnable();

	while( 1 ) {

		// Run PID calculations once every PID timer timeout
		if( gFlagsCurrentPid.pidTimer ) {
     8b2:	80 91 97 00 	lds	r24, 0x0097
     8b6:	88 23       	and	r24, r24
     8b8:	09 f4       	brne	.+2      	; 0x8bc <__stack+0x5d>
     8ba:	8a c0       	rjmp	.+276    	; 0x9d0 <__stack+0x171>
			CurrentFB = arrADC[0];
     8bc:	80 91 82 01 	lds	r24, 0x0182
     8c0:	90 91 83 01 	lds	r25, 0x0183
     8c4:	90 93 a6 00 	sts	0x00A6, r25
     8c8:	80 93 a5 00 	sts	0x00A5, r24
			
			if( 16 & ucRegCoilsBuf[0] ) {
     8cc:	80 91 a2 01 	lds	r24, 0x01A2
     8d0:	84 ff       	sbrs	r24, 4
     8d2:	2b c0       	rjmp	.+86     	; 0x92a <__stack+0xcb>
				CurrentSP = SpeedPidOut;
     8d4:	80 91 a1 00 	lds	r24, 0x00A1
     8d8:	90 91 a2 00 	lds	r25, 0x00A2
     8dc:	90 93 a4 00 	sts	0x00A4, r25
     8e0:	80 93 a3 00 	sts	0x00A3, r24

				if( CurrentSP > CurrentLimitSP ) {
     8e4:	20 91 a3 00 	lds	r18, 0x00A3
     8e8:	30 91 a4 00 	lds	r19, 0x00A4
     8ec:	80 91 a9 00 	lds	r24, 0x00A9
     8f0:	90 91 aa 00 	lds	r25, 0x00AA
     8f4:	82 17       	cp	r24, r18
     8f6:	93 07       	cpc	r25, r19
     8f8:	2c f4       	brge	.+10     	; 0x904 <__stack+0xa5>
					CurrentSP = CurrentLimitSP;
     8fa:	80 91 a9 00 	lds	r24, 0x00A9
     8fe:	90 91 aa 00 	lds	r25, 0x00AA
     902:	26 c0       	rjmp	.+76     	; 0x950 <__stack+0xf1>
				} else {
					if( CurrentSP < -CurrentLimitSP ) {
     904:	20 91 a3 00 	lds	r18, 0x00A3
     908:	30 91 a4 00 	lds	r19, 0x00A4
     90c:	80 91 a9 00 	lds	r24, 0x00A9
     910:	90 91 aa 00 	lds	r25, 0x00AA
     914:	90 95       	com	r25
     916:	81 95       	neg	r24
     918:	9f 4f       	sbci	r25, 0xFF	; 255
     91a:	28 17       	cp	r18, r24
     91c:	39 07       	cpc	r19, r25
     91e:	e4 f4       	brge	.+56     	; 0x958 <__stack+0xf9>
						CurrentSP = -CurrentLimitSP;
     920:	80 91 a9 00 	lds	r24, 0x00A9
     924:	90 91 aa 00 	lds	r25, 0x00AA
     928:	10 c0       	rjmp	.+32     	; 0x94a <__stack+0xeb>
					}
				}
			} else {
				CurrentSP = arrADC[2];
     92a:	80 91 86 01 	lds	r24, 0x0186
     92e:	90 91 87 01 	lds	r25, 0x0187
     932:	90 93 a4 00 	sts	0x00A4, r25
     936:	80 93 a3 00 	sts	0x00A3, r24
				if( mbFB ) {
     93a:	80 91 b2 00 	lds	r24, 0x00B2
     93e:	88 23       	and	r24, r24
     940:	59 f0       	breq	.+22     	; 0x958 <__stack+0xf9>
					CurrentSP = -CurrentSP;
     942:	80 91 a3 00 	lds	r24, 0x00A3
     946:	90 91 a4 00 	lds	r25, 0x00A4
     94a:	90 95       	com	r25
     94c:	81 95       	neg	r24
     94e:	9f 4f       	sbci	r25, 0xFF	; 255
     950:	90 93 a4 00 	sts	0x00A4, r25
     954:	80 93 a3 00 	sts	0x00A3, r24
				}
			}

			CurrentPidOut = pid_Controller( CurrentSP, CurrentFB, (pidData_t*)&pidCurrentData );
     958:	80 91 a3 00 	lds	r24, 0x00A3
     95c:	90 91 a4 00 	lds	r25, 0x00A4
     960:	60 91 a5 00 	lds	r22, 0x00A5
     964:	70 91 a6 00 	lds	r23, 0x00A6
     968:	40 e2       	ldi	r20, 0x20	; 32
     96a:	51 e0       	ldi	r21, 0x01	; 1
     96c:	0e 94 95 07 	call	0xf2a	; 0xf2a <pid_Controller>
     970:	90 93 a8 00 	sts	0x00A8, r25
     974:	80 93 a7 00 	sts	0x00A7, r24

			iPWM = CurrentPidOut;
     978:	80 91 a7 00 	lds	r24, 0x00A7
     97c:	90 91 a8 00 	lds	r25, 0x00A8
     980:	90 93 9c 00 	sts	0x009C, r25
     984:	80 93 9b 00 	sts	0x009B, r24
			if( ucReady && ucOn ) {
     988:	80 91 61 00 	lds	r24, 0x0061
     98c:	88 23       	and	r24, r24
     98e:	49 f0       	breq	.+18     	; 0x9a2 <__stack+0x143>
     990:	80 91 af 00 	lds	r24, 0x00AF
     994:	88 23       	and	r24, r24
     996:	29 f0       	breq	.+10     	; 0x9a2 <__stack+0x143>
				Set_Input_Current( CurrentPidOut );
     998:	80 91 a7 00 	lds	r24, 0x00A7
     99c:	90 91 a8 00 	lds	r25, 0x00A8
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <__stack+0x147>
			} else {
				Set_Input_Current( 0 );
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 07 04 	call	0x80e	; 0x80e <Set_Input_Current>
			}

			if( ++gFlagsSpeedPid.dummy > 10 ) {
     9aa:	80 91 9a 00 	lds	r24, 0x009A
     9ae:	8f 5f       	subi	r24, 0xFF	; 255
     9b0:	80 93 9a 00 	sts	0x009A, r24
     9b4:	80 91 9a 00 	lds	r24, 0x009A
     9b8:	8b 30       	cpi	r24, 0x0B	; 11
     9ba:	20 f0       	brcs	.+8      	; 0x9c4 <__stack+0x165>
				gFlagsSpeedPid.pidTimer = TRUE;
     9bc:	10 93 99 00 	sts	0x0099, r17
				gFlagsSpeedPid.dummy = 0;
     9c0:	10 92 9a 00 	sts	0x009A, r1
						SpeedSP = -SpeedSP;
					}
				}
			}

			gFlagsCurrentPid.pidTimer = FALSE;
     9c4:	10 92 97 00 	sts	0x0097, r1
			PORTB ^= 1;
     9c8:	88 b3       	in	r24, 0x18	; 24
     9ca:	81 27       	eor	r24, r17
     9cc:	88 bb       	out	0x18, r24	; 24
     9ce:	71 cf       	rjmp	.-286    	; 0x8b2 <__stack+0x53>
		} else {
			if( gFlagsSpeedPid.pidTimer ) {
     9d0:	80 91 99 00 	lds	r24, 0x0099
     9d4:	88 23       	and	r24, r24
     9d6:	09 f4       	brne	.+2      	; 0x9da <__stack+0x17b>
     9d8:	40 c0       	rjmp	.+128    	; 0xa5a <__stack+0x1fb>
				
				SpeedFB = arrADC[1];
     9da:	80 91 84 01 	lds	r24, 0x0184
     9de:	90 91 85 01 	lds	r25, 0x0185
     9e2:	90 93 a0 00 	sts	0x00A0, r25
     9e6:	80 93 9f 00 	sts	0x009F, r24

				if( !__DIRECTION_AUTO_CHANGE_EVER_MS__ ) {
					SpeedSP = arrADC[3];
     9ea:	80 91 88 01 	lds	r24, 0x0188
     9ee:	90 91 89 01 	lds	r25, 0x0189
     9f2:	90 93 9e 00 	sts	0x009E, r25
     9f6:	80 93 9d 00 	sts	0x009D, r24
					if( mbFB ) {
     9fa:	80 91 b2 00 	lds	r24, 0x00B2
     9fe:	88 23       	and	r24, r24
     a00:	59 f0       	breq	.+22     	; 0xa18 <__stack+0x1b9>
						SpeedSP = -SpeedSP;
     a02:	80 91 9d 00 	lds	r24, 0x009D
     a06:	90 91 9e 00 	lds	r25, 0x009E
     a0a:	90 95       	com	r25
     a0c:	81 95       	neg	r24
     a0e:	9f 4f       	sbci	r25, 0xFF	; 255
     a10:	90 93 9e 00 	sts	0x009E, r25
     a14:	80 93 9d 00 	sts	0x009D, r24
					}
				}

				SpeedPidOut = pid_Controller( SpeedSP, SpeedFB, (pidData_t*)&pidSpeedData );
     a18:	80 91 9d 00 	lds	r24, 0x009D
     a1c:	90 91 9e 00 	lds	r25, 0x009E
     a20:	60 91 9f 00 	lds	r22, 0x009F
     a24:	70 91 a0 00 	lds	r23, 0x00A0
     a28:	42 e3       	ldi	r20, 0x32	; 50
     a2a:	51 e0       	ldi	r21, 0x01	; 1
     a2c:	0e 94 95 07 	call	0xf2a	; 0xf2a <pid_Controller>
     a30:	90 93 a2 00 	sts	0x00A2, r25
     a34:	80 93 a1 00 	sts	0x00A1, r24

				if( SpeedPidOut >= 0 ) {
     a38:	80 91 a1 00 	lds	r24, 0x00A1
     a3c:	90 91 a2 00 	lds	r25, 0x00A2
				//	ucFB = 0;
				} else {
				//	ucFB = 1;
				}

				CurrentLimitSP = (unsigned int)arrADC[2];
     a40:	80 91 86 01 	lds	r24, 0x0186
     a44:	90 91 87 01 	lds	r25, 0x0187
     a48:	90 93 aa 00 	sts	0x00AA, r25
     a4c:	80 93 a9 00 	sts	0x00A9, r24

				gFlagsSpeedPid.pidTimer = FALSE;
     a50:	10 92 99 00 	sts	0x0099, r1
				PORTB ^= 2;
     a54:	88 b3       	in	r24, 0x18	; 24
     a56:	80 27       	eor	r24, r16
     a58:	88 bb       	out	0x18, r24	; 24
			}

			cli();
     a5a:	f8 94       	cli
			uiRegInputBuf[0] = CurrentFB;
     a5c:	80 91 a5 00 	lds	r24, 0x00A5
     a60:	90 91 a6 00 	lds	r25, 0x00A6
     a64:	90 93 65 01 	sts	0x0165, r25
     a68:	80 93 64 01 	sts	0x0164, r24
			uiRegInputBuf[1] = SpeedFB;
     a6c:	80 91 9f 00 	lds	r24, 0x009F
     a70:	90 91 a0 00 	lds	r25, 0x00A0
     a74:	90 93 67 01 	sts	0x0167, r25
     a78:	80 93 66 01 	sts	0x0166, r24

			uiRegInputBuf[2] = CurrentSP;
     a7c:	80 91 a3 00 	lds	r24, 0x00A3
     a80:	90 91 a4 00 	lds	r25, 0x00A4
     a84:	90 93 69 01 	sts	0x0169, r25
     a88:	80 93 68 01 	sts	0x0168, r24
			uiRegInputBuf[3] = SpeedSP;
     a8c:	80 91 9d 00 	lds	r24, 0x009D
     a90:	90 91 9e 00 	lds	r25, 0x009E
     a94:	90 93 6b 01 	sts	0x016B, r25
     a98:	80 93 6a 01 	sts	0x016A, r24

			uiRegInputBuf[4] = CurrentPidOut;
     a9c:	80 91 a7 00 	lds	r24, 0x00A7
     aa0:	90 91 a8 00 	lds	r25, 0x00A8
     aa4:	90 93 6d 01 	sts	0x016D, r25
     aa8:	80 93 6c 01 	sts	0x016C, r24
			uiRegInputBuf[5] = SpeedPidOut;
     aac:	80 91 a1 00 	lds	r24, 0x00A1
     ab0:	90 91 a2 00 	lds	r25, 0x00A2
     ab4:	90 93 6f 01 	sts	0x016F, r25
     ab8:	80 93 6e 01 	sts	0x016E, r24
			uiRegInputBuf[6] = CurrentLimitSP;
     abc:	80 91 a9 00 	lds	r24, 0x00A9
     ac0:	90 91 aa 00 	lds	r25, 0x00AA
     ac4:	90 93 71 01 	sts	0x0171, r25
     ac8:	80 93 70 01 	sts	0x0170, r24

			uiRegInputBuf[7] = iPWM;
     acc:	80 91 9b 00 	lds	r24, 0x009B
     ad0:	90 91 9c 00 	lds	r25, 0x009C
     ad4:	90 93 73 01 	sts	0x0173, r25
     ad8:	80 93 72 01 	sts	0x0172, r24
			uiRegInputBuf[8] = OCR1A;
     adc:	8a b5       	in	r24, 0x2a	; 42
     ade:	9b b5       	in	r25, 0x2b	; 43
     ae0:	90 93 75 01 	sts	0x0175, r25
     ae4:	80 93 74 01 	sts	0x0174, r24
			uiRegInputBuf[9] = OCR1B;
     ae8:	88 b5       	in	r24, 0x28	; 40
     aea:	99 b5       	in	r25, 0x29	; 41
     aec:	90 93 77 01 	sts	0x0177, r25
     af0:	80 93 76 01 	sts	0x0176, r24
			sei();
     af4:	78 94       	sei

			/*inPort[0] = ucEMS || 0;
			inPort[1] = ucReady;*/
			inPort[0] = ucReady;
     af6:	80 91 61 00 	lds	r24, 0x0061
     afa:	80 93 44 01 	sts	0x0144, r24

			arrToDiscBuff( (unsigned char*)ucRegDiscBuf, inPort, 8 );
     afe:	8b ea       	ldi	r24, 0xAB	; 171
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	64 e4       	ldi	r22, 0x44	; 68
     b04:	71 e0       	ldi	r23, 0x01	; 1
     b06:	48 e0       	ldi	r20, 0x08	; 8
     b08:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <arrToDiscBuff>

			eMBPoll();
     b0c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <eMBPoll>

			// EMS (Q0):
			if( 1 & ucRegCoilsBuf[0] ) {
     b10:	80 91 a2 01 	lds	r24, 0x01A2
     b14:	80 ff       	sbrs	r24, 0
     b16:	17 c0       	rjmp	.+46     	; 0xb46 <__stack+0x2e7>
				PORTD &= ~( (1<<PD7) | (1<<PD6) | (1<<PD5) | (1<<PD4) );
     b18:	82 b3       	in	r24, 0x12	; 18
     b1a:	8f 70       	andi	r24, 0x0F	; 15
     b1c:	82 bb       	out	0x12, r24	; 18
     b1e:	80 91 aa 01 	lds	r24, 0x01AA
     b22:	8e 7f       	andi	r24, 0xFE	; 254
     b24:	80 93 aa 01 	sts	0x01AA, r24
     b28:	0e 94 4d 06 	call	0xc9a	; 0xc9a <pwm_stop>
				pwm_disable();
				PORTD |= ( (1<<PD7) | (1<<PD6) );
     b2c:	82 b3       	in	r24, 0x12	; 18
     b2e:	80 6c       	ori	r24, 0xC0	; 192
     b30:	82 bb       	out	0x12, r24	; 18
				pid_Reset_Integrator( (pidData_t*)&pidCurrentData );
     b32:	80 e2       	ldi	r24, 0x20	; 32
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	0e 94 63 08 	call	0x10c6	; 0x10c6 <pid_Reset_Integrator>
				pid_Reset_Integrator( (pidData_t*)&pidSpeedData );
     b3a:	82 e3       	ldi	r24, 0x32	; 50
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	0e 94 63 08 	call	0x10c6	; 0x10c6 <pid_Reset_Integrator>
				ucEMS = 1;
     b42:	10 93 b0 00 	sts	0x00B0, r17
			} else {
				//ucEMS = 0;
			}

			// RESET:
			if( 2 & ucRegCoilsBuf[0] ) {
     b46:	80 91 a2 01 	lds	r24, 0x01A2
     b4a:	81 ff       	sbrs	r24, 1
     b4c:	12 c0       	rjmp	.+36     	; 0xb72 <__stack+0x313>
				pid_Reset_Integrator( (pidData_t *)&pidCurrentData );
     b4e:	80 e2       	ldi	r24, 0x20	; 32
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	0e 94 63 08 	call	0x10c6	; 0x10c6 <pid_Reset_Integrator>
				ucRegCoilsBuf[0] &= ~( 2 | 1 );
     b56:	80 91 a2 01 	lds	r24, 0x01A2
     b5a:	8c 7f       	andi	r24, 0xFC	; 252
     b5c:	80 93 a2 01 	sts	0x01A2, r24
				ucACmpOverCurrent = 0;
     b60:	10 92 b1 00 	sts	0x00B1, r1
     b64:	80 91 aa 01 	lds	r24, 0x01AA
     b68:	81 60       	ori	r24, 0x01	; 1
     b6a:	80 93 aa 01 	sts	0x01AA, r24
				pwm_enable();
				ucEMS = 0;
     b6e:	10 92 b0 00 	sts	0x00B0, r1
			} else {
			}

			if( 4 & ucRegCoilsBuf[0] ) {
     b72:	80 91 a2 01 	lds	r24, 0x01A2
     b76:	82 ff       	sbrs	r24, 2
     b78:	03 c0       	rjmp	.+6      	; 0xb80 <__stack+0x321>
				ucOn = 1;
     b7a:	10 93 af 00 	sts	0x00AF, r17
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <__stack+0x325>
			} else {
				ucOn = 0;
     b80:	10 92 af 00 	sts	0x00AF, r1
			}

			if( 8 & ucRegCoilsBuf[0] ) {
     b84:	80 91 a2 01 	lds	r24, 0x01A2
     b88:	83 ff       	sbrs	r24, 3
     b8a:	03 c0       	rjmp	.+6      	; 0xb92 <__stack+0x333>
				mbFB = 1;
     b8c:	10 93 b2 00 	sts	0x00B2, r17
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <__stack+0x337>
			} else {
				mbFB = 0;
     b92:	10 92 b2 00 	sts	0x00B2, r1
			}

			if( ucEMS || ucACmpOverCurrent ) {
     b96:	80 91 b0 00 	lds	r24, 0x00B0
     b9a:	88 23       	and	r24, r24
     b9c:	21 f4       	brne	.+8      	; 0xba6 <__stack+0x347>
     b9e:	80 91 b1 00 	lds	r24, 0x00B1
     ba2:	88 23       	and	r24, r24
     ba4:	19 f0       	breq	.+6      	; 0xbac <__stack+0x34d>
				ucReady = 0;
     ba6:	10 92 61 00 	sts	0x0061, r1
     baa:	83 ce       	rjmp	.-762    	; 0x8b2 <__stack+0x53>
			} else {
				ucReady = 1;
     bac:	10 93 61 00 	sts	0x0061, r17
     bb0:	80 ce       	rjmp	.-768    	; 0x8b2 <__stack+0x53>

00000bb2 <pwm_dir_a>:
}

void pwm_dir_a( uint8_t pwm_duty )
// Send PWM signal for rotation with the indicated pwm ratio (0 - 255).
// This function is meant to be called only by pwm_update.
{
     bb2:	28 2f       	mov	r18, r24
	// Determine the duty cycle value for the timer.
	uint16_t duty_cycle = PWM_OCRN_VALUE( pwm_div, pwm_duty );
     bb4:	60 91 b7 00 	lds	r22, 0x00B7
     bb8:	70 91 b8 00 	lds	r23, 0x00B8

	cli();
     bbc:	f8 94       	cli
	// Do we need to reconfigure PWM output for direction A?
	if( !pwm_a ) { // Yes...
     bbe:	80 91 b5 00 	lds	r24, 0x00B5
     bc2:	88 23       	and	r24, r24
     bc4:	81 f4       	brne	.+32     	; 0xbe6 <pwm_dir_a+0x34>
		// Set SMPLn_B and SMPLn_A to high.
		//PORTx |= ((1<<Pxx) | (1<<Pxx));

		// Set EN_B to low.
		PORTD &= ~(1<<PD7);
     bc6:	97 98       	cbi	0x12, 7	; 18

		// Disable PWM_A and PWM_B output.
		// NOTE: Actually PWM_A should already be disabled...
		TCCR1A = 0;
     bc8:	1f bc       	out	0x2f, r1	; 47

		// Make sure PWM_A and PWM_B are low.
		PORTD &= ~( (1<<PD5) | (1<<PD4) );
     bca:	82 b3       	in	r24, 0x12	; 18
     bcc:	8f 7c       	andi	r24, 0xCF	; 207
     bce:	82 bb       	out	0x12, r24	; 18
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <pwm_dir_a+0x26>
					 //	   by experiment with an "MG995".
inline static void delay_loop(int n)
{
	uint8_t i;
	for( i = 0; i < n; i++ ) {
		asm("nop\n");
     bd4:	00 00       	nop
					 //	   This value of 20 gives a 5 microsecond delay and was chosen
					 //	   by experiment with an "MG995".
inline static void delay_loop(int n)
{
	uint8_t i;
	for( i = 0; i < n; i++ ) {
     bd6:	8f 5f       	subi	r24, 0xFF	; 255
     bd8:	86 34       	cpi	r24, 0x46	; 70
     bda:	e1 f7       	brne	.-8      	; 0xbd4 <pwm_dir_a+0x22>
		// for most purposes.
		//
		delay_loop( DELAYLOOP );

		// Enable PWM_A (PD5/OC1A)  output.
		TCCR1A = (1<<COM1A1);
     bdc:	80 e8       	ldi	r24, 0x80	; 128
     bde:	8f bd       	out	0x2f, r24	; 47

		// Set EN_A to high.
		PORTD |= (1<<PD6);
     be0:	96 9a       	sbi	0x12, 6	; 18

		// NOTE: The PWM driven state of the H-bridge should not be switched to b-mode or braking
		// without a suffient delay.

		// Reset the B direction flag.
		pwm_b = 0;
     be2:	10 92 b6 00 	sts	0x00B6, r1
	}

	// Update the A direction flag.  A non-zero value keeps us from
	// recofiguring the PWM output A when it is already configured.
	pwm_a = pwm_duty;
     be6:	20 93 b5 00 	sts	0x00B5, r18
void pwm_dir_a( uint8_t pwm_duty )
// Send PWM signal for rotation with the indicated pwm ratio (0 - 255).
// This function is meant to be called only by pwm_update.
{
	// Determine the duty cycle value for the timer.
	uint16_t duty_cycle = PWM_OCRN_VALUE( pwm_div, pwm_duty );
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	34 e0       	ldi	r19, 0x04	; 4
     bf0:	66 0f       	add	r22, r22
     bf2:	77 1f       	adc	r23, r23
     bf4:	88 1f       	adc	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	3a 95       	dec	r19
     bfa:	d1 f7       	brne	.-12     	; 0xbf0 <pwm_dir_a+0x3e>
     bfc:	61 50       	subi	r22, 0x01	; 1
     bfe:	70 40       	sbci	r23, 0x00	; 0
     c00:	80 40       	sbci	r24, 0x00	; 0
     c02:	90 40       	sbci	r25, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	0e 94 85 10 	call	0x210a	; 0x210a <__mulsi3>
     c0e:	2f ef       	ldi	r18, 0xFF	; 255
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	0e 94 b7 10 	call	0x216e	; 0x216e <__udivmodsi4>
	// Update the A direction flag.  A non-zero value keeps us from
	// recofiguring the PWM output A when it is already configured.
	pwm_a = pwm_duty;

	// Update the PWM duty cycle.
	OCR1A = duty_cycle;
     c1a:	3b bd       	out	0x2b, r19	; 43
     c1c:	2a bd       	out	0x2a, r18	; 42
	OCR1B = 0;
     c1e:	19 bc       	out	0x29, r1	; 41
     c20:	18 bc       	out	0x28, r1	; 40

	// Restore interrupts.
	sei();
     c22:	78 94       	sei
}
     c24:	08 95       	ret

00000c26 <pwm_dir_b>:

void pwm_dir_b( uint8_t pwm_duty )
// Send PWM signal for rotation with the indicated pwm ratio (0 - 255).
// This function is meant to be called only by pwm_update.
{
     c26:	28 2f       	mov	r18, r24
	// Determine the duty cycle value for the timer.
	uint16_t duty_cycle = PWM_OCRN_VALUE( pwm_div, pwm_duty );
     c28:	60 91 b7 00 	lds	r22, 0x00B7
     c2c:	70 91 b8 00 	lds	r23, 0x00B8

	cli();
     c30:	f8 94       	cli
	// Do we need to reconfigure PWM output for direction B?
	if( !pwm_b ) { // Yes...
     c32:	80 91 b6 00 	lds	r24, 0x00B6
     c36:	88 23       	and	r24, r24
     c38:	81 f4       	brne	.+32     	; 0xc5a <pwm_dir_b+0x34>
		// Set SMPLn_B and SMPLn_A to high.
//		PORTx |= ((1<<Pxx) | (1<<Pxx));

		// Set EN_A to low.
		PORTD &= ~(1<<PD6);
     c3a:	96 98       	cbi	0x12, 6	; 18

		// Disable PWM_A and PWM_B output.
		// NOTE: Actually PWM_B should already be disabled...
		TCCR1A = 0;
     c3c:	1f bc       	out	0x2f, r1	; 47

		// Make sure PWM_A and PWM_B are low.
		PORTD &= ~( (1<<PD5) | (1<<PD4) );
     c3e:	82 b3       	in	r24, 0x12	; 18
     c40:	8f 7c       	andi	r24, 0xCF	; 207
     c42:	82 bb       	out	0x12, r24	; 18
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <pwm_dir_b+0x26>
					 //	   by experiment with an "MG995".
inline static void delay_loop(int n)
{
	uint8_t i;
	for( i = 0; i < n; i++ ) {
		asm("nop\n");
     c48:	00 00       	nop
					 //	   This value of 20 gives a 5 microsecond delay and was chosen
					 //	   by experiment with an "MG995".
inline static void delay_loop(int n)
{
	uint8_t i;
	for( i = 0; i < n; i++ ) {
     c4a:	8f 5f       	subi	r24, 0xFF	; 255
     c4c:	86 34       	cpi	r24, 0x46	; 70
     c4e:	e1 f7       	brne	.-8      	; 0xc48 <pwm_dir_b+0x22>
		// for most purposes.
		//
		delay_loop( DELAYLOOP );

		// Enable PWM_B output.
		TCCR1A = (1<<COM1B1);
     c50:	80 e2       	ldi	r24, 0x20	; 32
     c52:	8f bd       	out	0x2f, r24	; 47

		// Set EN_B to high.
		PORTD |= (1<<PD7);
     c54:	97 9a       	sbi	0x12, 7	; 18

		// NOTE: The PWM driven state of the H-bridge should not be switched to a-mode or braking
		// without a suffient delay.

		// Reset the A direction flag.
		pwm_a = 0;
     c56:	10 92 b5 00 	sts	0x00B5, r1
	}

	// Update the B direction flag.  A non-zero value keeps us from
	// recofiguring the PWM output B when it is already configured.
	pwm_b = pwm_duty;
     c5a:	20 93 b6 00 	sts	0x00B6, r18

	// Update the PWM duty cycle.
	OCR1A = 0;
     c5e:	1b bc       	out	0x2b, r1	; 43
     c60:	1a bc       	out	0x2a, r1	; 42
void pwm_dir_b( uint8_t pwm_duty )
// Send PWM signal for rotation with the indicated pwm ratio (0 - 255).
// This function is meant to be called only by pwm_update.
{
	// Determine the duty cycle value for the timer.
	uint16_t duty_cycle = PWM_OCRN_VALUE( pwm_div, pwm_duty );
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	44 e0       	ldi	r20, 0x04	; 4
     c68:	66 0f       	add	r22, r22
     c6a:	77 1f       	adc	r23, r23
     c6c:	88 1f       	adc	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	4a 95       	dec	r20
     c72:	d1 f7       	brne	.-12     	; 0xc68 <pwm_dir_b+0x42>
     c74:	61 50       	subi	r22, 0x01	; 1
     c76:	70 40       	sbci	r23, 0x00	; 0
     c78:	80 40       	sbci	r24, 0x00	; 0
     c7a:	90 40       	sbci	r25, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	40 e0       	ldi	r20, 0x00	; 0
     c80:	50 e0       	ldi	r21, 0x00	; 0
     c82:	0e 94 85 10 	call	0x210a	; 0x210a <__mulsi3>
     c86:	2f ef       	ldi	r18, 0xFF	; 255
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	0e 94 b7 10 	call	0x216e	; 0x216e <__udivmodsi4>
	// recofiguring the PWM output B when it is already configured.
	pwm_b = pwm_duty;

	// Update the PWM duty cycle.
	OCR1A = 0;
	OCR1B = duty_cycle;
     c92:	39 bd       	out	0x29, r19	; 41
     c94:	28 bd       	out	0x28, r18	; 40

	// Restore interrupts.
	sei();
     c96:	78 94       	sei
}
     c98:	08 95       	ret

00000c9a <pwm_stop>:

void pwm_stop(void)
// Stop all PWM signals to the motor.
{
	// Disable interrupts.
	cli();
     c9a:	f8 94       	cli

	TCCR1A = 0;
     c9c:	1f bc       	out	0x2f, r1	; 47
	PORTD &= ~( (1<<PD7) | (1<<PD6) | (1<<PD5) | (1<<PD4) );
     c9e:	82 b3       	in	r24, 0x12	; 18
     ca0:	8f 70       	andi	r24, 0x0F	; 15
     ca2:	82 bb       	out	0x12, r24	; 18
	OCR1A = 0;
     ca4:	1b bc       	out	0x2b, r1	; 43
     ca6:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;
     ca8:	19 bc       	out	0x29, r1	; 41
     caa:	18 bc       	out	0x28, r1	; 40

	// Make sure that SMPLn_B and SMPLn_A are held high.
//	PORTx |= ( (1<<Pxx) | (1<<Pxx) );

	// Reset the A and B direction flags.
	pwm_a = 0;
     cac:	10 92 b5 00 	sts	0x00B5, r1
	pwm_b = 0;
     cb0:	10 92 b6 00 	sts	0x00B6, r1

	// Restore interrupts.
	sei();
     cb4:	78 94       	sei
}
     cb6:	08 95       	ret

00000cb8 <pwm_registers_defaults>:
	// PWM frequency (500 kHz for 8MHz clock, 1250 kHz for 20MHz clock) by a
	// constant value to produce a PWM frequency suitable to drive a motor.  A
	// small motor with low inductance and impedance such as those found in an
	// RC servo will my typically use a divider value between 16 and 64.  A larger
	// motor with higher inductance and impedance may require a greater divider.
	registers_write_word( REG_PWM_FREQ_DIVIDER_HI, REG_PWM_FREQ_DIVIDER_LO, DEFAULT_PWM_FREQ_DIVIDER );
     cb8:	88 e2       	ldi	r24, 0x28	; 40
     cba:	69 e2       	ldi	r22, 0x29	; 41
     cbc:	40 e8       	ldi	r20, 0x80	; 128
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <registers_write_word>
}
     cc4:	08 95       	ret

00000cc6 <pwm_init>:

void pwm_init(void)
// Initialize the PWM module for controlling a DC motor.
{
	// Initialize the pwm frequency divider value.
	pwm_div = registers_read_word( REG_PWM_FREQ_DIVIDER_HI, REG_PWM_FREQ_DIVIDER_LO );
     cc6:	88 e2       	ldi	r24, 0x28	; 40
     cc8:	69 e2       	ldi	r22, 0x29	; 41
     cca:	0e 94 8b 06 	call	0xd16	; 0xd16 <registers_read_word>
     cce:	90 93 b8 00 	sts	0x00B8, r25
     cd2:	80 93 b7 00 	sts	0x00B7, r24
	// Set SMPLn_B and SMPLn_A to high.
//	PORTx |= ( (1<<Pxx) | (1<<Pxx) );
//	DDRx |= ( (1<<PDx) | (1<<PDx) );

	// Set EN_A and EN_B to low.
	PORTD &= ~( (1<<PD7) | (1<<PD6) );
     cd6:	22 b3       	in	r18, 0x12	; 18
     cd8:	2f 73       	andi	r18, 0x3F	; 63
     cda:	22 bb       	out	0x12, r18	; 18
	DDRD |= ( (1<<PD7) | (1<<PD6) );
     cdc:	21 b3       	in	r18, 0x11	; 17
     cde:	20 6c       	ori	r18, 0xC0	; 192
     ce0:	21 bb       	out	0x11, r18	; 17

	// Set PWM_A and PWM_B are low.
	PORTD &= ~( (1<<PD5) | (1<<PD4) );
     ce2:	22 b3       	in	r18, 0x12	; 18
     ce4:	2f 7c       	andi	r18, 0xCF	; 207
     ce6:	22 bb       	out	0x12, r18	; 18
	// Enable OC1A and OC1B as outputs.
	DDRD |= ( (1<<PD5) | (1<<PD4) );
     ce8:	21 b3       	in	r18, 0x11	; 17
     cea:	20 63       	ori	r18, 0x30	; 48
     cec:	21 bb       	out	0x11, r18	; 17

	// Reset the timer1 configuration.
	TCNT1 = 0;
     cee:	1d bc       	out	0x2d, r1	; 45
     cf0:	1c bc       	out	0x2c, r1	; 44
	TCCR1A = 0;
     cf2:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0;
     cf4:	1e bc       	out	0x2e, r1	; 46

	// Set timer top value.
	ICR1 = PWM_TOP_VALUE( pwm_div );
     cf6:	54 e0       	ldi	r21, 0x04	; 4
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	5a 95       	dec	r21
     cfe:	e1 f7       	brne	.-8      	; 0xcf8 <pwm_init+0x32>
     d00:	01 97       	sbiw	r24, 0x01	; 1
     d02:	97 bd       	out	0x27, r25	; 39
     d04:	86 bd       	out	0x26, r24	; 38

	// Set the PWM duty cycle to zero.
	OCR1A = 0;
     d06:	1b bc       	out	0x2b, r1	; 43
     d08:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;
     d0a:	19 bc       	out	0x29, r1	; 41
     d0c:	18 bc       	out	0x28, r1	; 40

	// Configure timer 1 for PWM, Phase and Frequency Correct operation, but leave outputs disabled.
	TCCR1A = (0<<COM1A1) | (0<<COM1A0) |			// Disable OC1A output.
     d0e:	1f bc       	out	0x2f, r1	; 47
			 (0<<COM1B1) | (0<<COM1B0) |			// Disable OC1B output.
			 (0<<WGM11)  | (0<<WGM10);				// PWM, Phase and Frequency Correct, TOP = ICR1
	TCCR1B = (0<<ICNC1)  | (0<<ICES1)  |			// Input on ICP1 disabled.
     d10:	81 e1       	ldi	r24, 0x11	; 17
     d12:	8e bd       	out	0x2e, r24	; 46
			 (1<<WGM13)  | (0<<WGM12)  |			// PWM, Phase and Frequency Correct, TOP = ICR1
			 (0<<CS12)   | (0<<CS11)   | (1<<CS10);	// No prescaling.
}
     d14:	08 95       	ret

00000d16 <registers_read_word>:
	uint8_t sreg;
	uint16_t value;


	// Clear interrupts.
	asm volatile ("in %0,__SREG__\n\tcli\n\t" : "=&r" (sreg));
     d16:	9f b7       	in	r25, 0x3f	; 63
     d18:	f8 94       	cli

	// Read the registers.
	value = (registers[address_hi] << 8) | registers[address_lo];

	// Restore status.
	asm volatile ("out __SREG__,%0\n\t" : : "r" (sreg));
     d1a:	9f bf       	out	0x3f, r25	; 63
     d1c:	a5 ea       	ldi	r26, 0xA5	; 165
     d1e:	b1 e0       	ldi	r27, 0x01	; 1
     d20:	fd 01       	movw	r30, r26
     d22:	e6 0f       	add	r30, r22
     d24:	f1 1d       	adc	r31, r1
     d26:	20 81       	ld	r18, Z
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	a8 0f       	add	r26, r24
     d2c:	b1 1d       	adc	r27, r1
     d2e:	9c 91       	ld	r25, X
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	28 2b       	or	r18, r24
     d34:	39 2b       	or	r19, r25

	return value;
}
     d36:	c9 01       	movw	r24, r18
     d38:	08 95       	ret

00000d3a <registers_write_word>:
// Interrupts are disabled during the write.
{
	uint8_t sreg;

	// Clear interrupts.
	asm volatile ("in %0,__SREG__\n\tcli\n\t" : "=&r" (sreg));
     d3a:	9f b7       	in	r25, 0x3f	; 63
     d3c:	f8 94       	cli

	// Write the registers.
	registers[address_hi] = value >> 8;
     d3e:	e5 ea       	ldi	r30, 0xA5	; 165
     d40:	f1 e0       	ldi	r31, 0x01	; 1
     d42:	df 01       	movw	r26, r30
     d44:	a8 0f       	add	r26, r24
     d46:	b1 1d       	adc	r27, r1
     d48:	5c 93       	st	X, r21
	registers[address_lo] = value;
     d4a:	e6 0f       	add	r30, r22
     d4c:	f1 1d       	adc	r31, r1
     d4e:	40 83       	st	Z, r20

	// Restore status.
	asm volatile ("out __SREG__,%0\n\t" : : "r" (sreg));
     d50:	9f bf       	out	0x3f, r25	; 63
}
     d52:	08 95       	ret

00000d54 <registers_defaults>:


// Write a single byte to the registers.
inline static void registers_write_byte(uint8_t address, uint8_t value)
{
    registers[address] = value;
     d54:	80 e1       	ldi	r24, 0x10	; 16
     d56:	80 93 c5 01 	sts	0x01C5, r24

	// Default TWI address.
	registers_write_byte(REG_TWI_ADDRESS, REG_DEFAULT_TWI_ADDR);

	// Call the PWM module to initialize the PWM related default values.
	pwm_registers_defaults();
     d5a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <pwm_registers_defaults>

	// Call the PID module to initialize the PID related default values.
//	pid_registers_defaults();
}
     d5e:	08 95       	ret

00000d60 <registers_init>:
// Register values.
uint8_t registers[REGISTER_COUNT];

void registers_init(void)
// Function to initialize all registers.
{
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
	// Initialize all registers to zero.
	memset(&registers[0], 0, REGISTER_COUNT);
     d64:	c5 ea       	ldi	r28, 0xA5	; 165
     d66:	d1 e0       	ldi	r29, 0x01	; 1
     d68:	80 e4       	ldi	r24, 0x40	; 64
     d6a:	fe 01       	movw	r30, r28
     d6c:	11 92       	st	Z+, r1
     d6e:	8a 95       	dec	r24
     d70:	e9 f7       	brne	.-6      	; 0xd6c <registers_init+0xc>
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	80 93 a5 01 	sts	0x01A5, r24
	registers_write_byte(REG_VERSION_MINOR, SOFTWARE_VERSION_MINOR);

	// Restore the read/write protected registers from EEPROM.  If the
	// EEPROM fails checksum this function will return zero and the
	// read/write protected registers should be initialized to defaults.
	if (!eeprom_restore_registers())
     d78:	80 93 a6 01 	sts	0x01A6, r24
     d7c:	10 92 a7 01 	sts	0x01A7, r1
     d80:	82 e0       	ldi	r24, 0x02	; 2
     d82:	80 93 a8 01 	sts	0x01A8, r24
     d86:	0e 94 01 07 	call	0xe02	; 0xe02 <eeprom_restore_registers>
     d8a:	88 23       	and	r24, r24
     d8c:	51 f4       	brne	.+20     	; 0xda2 <registers_init+0x42>
	{
		// Reset read/write protected registers to zero.
		memset(&registers[MIN_WRITE_PROTECT_REGISTER], WRITE_PROTECT_REGISTER_COUNT + REDIRECT_REGISTER_COUNT, REGISTER_COUNT);
     d8e:	ce 01       	movw	r24, r28
     d90:	80 96       	adiw	r24, 0x20	; 32
     d92:	60 e2       	ldi	r22, 0x20	; 32
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	40 e4       	ldi	r20, 0x40	; 64
     d98:	50 e0       	ldi	r21, 0x00	; 0
     d9a:	0e 94 11 11 	call	0x2222	; 0x2222 <memset>

		// Initialize read/write protected registers to defaults.
		registers_defaults();
     d9e:	0e 94 aa 06 	call	0xd54	; 0xd54 <registers_defaults>
	}
}
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <eeprom_save_registers>:
}


uint8_t eeprom_save_registers(void)
// Save registers to EEPROM.
{
     da8:	0f 93       	push	r16
     daa:	1f 93       	push	r17
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <eeprom_save_registers+0xa>
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	05 ec       	ldi	r16, 0xC5	; 197
     db8:	11 e0       	ldi	r17, 0x01	; 1
     dba:	92 e0       	ldi	r25, 0x02	; 2
{
    // Keep going while bytes in the buffer.
    while (size)
    {
        // Add the buffer to the sum.
        sum += *buffer;
     dbc:	f8 01       	movw	r30, r16
     dbe:	81 91       	ld	r24, Z+
     dc0:	8f 01       	movw	r16, r30
     dc2:	98 0f       	add	r25, r24

static uint8_t eeprom_checksum(const uint8_t *buffer, size_t size, uint8_t sum)
// Adds the buffer to the checksum passed in returning the updated sum.
{
    // Keep going while bytes in the buffer.
    while (size)
     dc4:	f1 e0       	ldi	r31, 0x01	; 1
     dc6:	05 3e       	cpi	r16, 0xE5	; 229
     dc8:	1f 07       	cpc	r17, r31
     dca:	c1 f7       	brne	.-16     	; 0xdbc <eeprom_save_registers+0x14>

    // XXX Disable PWM to servo motor while reading registers.

    // Fill in the EEPROM header.
    header[0] = EEPROM_VERSION;
    header[1] = eeprom_checksum(&registers[MIN_WRITE_PROTECT_REGISTER], WRITE_PROTECT_REGISTER_COUNT + REDIRECT_REGISTER_COUNT, EEPROM_VERSION);
     dcc:	9a 83       	std	Y+2, r25	; 0x02
    uint8_t header[2];

    // XXX Disable PWM to servo motor while reading registers.

    // Fill in the EEPROM header.
    header[0] = EEPROM_VERSION;
     dce:	82 e0       	ldi	r24, 0x02	; 2
     dd0:	89 83       	std	Y+1, r24	; 0x01
    header[1] = eeprom_checksum(&registers[MIN_WRITE_PROTECT_REGISTER], WRITE_PROTECT_REGISTER_COUNT + REDIRECT_REGISTER_COUNT, EEPROM_VERSION);

    // Write the EEPROM header which is the first two bytes of EEPROM.
    eeprom_write_block(&header[0], (void *) 0, 2);
     dd2:	ce 01       	movw	r24, r28
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	42 e0       	ldi	r20, 0x02	; 2
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	0e 94 28 11 	call	0x2250	; 0x2250 <__eewr_block_m32>

    // Write the write protected and redirect registers from EEPROM.
    eeprom_write_block(&registers[MIN_WRITE_PROTECT_REGISTER], (void *) 2, WRITE_PROTECT_REGISTER_COUNT + REDIRECT_REGISTER_COUNT);
     de2:	c8 01       	movw	r24, r16
     de4:	80 97       	sbiw	r24, 0x20	; 32
     de6:	62 e0       	ldi	r22, 0x02	; 2
     de8:	70 e0       	ldi	r23, 0x00	; 0
     dea:	40 e2       	ldi	r20, 0x20	; 32
     dec:	50 e0       	ldi	r21, 0x00	; 0
     dee:	0e 94 28 11 	call	0x2250	; 0x2250 <__eewr_block_m32>

    // XXX Restore PWM to servo motor.

    // Return success.
    return 1;
}
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	cf 91       	pop	r28
     dfa:	df 91       	pop	r29
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	08 95       	ret

00000e02 <eeprom_restore_registers>:


uint8_t eeprom_restore_registers(void)
// Restore registers from EEPROM.  Returns 1 if success or 0 if the registers failed
// checksum.  Upon failure the caller should initialize the registers to defaults.
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	00 d0       	rcall	.+0      	; 0xe08 <eeprom_restore_registers+0x6>
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
    uint8_t header[2];

    // XXX Disable PWM to servo motor while reading registers.

    // Read EEPROM header which is the first two bytes of EEPROM.
    eeprom_read_block(&header[0], (void *) 0, 2);
     e0c:	ce 01       	movw	r24, r28
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	42 e0       	ldi	r20, 0x02	; 2
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	0e 94 18 11 	call	0x2230	; 0x2230 <__eerd_block_m32>

    // Does the version match?
    if (header[0] != EEPROM_VERSION) return 0;
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	82 30       	cpi	r24, 0x02	; 2
     e20:	11 f0       	breq	.+4      	; 0xe26 <eeprom_restore_registers+0x24>
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	16 c0       	rjmp	.+44     	; 0xe52 <eeprom_restore_registers+0x50>

    // Read the write protected and redirect registers from EEPROM.
    eeprom_read_block(&registers[MIN_WRITE_PROTECT_REGISTER], (void *) 2, WRITE_PROTECT_REGISTER_COUNT + REDIRECT_REGISTER_COUNT);
     e26:	85 ec       	ldi	r24, 0xC5	; 197
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	62 e0       	ldi	r22, 0x02	; 2
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	40 e2       	ldi	r20, 0x20	; 32
     e30:	50 e0       	ldi	r21, 0x00	; 0
     e32:	0e 94 18 11 	call	0x2230	; 0x2230 <__eerd_block_m32>

    // Does the checksum match?
    if (header[1] != eeprom_checksum(&registers[MIN_WRITE_PROTECT_REGISTER], WRITE_PROTECT_REGISTER_COUNT + REDIRECT_REGISTER_COUNT, EEPROM_VERSION)) return 0;
     e36:	2a 81       	ldd	r18, Y+2	; 0x02
     e38:	e5 ec       	ldi	r30, 0xC5	; 197
     e3a:	f1 e0       	ldi	r31, 0x01	; 1
     e3c:	92 e0       	ldi	r25, 0x02	; 2
{
    // Keep going while bytes in the buffer.
    while (size)
    {
        // Add the buffer to the sum.
        sum += *buffer;
     e3e:	81 91       	ld	r24, Z+
     e40:	98 0f       	add	r25, r24

static uint8_t eeprom_checksum(const uint8_t *buffer, size_t size, uint8_t sum)
// Adds the buffer to the checksum passed in returning the updated sum.
{
    // Keep going while bytes in the buffer.
    while (size)
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	e5 3e       	cpi	r30, 0xE5	; 229
     e46:	f8 07       	cpc	r31, r24
     e48:	d1 f7       	brne	.-12     	; 0xe3e <eeprom_restore_registers+0x3c>
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	29 17       	cp	r18, r25
     e4e:	09 f4       	brne	.+2      	; 0xe52 <eeprom_restore_registers+0x50>
     e50:	81 e0       	ldi	r24, 0x01	; 1

    // XXX Restore PWM to servo motor.

    // Return success.
    return 1;
}
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <eeprom_erase>:
}


uint8_t eeprom_erase(void)
// Erase the entire EEPROM.
{
     e5c:	df 92       	push	r13
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	60 97       	sbiw	r28, 0x10	; 16
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
    uint8_t buffer[16];

    // XXX Disable PWM to servo motor while reading registers.

    // Clear the buffer contents to 0xFF.
    memset(buffer, 0xFF, sizeof(buffer));
     e7a:	8e 01       	movw	r16, r28
     e7c:	0f 5f       	subi	r16, 0xFF	; 255
     e7e:	1f 4f       	sbci	r17, 0xFF	; 255
     e80:	c8 01       	movw	r24, r16
     e82:	6f ef       	ldi	r22, 0xFF	; 255
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	40 e1       	ldi	r20, 0x10	; 16
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	0e 94 11 11 	call	0x2222	; 0x2222 <memset>
     e8e:	ee 24       	eor	r14, r14
     e90:	ff 24       	eor	r15, r15

    // Loop over the EEPROM in buffer increments.
    for (i = 0; i < E2END; i += sizeof(buffer))
    {
        // Write the buffer to the block of EEPROM.
        eeprom_write_block(buffer, (void *) i, sizeof(buffer));
     e92:	d0 2e       	mov	r13, r16
     e94:	01 2f       	mov	r16, r17
     e96:	8d 2d       	mov	r24, r13
     e98:	90 2f       	mov	r25, r16
     e9a:	b7 01       	movw	r22, r14
     e9c:	40 e1       	ldi	r20, 0x10	; 16
     e9e:	50 e0       	ldi	r21, 0x00	; 0
     ea0:	0e 94 28 11 	call	0x2250	; 0x2250 <__eewr_block_m32>

    // Clear the buffer contents to 0xFF.
    memset(buffer, 0xFF, sizeof(buffer));

    // Loop over the EEPROM in buffer increments.
    for (i = 0; i < E2END; i += sizeof(buffer))
     ea4:	80 e1       	ldi	r24, 0x10	; 16
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	e8 0e       	add	r14, r24
     eaa:	f9 1e       	adc	r15, r25
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	e9 16       	cp	r14, r25
     eb0:	94 e0       	ldi	r25, 0x04	; 4
     eb2:	f9 06       	cpc	r15, r25
     eb4:	81 f7       	brne	.-32     	; 0xe96 <eeprom_erase+0x3a>

    // XXX Restore PWM to servo motor.

    // Return success.
    return 1;
}
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	60 96       	adiw	r28, 0x10	; 16
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	ff 90       	pop	r15
     ece:	ef 90       	pop	r14
     ed0:	df 90       	pop	r13
     ed2:	08 95       	ret

00000ed4 <pid_Init>:
 *  \param d_factor  Derivate term.
 *  \param pid  Struct with PID status.
 */
void pid_Init(int16_t p_factor, int16_t i_factor, int16_t d_factor, pidData_t *pid)
// Set up PID controller parameters
{
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	dc 01       	movw	r26, r24
     eda:	8b 01       	movw	r16, r22
     edc:	f9 01       	movw	r30, r18
	// Start values for PID controller
	pid->sumError = 0;
     ede:	12 82       	std	Z+2, r1	; 0x02
     ee0:	13 82       	std	Z+3, r1	; 0x03
     ee2:	14 82       	std	Z+4, r1	; 0x04
     ee4:	15 82       	std	Z+5, r1	; 0x05
	pid->lastProcessValue = 0;
     ee6:	11 82       	std	Z+1, r1	; 0x01
     ee8:	10 82       	st	Z, r1
	// Tuning constants for PID loop
	pid->P_Factor = p_factor;
     eea:	97 83       	std	Z+7, r25	; 0x07
     eec:	86 83       	std	Z+6, r24	; 0x06
	pid->I_Factor = i_factor;
     eee:	71 87       	std	Z+9, r23	; 0x09
     ef0:	60 87       	std	Z+8, r22	; 0x08
	pid->D_Factor = d_factor;
     ef2:	53 87       	std	Z+11, r21	; 0x0b
     ef4:	42 87       	std	Z+10, r20	; 0x0a
	// Limits to avoid overflow
	pid->maxError = MAX_INT / ( pid->P_Factor + 1 );
     ef6:	11 96       	adiw	r26, 0x01	; 1
     ef8:	8f ef       	ldi	r24, 0xFF	; 255
     efa:	9f e7       	ldi	r25, 0x7F	; 127
     efc:	bd 01       	movw	r22, r26
     efe:	0e 94 a4 10 	call	0x2148	; 0x2148 <__divmodhi4>
     f02:	75 87       	std	Z+13, r23	; 0x0d
     f04:	64 87       	std	Z+12, r22	; 0x0c
	pid->maxSumError = MAX_I_TERM / ( pid->I_Factor + 1 );
     f06:	0f 5f       	subi	r16, 0xFF	; 255
     f08:	1f 4f       	sbci	r17, 0xFF	; 255
     f0a:	80 e1       	ldi	r24, 0x10	; 16
     f0c:	97 e2       	ldi	r25, 0x27	; 39
     f0e:	b8 01       	movw	r22, r16
     f10:	0e 94 a4 10 	call	0x2148	; 0x2148 <__divmodhi4>
     f14:	88 27       	eor	r24, r24
     f16:	77 fd       	sbrc	r23, 7
     f18:	80 95       	com	r24
     f1a:	98 2f       	mov	r25, r24
     f1c:	66 87       	std	Z+14, r22	; 0x0e
     f1e:	77 87       	std	Z+15, r23	; 0x0f
     f20:	80 8b       	std	Z+16, r24	; 0x10
     f22:	91 8b       	std	Z+17, r25	; 0x11
}
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	08 95       	ret

00000f2a <pid_Controller>:
 *  \param setPoint  Desired value.
 *  \param processValue  Measured value.
 *  \param pid_st  PID status struct.
 */
int16_t pid_Controller(int16_t setPoint, int16_t processValue, pidData_t *pid_st)
{
     f2a:	af 92       	push	r10
     f2c:	bf 92       	push	r11
     f2e:	cf 92       	push	r12
     f30:	df 92       	push	r13
     f32:	ef 92       	push	r14
     f34:	ff 92       	push	r15
     f36:	0f 93       	push	r16
     f38:	1f 93       	push	r17
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	5b 01       	movw	r10, r22
     f40:	ea 01       	movw	r28, r20
	int16_t error, p_term, d_term;
	int32_t i_term, ret, temp;

	error = setPoint - processValue;
     f42:	ac 01       	movw	r20, r24
     f44:	46 1b       	sub	r20, r22
     f46:	57 0b       	sbc	r21, r23
	
	// Calculate Pterm and limit error overflow
	if( error > pid_st->maxError ) {
     f48:	2c 85       	ldd	r18, Y+12	; 0x0c
     f4a:	3d 85       	ldd	r19, Y+13	; 0x0d
     f4c:	24 17       	cp	r18, r20
     f4e:	35 07       	cpc	r19, r21
     f50:	2c f4       	brge	.+10     	; 0xf5c <pid_Controller+0x32>
     f52:	3f ef       	ldi	r19, 0xFF	; 255
     f54:	c3 2e       	mov	r12, r19
     f56:	3f e7       	ldi	r19, 0x7F	; 127
     f58:	d3 2e       	mov	r13, r19
     f5a:	15 c0       	rjmp	.+42     	; 0xf86 <pid_Controller+0x5c>
		p_term = MAX_INT;
	} else {
		if( error < -pid_st->maxError ) {
     f5c:	88 27       	eor	r24, r24
     f5e:	99 27       	eor	r25, r25
     f60:	82 1b       	sub	r24, r18
     f62:	93 0b       	sbc	r25, r19
     f64:	48 17       	cp	r20, r24
     f66:	59 07       	cpc	r21, r25
     f68:	2c f4       	brge	.+10     	; 0xf74 <pid_Controller+0x4a>
     f6a:	21 e0       	ldi	r18, 0x01	; 1
     f6c:	c2 2e       	mov	r12, r18
     f6e:	20 e8       	ldi	r18, 0x80	; 128
     f70:	d2 2e       	mov	r13, r18
     f72:	09 c0       	rjmp	.+18     	; 0xf86 <pid_Controller+0x5c>
			p_term = -MAX_INT;
		} else {
			p_term = pid_st->P_Factor * error;
     f74:	8e 81       	ldd	r24, Y+6	; 0x06
     f76:	9f 81       	ldd	r25, Y+7	; 0x07
     f78:	48 9f       	mul	r20, r24
     f7a:	60 01       	movw	r12, r0
     f7c:	49 9f       	mul	r20, r25
     f7e:	d0 0c       	add	r13, r0
     f80:	58 9f       	mul	r21, r24
     f82:	d0 0c       	add	r13, r0
     f84:	11 24       	eor	r1, r1
		}
	}

	// Calculate Iterm and limit integral runaway
	temp = pid_st->sumError + error;	
     f86:	7a 01       	movw	r14, r20
     f88:	00 27       	eor	r16, r16
     f8a:	f7 fc       	sbrc	r15, 7
     f8c:	00 95       	com	r16
     f8e:	10 2f       	mov	r17, r16
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	9b 81       	ldd	r25, Y+3	; 0x03
     f94:	ac 81       	ldd	r26, Y+4	; 0x04
     f96:	bd 81       	ldd	r27, Y+5	; 0x05
     f98:	e8 0e       	add	r14, r24
     f9a:	f9 1e       	adc	r15, r25
     f9c:	0a 1f       	adc	r16, r26
     f9e:	1b 1f       	adc	r17, r27
	if( temp > pid_st->maxSumError ) {
     fa0:	8e 85       	ldd	r24, Y+14	; 0x0e
     fa2:	9f 85       	ldd	r25, Y+15	; 0x0f
     fa4:	a8 89       	ldd	r26, Y+16	; 0x10
     fa6:	b9 89       	ldd	r27, Y+17	; 0x11
     fa8:	8e 15       	cp	r24, r14
     faa:	9f 05       	cpc	r25, r15
     fac:	a0 07       	cpc	r26, r16
     fae:	b1 07       	cpc	r27, r17
     fb0:	5c f4       	brge	.+22     	; 0xfc8 <pid_Controller+0x9e>
		i_term = MAX_I_TERM;
		pid_st->sumError = pid_st->maxSumError;
     fb2:	8a 83       	std	Y+2, r24	; 0x02
     fb4:	9b 83       	std	Y+3, r25	; 0x03
     fb6:	ac 83       	std	Y+4, r26	; 0x04
     fb8:	bd 83       	std	Y+5, r27	; 0x05
     fba:	90 e1       	ldi	r25, 0x10	; 16
     fbc:	e9 2e       	mov	r14, r25
     fbe:	97 e2       	ldi	r25, 0x27	; 39
     fc0:	f9 2e       	mov	r15, r25
     fc2:	01 2d       	mov	r16, r1
     fc4:	11 2d       	mov	r17, r1
     fc6:	29 c0       	rjmp	.+82     	; 0x101a <pid_Controller+0xf0>
	} else {
		if( temp < -pid_st->maxSumError ) {
     fc8:	22 27       	eor	r18, r18
     fca:	33 27       	eor	r19, r19
     fcc:	a9 01       	movw	r20, r18
     fce:	28 1b       	sub	r18, r24
     fd0:	39 0b       	sbc	r19, r25
     fd2:	4a 0b       	sbc	r20, r26
     fd4:	5b 0b       	sbc	r21, r27
     fd6:	e2 16       	cp	r14, r18
     fd8:	f3 06       	cpc	r15, r19
     fda:	04 07       	cpc	r16, r20
     fdc:	15 07       	cpc	r17, r21
     fde:	6c f4       	brge	.+26     	; 0xffa <pid_Controller+0xd0>
			i_term = -MAX_I_TERM;
			pid_st->sumError = -pid_st->maxSumError;
     fe0:	2a 83       	std	Y+2, r18	; 0x02
     fe2:	3b 83       	std	Y+3, r19	; 0x03
     fe4:	4c 83       	std	Y+4, r20	; 0x04
     fe6:	5d 83       	std	Y+5, r21	; 0x05
     fe8:	80 ef       	ldi	r24, 0xF0	; 240
     fea:	e8 2e       	mov	r14, r24
     fec:	88 ed       	ldi	r24, 0xD8	; 216
     fee:	f8 2e       	mov	r15, r24
     ff0:	8f ef       	ldi	r24, 0xFF	; 255
     ff2:	08 2f       	mov	r16, r24
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	18 2f       	mov	r17, r24
     ff8:	10 c0       	rjmp	.+32     	; 0x101a <pid_Controller+0xf0>
		} else {
			pid_st->sumError = temp;
     ffa:	ea 82       	std	Y+2, r14	; 0x02
     ffc:	fb 82       	std	Y+3, r15	; 0x03
     ffe:	0c 83       	std	Y+4, r16	; 0x04
    1000:	1d 83       	std	Y+5, r17	; 0x05
			i_term = pid_st->I_Factor * pid_st->sumError;
    1002:	28 85       	ldd	r18, Y+8	; 0x08
    1004:	39 85       	ldd	r19, Y+9	; 0x09
    1006:	44 27       	eor	r20, r20
    1008:	37 fd       	sbrc	r19, 7
    100a:	40 95       	com	r20
    100c:	54 2f       	mov	r21, r20
    100e:	c8 01       	movw	r24, r16
    1010:	b7 01       	movw	r22, r14
    1012:	0e 94 85 10 	call	0x210a	; 0x210a <__mulsi3>
    1016:	7b 01       	movw	r14, r22
    1018:	8c 01       	movw	r16, r24
		}
	}

	if( !pid_st->I_Factor ) {
    101a:	88 85       	ldd	r24, Y+8	; 0x08
    101c:	99 85       	ldd	r25, Y+9	; 0x09
    101e:	89 2b       	or	r24, r25
    1020:	19 f4       	brne	.+6      	; 0x1028 <pid_Controller+0xfe>
    1022:	ee 24       	eor	r14, r14
    1024:	ff 24       	eor	r15, r15
    1026:	87 01       	movw	r16, r14
		i_term = 0;
	}

	// Calculate Dterm
	d_term = pid_st->D_Factor * ( pid_st->lastProcessValue - processValue );
    1028:	88 81       	ld	r24, Y
    102a:	99 81       	ldd	r25, Y+1	; 0x01
    102c:	8a 19       	sub	r24, r10
    102e:	9b 09       	sbc	r25, r11
    1030:	2a 85       	ldd	r18, Y+10	; 0x0a
    1032:	3b 85       	ldd	r19, Y+11	; 0x0b
    1034:	a9 01       	movw	r20, r18
    1036:	84 9f       	mul	r24, r20
    1038:	90 01       	movw	r18, r0
    103a:	85 9f       	mul	r24, r21
    103c:	30 0d       	add	r19, r0
    103e:	94 9f       	mul	r25, r20
    1040:	30 0d       	add	r19, r0
    1042:	11 24       	eor	r1, r1

	pid_st->lastProcessValue = processValue;
    1044:	b9 82       	std	Y+1, r11	; 0x01
    1046:	a8 82       	st	Y, r10

	ret = ( p_term + i_term + d_term ) / SCALING_FACTOR;
    1048:	b6 01       	movw	r22, r12
    104a:	88 27       	eor	r24, r24
    104c:	77 fd       	sbrc	r23, 7
    104e:	80 95       	com	r24
    1050:	98 2f       	mov	r25, r24
    1052:	44 27       	eor	r20, r20
    1054:	37 fd       	sbrc	r19, 7
    1056:	40 95       	com	r20
    1058:	54 2f       	mov	r21, r20
    105a:	62 0f       	add	r22, r18
    105c:	73 1f       	adc	r23, r19
    105e:	84 1f       	adc	r24, r20
    1060:	95 1f       	adc	r25, r21
    1062:	6e 0d       	add	r22, r14
    1064:	7f 1d       	adc	r23, r15
    1066:	80 1f       	adc	r24, r16
    1068:	91 1f       	adc	r25, r17
    106a:	20 e8       	ldi	r18, 0x80	; 128
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	40 e0       	ldi	r20, 0x00	; 0
    1070:	50 e0       	ldi	r21, 0x00	; 0
    1072:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__divmodsi4>
    1076:	c9 01       	movw	r24, r18
    1078:	da 01       	movw	r26, r20
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	50 e8       	ldi	r21, 0x80	; 128
    107e:	95 07       	cpc	r25, r21
    1080:	5f ef       	ldi	r21, 0xFF	; 255
    1082:	a5 07       	cpc	r26, r21
    1084:	5f ef       	ldi	r21, 0xFF	; 255
    1086:	b5 07       	cpc	r27, r21
    1088:	24 f4       	brge	.+8      	; 0x1092 <pid_Controller+0x168>
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e8       	ldi	r25, 0x80	; 128
    108e:	af ef       	ldi	r26, 0xFF	; 255
    1090:	bf ef       	ldi	r27, 0xFF	; 255
    1092:	9c 01       	movw	r18, r24
    1094:	ad 01       	movw	r20, r26
    1096:	20 30       	cpi	r18, 0x00	; 0
    1098:	80 e8       	ldi	r24, 0x80	; 128
    109a:	38 07       	cpc	r19, r24
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	48 07       	cpc	r20, r24
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	58 07       	cpc	r21, r24
    10a4:	24 f0       	brlt	.+8      	; 0x10ae <pid_Controller+0x184>
    10a6:	2f ef       	ldi	r18, 0xFF	; 255
    10a8:	3f e7       	ldi	r19, 0x7F	; 127
    10aa:	40 e0       	ldi	r20, 0x00	; 0
    10ac:	50 e0       	ldi	r21, 0x00	; 0
    		ret = -MAX_INT;
		}
	}

	return((int16_t)ret);
}
    10ae:	c9 01       	movw	r24, r18
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	df 90       	pop	r13
    10be:	cf 90       	pop	r12
    10c0:	bf 90       	pop	r11
    10c2:	af 90       	pop	r10
    10c4:	08 95       	ret

000010c6 <pid_Reset_Integrator>:
 *
 *  Calling this function will reset the integrator in the PID regulator.
 */
void pid_Reset_Integrator( pidData_t *pid_st )
{
	pid_st->sumError = 0;
    10c6:	fc 01       	movw	r30, r24
    10c8:	12 82       	std	Z+2, r1	; 0x02
    10ca:	13 82       	std	Z+3, r1	; 0x03
    10cc:	14 82       	std	Z+4, r1	; 0x04
    10ce:	15 82       	std	Z+5, r1	; 0x05
}
    10d0:	08 95       	ret

000010d2 <eMBRegisterCB>:
}
#endif

eMBErrorCode
eMBRegisterCB( UCHAR ucFunctionCode, pxMBFunctionHandler pxHandler )
{
    10d2:	48 2f       	mov	r20, r24
    int             i;
    eMBErrorCode    eStatus;

    if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
    10d4:	18 16       	cp	r1, r24
    10d6:	14 f0       	brlt	.+4      	; 0x10dc <eMBRegisterCB+0xa>
    10d8:	82 e0       	ldi	r24, 0x02	; 2
    10da:	08 95       	ret
    {
        ENTER_CRITICAL_SECTION(  );
    10dc:	f8 94       	cli
        if( pxHandler != NULL )
    10de:	61 15       	cp	r22, r1
    10e0:	71 05       	cpc	r23, r1
    10e2:	f9 f0       	breq	.+62     	; 0x1122 <eMBRegisterCB+0x50>
    10e4:	e7 e6       	ldi	r30, 0x67	; 103
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	90 e0       	ldi	r25, 0x00	; 0
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
            {
                if( ( xFuncHandlers[i].pxHandler == NULL ) ||
    10ec:	20 81       	ld	r18, Z
    10ee:	31 81       	ldd	r19, Z+1	; 0x01
    10f0:	21 15       	cp	r18, r1
    10f2:	31 05       	cpc	r19, r1
    10f4:	19 f0       	breq	.+6      	; 0x10fc <eMBRegisterCB+0x2a>
    10f6:	26 17       	cp	r18, r22
    10f8:	37 07       	cpc	r19, r23
    10fa:	69 f4       	brne	.+26     	; 0x1116 <eMBRegisterCB+0x44>
                    ( xFuncHandlers[i].pxHandler == pxHandler ) )
                {
                    xFuncHandlers[i].ucFunctionCode = ucFunctionCode;
    10fc:	fc 01       	movw	r30, r24
    10fe:	ee 0f       	add	r30, r30
    1100:	ff 1f       	adc	r31, r31
    1102:	e8 0f       	add	r30, r24
    1104:	f9 1f       	adc	r31, r25
    1106:	ea 59       	subi	r30, 0x9A	; 154
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	40 83       	st	Z, r20
                    xFuncHandlers[i].pxHandler = pxHandler;
    110c:	72 83       	std	Z+2, r23	; 0x02
    110e:	61 83       	std	Z+1, r22	; 0x01
                    break;
                }
            }
            eStatus = ( i != MB_FUNC_HANDLERS_MAX ) ? MB_ENOERR : MB_ENORES;
    1110:	40 97       	sbiw	r24, 0x10	; 16
    1112:	11 f5       	brne	.+68     	; 0x1158 <eMBRegisterCB+0x86>
    1114:	1f c0       	rjmp	.+62     	; 0x1154 <eMBRegisterCB+0x82>
    if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
    {
        ENTER_CRITICAL_SECTION(  );
        if( pxHandler != NULL )
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	33 96       	adiw	r30, 0x03	; 3
    111a:	80 31       	cpi	r24, 0x10	; 16
    111c:	91 05       	cpc	r25, r1
    111e:	31 f7       	brne	.-52     	; 0x10ec <eMBRegisterCB+0x1a>
    1120:	19 c0       	rjmp	.+50     	; 0x1154 <eMBRegisterCB+0x82>
    1122:	e6 e6       	ldi	r30, 0x66	; 102
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
        }
        else
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
            {
                if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
    112a:	80 81       	ld	r24, Z
    112c:	84 17       	cp	r24, r20
    112e:	59 f4       	brne	.+22     	; 0x1146 <eMBRegisterCB+0x74>
                {
                    xFuncHandlers[i].ucFunctionCode = 0;
    1130:	f9 01       	movw	r30, r18
    1132:	ee 0f       	add	r30, r30
    1134:	ff 1f       	adc	r31, r31
    1136:	e2 0f       	add	r30, r18
    1138:	f3 1f       	adc	r31, r19
    113a:	ea 59       	subi	r30, 0x9A	; 154
    113c:	ff 4f       	sbci	r31, 0xFF	; 255
    113e:	10 82       	st	Z, r1
                    xFuncHandlers[i].pxHandler = NULL;
    1140:	12 82       	std	Z+2, r1	; 0x02
    1142:	11 82       	std	Z+1, r1	; 0x01
    1144:	09 c0       	rjmp	.+18     	; 0x1158 <eMBRegisterCB+0x86>
            }
            eStatus = ( i != MB_FUNC_HANDLERS_MAX ) ? MB_ENOERR : MB_ENORES;
        }
        else
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
    1146:	2f 5f       	subi	r18, 0xFF	; 255
    1148:	3f 4f       	sbci	r19, 0xFF	; 255
    114a:	33 96       	adiw	r30, 0x03	; 3
    114c:	20 31       	cpi	r18, 0x10	; 16
    114e:	31 05       	cpc	r19, r1
    1150:	61 f7       	brne	.-40     	; 0x112a <eMBRegisterCB+0x58>
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <eMBRegisterCB+0x86>
    1154:	84 e0       	ldi	r24, 0x04	; 4
    1156:	01 c0       	rjmp	.+2      	; 0x115a <eMBRegisterCB+0x88>
    1158:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
            /* Remove can't fail. */
            eStatus = MB_ENOERR;
        }
        EXIT_CRITICAL_SECTION(  );
    115a:	78 94       	sei
    else
    {
        eStatus = MB_EINVAL;
    }
    return eStatus;
}
    115c:	08 95       	ret

0000115e <eMBClose>:
eMBErrorCode
eMBClose( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
    115e:	80 91 65 00 	lds	r24, 0x0065
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	11 f0       	breq	.+4      	; 0x116a <eMBClose+0xc>
    1166:	86 e0       	ldi	r24, 0x06	; 6
    1168:	08 95       	ret
    {
        if( pvMBFrameCloseCur != NULL )
    116a:	e0 91 ca 00 	lds	r30, 0x00CA
    116e:	f0 91 cb 00 	lds	r31, 0x00CB
    1172:	30 97       	sbiw	r30, 0x00	; 0
    1174:	11 f4       	brne	.+4      	; 0x117a <eMBClose+0x1c>
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	08 95       	ret
        {
            pvMBFrameCloseCur(  );
    117a:	09 95       	icall
    117c:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_EILLSTATE;
    }
    return eStatus;
}
    117e:	08 95       	ret

00001180 <eMBEnable>:
eMBErrorCode
eMBEnable( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
    1180:	80 91 65 00 	lds	r24, 0x0065
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	11 f0       	breq	.+4      	; 0x118c <eMBEnable+0xc>
    1188:	86 e0       	ldi	r24, 0x06	; 6
    118a:	08 95       	ret
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
    118c:	e0 91 c4 00 	lds	r30, 0x00C4
    1190:	f0 91 c5 00 	lds	r31, 0x00C5
    1194:	09 95       	icall
        eMBState = STATE_ENABLED;
    1196:	10 92 65 00 	sts	0x0065, r1
    119a:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_EILLSTATE;
    }
    return eStatus;
}
    119c:	08 95       	ret

0000119e <eMBDisable>:
eMBErrorCode
eMBDisable( void )
{
    eMBErrorCode    eStatus;

    if( eMBState == STATE_ENABLED )
    119e:	80 91 65 00 	lds	r24, 0x0065
    11a2:	88 23       	and	r24, r24
    11a4:	51 f4       	brne	.+20     	; 0x11ba <eMBDisable+0x1c>
    {
        pvMBFrameStopCur(  );
    11a6:	e0 91 c6 00 	lds	r30, 0x00C6
    11aa:	f0 91 c7 00 	lds	r31, 0x00C7
    11ae:	09 95       	icall
        eMBState = STATE_DISABLED;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	80 93 65 00 	sts	0x0065, r24
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	08 95       	ret
        eStatus = MB_ENOERR;
    }
    else if( eMBState == STATE_DISABLED )
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	11 f0       	breq	.+4      	; 0x11c2 <eMBDisable+0x24>
    11be:	86 e0       	ldi	r24, 0x06	; 6
    11c0:	08 95       	ret
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_EILLSTATE;
    }
    return eStatus;
}
    11c4:	08 95       	ret

000011c6 <eMBPoll>:

eMBErrorCode
eMBPoll( void )
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	0f 92       	push	r0
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
    11d0:	80 91 65 00 	lds	r24, 0x0065
    11d4:	88 23       	and	r24, r24
    11d6:	11 f0       	breq	.+4      	; 0x11dc <eMBPoll+0x16>
    11d8:	86 e0       	ldi	r24, 0x06	; 6
    11da:	7c c0       	rjmp	.+248    	; 0x12d4 <eMBPoll+0x10e>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
    11dc:	ce 01       	movw	r24, r28
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <xMBPortEventGet>
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	09 f0       	breq	.+2      	; 0x11ea <eMBPoll+0x24>
    11e8:	74 c0       	rjmp	.+232    	; 0x12d2 <eMBPoll+0x10c>
    {
        switch ( eEvent )
    11ea:	99 81       	ldd	r25, Y+1	; 0x01
    11ec:	91 30       	cpi	r25, 0x01	; 1
    11ee:	21 f0       	breq	.+8      	; 0x11f8 <eMBPoll+0x32>
    11f0:	92 30       	cpi	r25, 0x02	; 2
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <eMBPoll+0x30>
    11f4:	6e c0       	rjmp	.+220    	; 0x12d2 <eMBPoll+0x10c>
    11f6:	1b c0       	rjmp	.+54     	; 0x122e <eMBPoll+0x68>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
    11f8:	e0 91 c8 00 	lds	r30, 0x00C8
    11fc:	f0 91 c9 00 	lds	r31, 0x00C9
    1200:	8d eb       	ldi	r24, 0xBD	; 189
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	6e eb       	ldi	r22, 0xBE	; 190
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	4a eb       	ldi	r20, 0xBA	; 186
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	09 95       	icall
            if( eStatus == MB_ENOERR )
    120e:	88 23       	and	r24, r24
    1210:	09 f0       	breq	.+2      	; 0x1214 <eMBPoll+0x4e>
    1212:	5f c0       	rjmp	.+190    	; 0x12d2 <eMBPoll+0x10c>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
    1214:	90 91 bd 00 	lds	r25, 0x00BD
    1218:	80 91 c0 00 	lds	r24, 0x00C0
    121c:	98 17       	cp	r25, r24
    121e:	19 f0       	breq	.+6      	; 0x1226 <eMBPoll+0x60>
    1220:	99 23       	and	r25, r25
    1222:	09 f0       	breq	.+2      	; 0x1226 <eMBPoll+0x60>
    1224:	56 c0       	rjmp	.+172    	; 0x12d2 <eMBPoll+0x10c>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
    1226:	82 e0       	ldi	r24, 0x02	; 2
    1228:	0e 94 ca 09 	call	0x1394	; 0x1394 <xMBPortEventPost>
    122c:	52 c0       	rjmp	.+164    	; 0x12d2 <eMBPoll+0x10c>
                }
            }
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
    122e:	a0 91 be 00 	lds	r26, 0x00BE
    1232:	b0 91 bf 00 	lds	r27, 0x00BF
    1236:	3c 91       	ld	r19, X
    1238:	30 93 bc 00 	sts	0x00BC, r19
            eException = MB_EX_ILLEGAL_FUNCTION;
    123c:	80 93 b9 00 	sts	0x00B9, r24
    1240:	e6 e6       	ldi	r30, 0x66	; 102
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
    1248:	20 81       	ld	r18, Z
    124a:	22 23       	and	r18, r18
    124c:	c1 f0       	breq	.+48     	; 0x127e <eMBPoll+0xb8>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
    124e:	23 17       	cp	r18, r19
    1250:	89 f4       	brne	.+34     	; 0x1274 <eMBPoll+0xae>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
    1252:	fc 01       	movw	r30, r24
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	e8 0f       	add	r30, r24
    125a:	f9 1f       	adc	r31, r25
    125c:	ea 59       	subi	r30, 0x9A	; 154
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	01 80       	ldd	r0, Z+1	; 0x01
    1262:	f2 81       	ldd	r31, Z+2	; 0x02
    1264:	e0 2d       	mov	r30, r0
    1266:	cd 01       	movw	r24, r26
    1268:	6a eb       	ldi	r22, 0xBA	; 186
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	09 95       	icall
    126e:	80 93 b9 00 	sts	0x00B9, r24
    1272:	05 c0       	rjmp	.+10     	; 0x127e <eMBPoll+0xb8>
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
    1274:	01 96       	adiw	r24, 0x01	; 1
    1276:	33 96       	adiw	r30, 0x03	; 3
    1278:	80 31       	cpi	r24, 0x10	; 16
    127a:	91 05       	cpc	r25, r1
    127c:	29 f7       	brne	.-54     	; 0x1248 <eMBPoll+0x82>
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
    127e:	80 91 bd 00 	lds	r24, 0x00BD
    1282:	88 23       	and	r24, r24
    1284:	31 f1       	breq	.+76     	; 0x12d2 <eMBPoll+0x10c>
            {
                if( eException != MB_EX_NONE )
    1286:	90 91 b9 00 	lds	r25, 0x00B9
    128a:	99 23       	and	r25, r25
    128c:	99 f0       	breq	.+38     	; 0x12b4 <eMBPoll+0xee>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
    128e:	e0 91 be 00 	lds	r30, 0x00BE
    1292:	f0 91 bf 00 	lds	r31, 0x00BF
    1296:	80 91 bc 00 	lds	r24, 0x00BC
    129a:	80 68       	ori	r24, 0x80	; 128
    129c:	80 83       	st	Z, r24
                    ucMBFrame[usLength++] = eException;
    129e:	e0 91 be 00 	lds	r30, 0x00BE
    12a2:	f0 91 bf 00 	lds	r31, 0x00BF
    12a6:	91 83       	std	Z+1, r25	; 0x01
    12a8:	82 e0       	ldi	r24, 0x02	; 2
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	90 93 bb 00 	sts	0x00BB, r25
    12b0:	80 93 ba 00 	sts	0x00BA, r24
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
    12b4:	60 91 be 00 	lds	r22, 0x00BE
    12b8:	70 91 bf 00 	lds	r23, 0x00BF
    12bc:	40 91 ba 00 	lds	r20, 0x00BA
    12c0:	50 91 bb 00 	lds	r21, 0x00BB
    12c4:	e0 91 c2 00 	lds	r30, 0x00C2
    12c8:	f0 91 c3 00 	lds	r31, 0x00C3
    12cc:	80 91 c0 00 	lds	r24, 0x00C0
    12d0:	09 95       	icall
    12d2:	80 e0       	ldi	r24, 0x00	; 0
        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
}
    12d4:	0f 90       	pop	r0
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    12dc:	ef 92       	push	r14
    12de:	0f 93       	push	r16
    12e0:	1f 93       	push	r17
    12e2:	98 2f       	mov	r25, r24
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
    12e4:	86 2f       	mov	r24, r22
    12e6:	81 50       	subi	r24, 0x01	; 1
    12e8:	87 3f       	cpi	r24, 0xF7	; 247
    12ea:	08 f0       	brcs	.+2      	; 0x12ee <eMBInit+0x12>
    12ec:	49 c0       	rjmp	.+146    	; 0x1380 <eMBInit+0xa4>
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
    12ee:	60 93 c0 00 	sts	0x00C0, r22

        switch ( eMode )
    12f2:	99 23       	and	r25, r25
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <eMBInit+0x1c>
    12f6:	44 c0       	rjmp	.+136    	; 0x1380 <eMBInit+0xa4>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
    12f8:	81 e5       	ldi	r24, 0x51	; 81
    12fa:	9c e0       	ldi	r25, 0x0C	; 12
    12fc:	90 93 c5 00 	sts	0x00C5, r25
    1300:	80 93 c4 00 	sts	0x00C4, r24
            pvMBFrameStopCur = eMBRTUStop;
    1304:	84 ec       	ldi	r24, 0xC4	; 196
    1306:	9b e0       	ldi	r25, 0x0B	; 11
    1308:	90 93 c7 00 	sts	0x00C7, r25
    130c:	80 93 c6 00 	sts	0x00C6, r24
            peMBFrameSendCur = eMBRTUSend;
    1310:	8c e5       	ldi	r24, 0x5C	; 92
    1312:	9c e0       	ldi	r25, 0x0C	; 12
    1314:	90 93 c3 00 	sts	0x00C3, r25
    1318:	80 93 c2 00 	sts	0x00C2, r24
            peMBFrameReceiveCur = eMBRTUReceive;
    131c:	89 ea       	ldi	r24, 0xA9	; 169
    131e:	9c e0       	ldi	r25, 0x0C	; 12
    1320:	90 93 c9 00 	sts	0x00C9, r25
    1324:	80 93 c8 00 	sts	0x00C8, r24
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
    1328:	10 92 cb 00 	sts	0x00CB, r1
    132c:	10 92 ca 00 	sts	0x00CA, r1
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
    1330:	88 e0       	ldi	r24, 0x08	; 8
    1332:	9c e0       	ldi	r25, 0x0C	; 12
    1334:	90 93 ea 01 	sts	0x01EA, r25
    1338:	80 93 e9 01 	sts	0x01E9, r24
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
    133c:	8d ec       	ldi	r24, 0xCD	; 205
    133e:	9b e0       	ldi	r25, 0x0B	; 11
    1340:	90 93 e6 01 	sts	0x01E6, r25
    1344:	80 93 e5 01 	sts	0x01E5, r24
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
    1348:	8d ea       	ldi	r24, 0xAD	; 173
    134a:	9b e0       	ldi	r25, 0x0B	; 11
    134c:	90 93 e8 01 	sts	0x01E8, r25
    1350:	80 93 e7 01 	sts	0x01E7, r24

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
    1354:	86 2f       	mov	r24, r22
    1356:	64 2f       	mov	r22, r20
    1358:	a9 01       	movw	r20, r18
    135a:	98 01       	movw	r18, r16
    135c:	0e 2d       	mov	r16, r14
    135e:	0e 94 de 0c 	call	0x19bc	; 0x19bc <eMBRTUInit>
    1362:	18 2f       	mov	r17, r24
#endif
        default:
            eStatus = MB_EINVAL;
        }

        if( eStatus == MB_ENOERR )
    1364:	88 23       	and	r24, r24
    1366:	69 f4       	brne	.+26     	; 0x1382 <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
    1368:	0e 94 c6 09 	call	0x138c	; 0x138c <xMBPortEventInit>
    136c:	88 23       	and	r24, r24
    136e:	11 f4       	brne	.+4      	; 0x1374 <eMBInit+0x98>
    1370:	13 e0       	ldi	r17, 0x03	; 3
    1372:	07 c0       	rjmp	.+14     	; 0x1382 <eMBInit+0xa6>
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
    1374:	10 92 c1 00 	sts	0x00C1, r1
                eMBState = STATE_DISABLED;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	80 93 65 00 	sts	0x0065, r24
    137e:	01 c0       	rjmp	.+2      	; 0x1382 <eMBInit+0xa6>
    1380:	12 e0       	ldi	r17, 0x02	; 2
            }
        }
    }
    return eStatus;
}
    1382:	81 2f       	mov	r24, r17
    1384:	1f 91       	pop	r17
    1386:	0f 91       	pop	r16
    1388:	ef 90       	pop	r14
    138a:	08 95       	ret

0000138c <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
    138c:	10 92 cd 00 	sts	0x00CD, r1
    return TRUE;
}
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	08 95       	ret

00001394 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	90 93 cd 00 	sts	0x00CD, r25
    eQueuedEvent = eEvent;
    139a:	80 93 cc 00 	sts	0x00CC, r24
    return TRUE;
}
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	08 95       	ret

000013a2 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    13a2:	fc 01       	movw	r30, r24
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
    13a4:	80 91 cd 00 	lds	r24, 0x00CD
    13a8:	88 23       	and	r24, r24
    13aa:	31 f0       	breq	.+12     	; 0x13b8 <xMBPortEventGet+0x16>
    {
        *eEvent = eQueuedEvent;
    13ac:	80 91 cc 00 	lds	r24, 0x00CC
    13b0:	80 83       	st	Z, r24
        xEventInQueue = FALSE;
    13b2:	10 92 cd 00 	sts	0x00CD, r1
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    } else {
        /* We can't do anything with errors from the pooling module. */
        //(void)xMBPortTCPPool();
    }
    return xEventHappened;
}
    13b8:	08 95       	ret

000013ba <xMBPortEventRead>:

BOOL
xMBPortEventRead( eMBEventType * eEvent )
{
    13ba:	fc 01       	movw	r30, r24
	if( xEventInQueue ) {
    13bc:	80 91 cd 00 	lds	r24, 0x00CD
    13c0:	88 23       	and	r24, r24
    13c2:	21 f0       	breq	.+8      	; 0x13cc <xMBPortEventRead+0x12>
		*eEvent = eQueuedEvent;
    13c4:	80 91 cc 00 	lds	r24, 0x00CC
    13c8:	80 83       	st	Z, r24
    13ca:	81 e0       	ldi	r24, 0x01	; 1
		return TRUE;
    }
	return FALSE;
}
    13cc:	08 95       	ret

000013ce <vMBPortSerialEnable>:
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
#ifdef RTS_ENABLE
	UCSRB |= _BV( TXEN ) | _BV(TXCIE);
#else
	UCSRB |= _BV( TXEN );
    13ce:	53 9a       	sbi	0x0a, 3	; 10
#endif

	if( xRxEnable ) {
    13d0:	88 23       	and	r24, r24
    13d2:	19 f0       	breq	.+6      	; 0x13da <vMBPortSerialEnable+0xc>
		UCSRB |= _BV( RXEN ) | _BV( RXCIE );
    13d4:	8a b1       	in	r24, 0x0a	; 10
    13d6:	80 69       	ori	r24, 0x90	; 144
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <vMBPortSerialEnable+0x10>
	} else {
		UCSRB &= ~( _BV( RXEN ) | _BV( RXCIE ) );
    13da:	8a b1       	in	r24, 0x0a	; 10
    13dc:	8f 76       	andi	r24, 0x6F	; 111
    13de:	8a b9       	out	0x0a, r24	; 10
	}

	if( xTxEnable ) {
    13e0:	66 23       	and	r22, r22
    13e2:	21 f0       	breq	.+8      	; 0x13ec <vMBPortSerialEnable+0x1e>
		UCSRB |= _BV( TXEN ) | _BV( UDRE );
    13e4:	8a b1       	in	r24, 0x0a	; 10
    13e6:	88 62       	ori	r24, 0x28	; 40
    13e8:	8a b9       	out	0x0a, r24	; 10
    13ea:	08 95       	ret
#ifdef RTS_ENABLE
		RTS_HIGH;
#endif
	} else {
		UCSRB &= ~( _BV( UDRE ) );
    13ec:	55 98       	cbi	0x0a, 5	; 10
    13ee:	08 95       	ret

000013f0 <xMBPortSerialInit>:
	}
}

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
    13f0:	cf 92       	push	r12
    13f2:	df 92       	push	r13
    13f4:	ef 92       	push	r14
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	6a 01       	movw	r12, r20
    13fe:	7b 01       	movw	r14, r22
    1400:	12 2f       	mov	r17, r18
	UCHAR ucUCSRC = 0;
	uint16_t uiBaudRate = 0;

	// F_CPU: 16.00 MHz
	switch( ulBaudRate ) {
    1402:	40 30       	cpi	r20, 0x00	; 0
    1404:	86 e9       	ldi	r24, 0x96	; 150
    1406:	58 07       	cpc	r21, r24
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	68 07       	cpc	r22, r24
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	78 07       	cpc	r23, r24
    1410:	09 f4       	brne	.+2      	; 0x1414 <xMBPortSerialInit+0x24>
    1412:	9f c0       	rjmp	.+318    	; 0x1552 <xMBPortSerialInit+0x162>
    1414:	41 30       	cpi	r20, 0x01	; 1
    1416:	86 e9       	ldi	r24, 0x96	; 150
    1418:	58 07       	cpc	r21, r24
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	68 07       	cpc	r22, r24
    141e:	80 e0       	ldi	r24, 0x00	; 0
    1420:	78 07       	cpc	r23, r24
    1422:	08 f0       	brcs	.+2      	; 0x1426 <xMBPortSerialInit+0x36>
    1424:	40 c0       	rjmp	.+128    	; 0x14a6 <xMBPortSerialInit+0xb6>
    1426:	40 38       	cpi	r20, 0x80	; 128
    1428:	85 e2       	ldi	r24, 0x25	; 37
    142a:	58 07       	cpc	r21, r24
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	68 07       	cpc	r22, r24
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	78 07       	cpc	r23, r24
    1434:	09 f4       	brne	.+2      	; 0x1438 <xMBPortSerialInit+0x48>
    1436:	81 c0       	rjmp	.+258    	; 0x153a <xMBPortSerialInit+0x14a>
    1438:	41 38       	cpi	r20, 0x81	; 129
    143a:	85 e2       	ldi	r24, 0x25	; 37
    143c:	58 07       	cpc	r21, r24
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	68 07       	cpc	r22, r24
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	78 07       	cpc	r23, r24
    1446:	98 f4       	brcc	.+38     	; 0x146e <xMBPortSerialInit+0x7e>
    1448:	40 36       	cpi	r20, 0x60	; 96
    144a:	89 e0       	ldi	r24, 0x09	; 9
    144c:	58 07       	cpc	r21, r24
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	68 07       	cpc	r22, r24
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	78 07       	cpc	r23, r24
    1456:	09 f4       	brne	.+2      	; 0x145a <xMBPortSerialInit+0x6a>
    1458:	6d c0       	rjmp	.+218    	; 0x1534 <xMBPortSerialInit+0x144>
    145a:	40 3c       	cpi	r20, 0xC0	; 192
    145c:	82 e1       	ldi	r24, 0x12	; 18
    145e:	58 07       	cpc	r21, r24
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	68 07       	cpc	r22, r24
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	78 07       	cpc	r23, r24
    1468:	09 f0       	breq	.+2      	; 0x146c <xMBPortSerialInit+0x7c>
    146a:	85 c0       	rjmp	.+266    	; 0x1576 <xMBPortSerialInit+0x186>
    146c:	60 c0       	rjmp	.+192    	; 0x152e <xMBPortSerialInit+0x13e>
    146e:	40 30       	cpi	r20, 0x00	; 0
    1470:	8b e4       	ldi	r24, 0x4B	; 75
    1472:	58 07       	cpc	r21, r24
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	68 07       	cpc	r22, r24
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	78 07       	cpc	r23, r24
    147c:	09 f4       	brne	.+2      	; 0x1480 <xMBPortSerialInit+0x90>
    147e:	63 c0       	rjmp	.+198    	; 0x1546 <xMBPortSerialInit+0x156>
    1480:	40 38       	cpi	r20, 0x80	; 128
    1482:	80 e7       	ldi	r24, 0x70	; 112
    1484:	58 07       	cpc	r21, r24
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	68 07       	cpc	r22, r24
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	78 07       	cpc	r23, r24
    148e:	09 f4       	brne	.+2      	; 0x1492 <xMBPortSerialInit+0xa2>
    1490:	5d c0       	rjmp	.+186    	; 0x154c <xMBPortSerialInit+0x15c>
    1492:	40 34       	cpi	r20, 0x40	; 64
    1494:	88 e3       	ldi	r24, 0x38	; 56
    1496:	58 07       	cpc	r21, r24
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	68 07       	cpc	r22, r24
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	78 07       	cpc	r23, r24
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <xMBPortSerialInit+0xb4>
    14a2:	69 c0       	rjmp	.+210    	; 0x1576 <xMBPortSerialInit+0x186>
    14a4:	4d c0       	rjmp	.+154    	; 0x1540 <xMBPortSerialInit+0x150>
    14a6:	40 30       	cpi	r20, 0x00	; 0
    14a8:	84 e8       	ldi	r24, 0x84	; 132
    14aa:	58 07       	cpc	r21, r24
    14ac:	83 e0       	ldi	r24, 0x03	; 3
    14ae:	68 07       	cpc	r22, r24
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	78 07       	cpc	r23, r24
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <xMBPortSerialInit+0xc8>
    14b6:	6a c0       	rjmp	.+212    	; 0x158c <xMBPortSerialInit+0x19c>
    14b8:	41 30       	cpi	r20, 0x01	; 1
    14ba:	84 e8       	ldi	r24, 0x84	; 132
    14bc:	58 07       	cpc	r21, r24
    14be:	83 e0       	ldi	r24, 0x03	; 3
    14c0:	68 07       	cpc	r22, r24
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	78 07       	cpc	r23, r24
    14c6:	d0 f4       	brcc	.+52     	; 0x14fc <xMBPortSerialInit+0x10c>
    14c8:	40 30       	cpi	r20, 0x00	; 0
    14ca:	8c e2       	ldi	r24, 0x2C	; 44
    14cc:	58 07       	cpc	r21, r24
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	68 07       	cpc	r22, r24
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	78 07       	cpc	r23, r24
    14d6:	09 f4       	brne	.+2      	; 0x14da <xMBPortSerialInit+0xea>
    14d8:	42 c0       	rjmp	.+132    	; 0x155e <xMBPortSerialInit+0x16e>
    14da:	40 30       	cpi	r20, 0x00	; 0
    14dc:	82 ec       	ldi	r24, 0xC2	; 194
    14de:	58 07       	cpc	r21, r24
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	68 07       	cpc	r22, r24
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	78 07       	cpc	r23, r24
    14e8:	e9 f1       	breq	.+122    	; 0x1564 <xMBPortSerialInit+0x174>
    14ea:	40 30       	cpi	r20, 0x00	; 0
    14ec:	81 ee       	ldi	r24, 0xE1	; 225
    14ee:	58 07       	cpc	r21, r24
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	68 07       	cpc	r22, r24
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	78 07       	cpc	r23, r24
    14f8:	f1 f5       	brne	.+124    	; 0x1576 <xMBPortSerialInit+0x186>
    14fa:	2e c0       	rjmp	.+92     	; 0x1558 <xMBPortSerialInit+0x168>
    14fc:	40 32       	cpi	r20, 0x20	; 32
    14fe:	81 ea       	ldi	r24, 0xA1	; 161
    1500:	58 07       	cpc	r21, r24
    1502:	87 e0       	ldi	r24, 0x07	; 7
    1504:	68 07       	cpc	r22, r24
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	78 07       	cpc	r23, r24
    150a:	79 f1       	breq	.+94     	; 0x156a <xMBPortSerialInit+0x17a>
    150c:	40 34       	cpi	r20, 0x40	; 64
    150e:	82 e4       	ldi	r24, 0x42	; 66
    1510:	58 07       	cpc	r21, r24
    1512:	8f e0       	ldi	r24, 0x0F	; 15
    1514:	68 07       	cpc	r22, r24
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	78 07       	cpc	r23, r24
    151a:	51 f1       	breq	.+84     	; 0x1570 <xMBPortSerialInit+0x180>
    151c:	40 39       	cpi	r20, 0x90	; 144
    151e:	80 ed       	ldi	r24, 0xD0	; 208
    1520:	58 07       	cpc	r21, r24
    1522:	83 e0       	ldi	r24, 0x03	; 3
    1524:	68 07       	cpc	r22, r24
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	78 07       	cpc	r23, r24
    152a:	29 f5       	brne	.+74     	; 0x1576 <xMBPortSerialInit+0x186>
    152c:	2f c0       	rjmp	.+94     	; 0x158c <xMBPortSerialInit+0x19c>
    152e:	2f ec       	ldi	r18, 0xCF	; 207
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	2e c0       	rjmp	.+92     	; 0x1590 <xMBPortSerialInit+0x1a0>
    1534:	20 ea       	ldi	r18, 0xA0	; 160
    1536:	31 e0       	ldi	r19, 0x01	; 1
    1538:	2b c0       	rjmp	.+86     	; 0x1590 <xMBPortSerialInit+0x1a0>
    153a:	27 e6       	ldi	r18, 0x67	; 103
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	28 c0       	rjmp	.+80     	; 0x1590 <xMBPortSerialInit+0x1a0>
	case 2400: uiBaudRate = 416; break;
	case 4800: uiBaudRate = 207; break;
	case 9600: uiBaudRate = 103; break;
    1540:	24 e4       	ldi	r18, 0x44	; 68
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	25 c0       	rjmp	.+74     	; 0x1590 <xMBPortSerialInit+0x1a0>
	case 14400: uiBaudRate = 68; break;
    1546:	23 e3       	ldi	r18, 0x33	; 51
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	22 c0       	rjmp	.+68     	; 0x1590 <xMBPortSerialInit+0x1a0>
	case 19200: uiBaudRate = 51; break;
    154c:	22 e2       	ldi	r18, 0x22	; 34
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	1f c0       	rjmp	.+62     	; 0x1590 <xMBPortSerialInit+0x1a0>
	case 28800: uiBaudRate = 34; break;
    1552:	29 e1       	ldi	r18, 0x19	; 25
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	1c c0       	rjmp	.+56     	; 0x1590 <xMBPortSerialInit+0x1a0>
	case 38400: uiBaudRate = 25; break;
    1558:	20 e1       	ldi	r18, 0x10	; 16
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	19 c0       	rjmp	.+50     	; 0x1590 <xMBPortSerialInit+0x1a0>
	case 57600: uiBaudRate = 16; break;
    155e:	2c e0       	ldi	r18, 0x0C	; 12
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	16 c0       	rjmp	.+44     	; 0x1590 <xMBPortSerialInit+0x1a0>
	case 76800: uiBaudRate = 12; break;
    1564:	28 e0       	ldi	r18, 0x08	; 8
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	13 c0       	rjmp	.+38     	; 0x1590 <xMBPortSerialInit+0x1a0>
	case 115200: uiBaudRate = 8; break;
    156a:	21 e0       	ldi	r18, 0x01	; 1
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	10 c0       	rjmp	.+32     	; 0x1590 <xMBPortSerialInit+0x1a0>
	case 230400: uiBaudRate = 3; break;
	case 250000: uiBaudRate = 3; break;
	case 500000: uiBaudRate = 1; break;
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	0d c0       	rjmp	.+26     	; 0x1590 <xMBPortSerialInit+0x1a0>
	case 1000000: uiBaudRate = 0; break;
	default: uiBaudRate = UART_BAUD_CALC( ulBaudRate, F_CPU );
    1576:	60 e4       	ldi	r22, 0x40	; 64
    1578:	72 e4       	ldi	r23, 0x42	; 66
    157a:	8f e0       	ldi	r24, 0x0F	; 15
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a7 01       	movw	r20, r14
    1580:	96 01       	movw	r18, r12
    1582:	0e 94 b7 10 	call	0x216e	; 0x216e <__udivmodsi4>
    1586:	21 50       	subi	r18, 0x01	; 1
    1588:	30 40       	sbci	r19, 0x00	; 0
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <xMBPortSerialInit+0x1a0>
    158c:	23 e0       	ldi	r18, 0x03	; 3
    158e:	30 e0       	ldi	r19, 0x00	; 0
	}

	UBRRH = uiBaudRate>>8;
    1590:	30 bd       	out	0x20, r19	; 32
	UBRRL = uiBaudRate;
    1592:	29 b9       	out	0x09, r18	; 9

	switch ( eParity ) {
    1594:	01 30       	cpi	r16, 0x01	; 1
    1596:	31 f0       	breq	.+12     	; 0x15a4 <xMBPortSerialInit+0x1b4>
    1598:	02 30       	cpi	r16, 0x02	; 2
    159a:	11 f4       	brne	.+4      	; 0x15a0 <xMBPortSerialInit+0x1b0>
    159c:	80 e2       	ldi	r24, 0x20	; 32
    159e:	03 c0       	rjmp	.+6      	; 0x15a6 <xMBPortSerialInit+0x1b6>
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <xMBPortSerialInit+0x1b6>
    15a4:	80 e3       	ldi	r24, 0x30	; 48
	 break;
	case MB_PAR_NONE:
	 break;
	}

	switch ( ucDataBits ) {
    15a6:	17 30       	cpi	r17, 0x07	; 7
    15a8:	21 f0       	breq	.+8      	; 0x15b2 <xMBPortSerialInit+0x1c2>
    15aa:	18 30       	cpi	r17, 0x08	; 8
    15ac:	19 f4       	brne	.+6      	; 0x15b4 <xMBPortSerialInit+0x1c4>
	case 8:
		ucUCSRC |= _BV( USBS_0 ) | _BV( UCSZ_1 ) | _BV( UCSZ_0 );
    15ae:	8e 60       	ori	r24, 0x0E	; 14
    15b0:	01 c0       	rjmp	.+2      	; 0x15b4 <xMBPortSerialInit+0x1c4>
	 break;
	case 7:
		ucUCSRC |= _BV( UCSZ_1 );
    15b2:	84 60       	ori	r24, 0x04	; 4
#elif defined (__AVR_ATmega8__)
	UCSRC = _BV( URSEL ) | ucUCSRC;
#elif defined (__AVR_ATmega16__)
	UCSRC = _BV( URSEL ) | ucUCSRC;
#elif defined (__AVR_ATmega32__)
	UCSRC = _BV( URSEL ) | ucUCSRC;
    15b4:	80 68       	ori	r24, 0x80	; 128
    15b6:	80 bd       	out	0x20, r24	; 32
#elif defined (__AVR_ATmega128__)
	UCSRC = ucUCSRC;
#endif

	vMBPortSerialEnable( FALSE, FALSE );
    15b8:	80 e0       	ldi	r24, 0x00	; 0
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vMBPortSerialEnable>

#ifdef RTS_ENABLE
	RTS_INIT;
#endif
	return TRUE;
}
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	1f 91       	pop	r17
    15c4:	0f 91       	pop	r16
    15c6:	ff 90       	pop	r15
    15c8:	ef 90       	pop	r14
    15ca:	df 90       	pop	r13
    15cc:	cf 90       	pop	r12
    15ce:	08 95       	ret

000015d0 <xMBPortSerialPutByte>:
xMBPortSerialPutByte( CHAR ucByte )
{
#ifdef RTS_ENABLE
	RTS_HIGH;
#endif
	UDR = ucByte;
    15d0:	8c b9       	out	0x0c, r24	; 12
	return TRUE;
}
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	08 95       	ret

000015d6 <xMBPortSerialGetByte>:

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
    15d6:	fc 01       	movw	r30, r24

	*pucByte = UDR;
    15d8:	8c b1       	in	r24, 0x0c	; 12
    15da:	80 83       	st	Z, r24
	return TRUE;
}
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	08 95       	ret

000015e0 <__vector_15>:

ISR( SIG_UART_TRANS )
{
    15e0:	1f 92       	push	r1
    15e2:	0f 92       	push	r0
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	0f 92       	push	r0
    15e8:	11 24       	eor	r1, r1
#ifdef RTS_ENABLE
	RTS_LOW;
#endif
}
    15ea:	0f 90       	pop	r0
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	0f 90       	pop	r0
    15f0:	1f 90       	pop	r1
    15f2:	18 95       	reti

000015f4 <__vector_13>:

ISR( SIG_USART_RECV )
{
    15f4:	1f 92       	push	r1
    15f6:	0f 92       	push	r0
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	0f 92       	push	r0
    15fc:	11 24       	eor	r1, r1
    15fe:	2f 93       	push	r18
    1600:	3f 93       	push	r19
    1602:	4f 93       	push	r20
    1604:	5f 93       	push	r21
    1606:	6f 93       	push	r22
    1608:	7f 93       	push	r23
    160a:	8f 93       	push	r24
    160c:	9f 93       	push	r25
    160e:	af 93       	push	r26
    1610:	bf 93       	push	r27
    1612:	ef 93       	push	r30
    1614:	ff 93       	push	r31
	pxMBFrameCBByteReceived(  );
    1616:	e0 91 e9 01 	lds	r30, 0x01E9
    161a:	f0 91 ea 01 	lds	r31, 0x01EA
    161e:	09 95       	icall

//	uiModbusTimeOutCounter = 200;
}
    1620:	ff 91       	pop	r31
    1622:	ef 91       	pop	r30
    1624:	bf 91       	pop	r27
    1626:	af 91       	pop	r26
    1628:	9f 91       	pop	r25
    162a:	8f 91       	pop	r24
    162c:	7f 91       	pop	r23
    162e:	6f 91       	pop	r22
    1630:	5f 91       	pop	r21
    1632:	4f 91       	pop	r20
    1634:	3f 91       	pop	r19
    1636:	2f 91       	pop	r18
    1638:	0f 90       	pop	r0
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	0f 90       	pop	r0
    163e:	1f 90       	pop	r1
    1640:	18 95       	reti

00001642 <__vector_14>:

ISR( SIG_USART_DATA )
{
    1642:	1f 92       	push	r1
    1644:	0f 92       	push	r0
    1646:	0f b6       	in	r0, 0x3f	; 63
    1648:	0f 92       	push	r0
    164a:	11 24       	eor	r1, r1
    164c:	2f 93       	push	r18
    164e:	3f 93       	push	r19
    1650:	4f 93       	push	r20
    1652:	5f 93       	push	r21
    1654:	6f 93       	push	r22
    1656:	7f 93       	push	r23
    1658:	8f 93       	push	r24
    165a:	9f 93       	push	r25
    165c:	af 93       	push	r26
    165e:	bf 93       	push	r27
    1660:	ef 93       	push	r30
    1662:	ff 93       	push	r31
	pxMBFrameCBTransmitterEmpty(  );
    1664:	e0 91 e5 01 	lds	r30, 0x01E5
    1668:	f0 91 e6 01 	lds	r31, 0x01E6
    166c:	09 95       	icall
}
    166e:	ff 91       	pop	r31
    1670:	ef 91       	pop	r30
    1672:	bf 91       	pop	r27
    1674:	af 91       	pop	r26
    1676:	9f 91       	pop	r25
    1678:	8f 91       	pop	r24
    167a:	7f 91       	pop	r23
    167c:	6f 91       	pop	r22
    167e:	5f 91       	pop	r21
    1680:	4f 91       	pop	r20
    1682:	3f 91       	pop	r19
    1684:	2f 91       	pop	r18
    1686:	0f 90       	pop	r0
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	0f 90       	pop	r0
    168c:	1f 90       	pop	r1
    168e:	18 95       	reti

00001690 <vMBPortTimersEnable>:

#ifdef __AVR_ATmega644__
	TCCR2B = (1<<CS21) | (1<<CS20);
	TIMSK2 = (1<<TOIE2);
#elif __AVR_ATmega32__
	TCCR2 = (1<<CS21) | (1<<CS20);
    1690:	83 e0       	ldi	r24, 0x03	; 3
    1692:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<TOIE2);
    1694:	89 b7       	in	r24, 0x39	; 57
    1696:	80 64       	ori	r24, 0x40	; 64
    1698:	89 bf       	out	0x39, r24	; 57
#elif __AVR_ATmega16__
	TCCR2 = (1<<CS21) | (1<<CS20);
	TIMSK |= (1<<TOIE2);
#endif
	TCNT2 = 5;
    169a:	85 e0       	ldi	r24, 0x05	; 5
    169c:	84 bd       	out	0x24, r24	; 36
}
    169e:	08 95       	ret

000016a0 <vMBPortTimersDisable>:
#ifdef __AVR_ATmega644__
	TCCR2B &= ~(1<<CS21) | (1<<CS20);
	TIMSK2 &= ~(1<<TOIE2);
	TIFR2 |= _BV( OCF2A );
#elif __AVR_ATmega32__
	TCCR2 &= ~( (1<<CS21) | (1<<CS20) );
    16a0:	85 b5       	in	r24, 0x25	; 37
    16a2:	8c 7f       	andi	r24, 0xFC	; 252
    16a4:	85 bd       	out	0x25, r24	; 37
	TIMSK &= ~(1<<TOIE2);
    16a6:	89 b7       	in	r24, 0x39	; 57
    16a8:	8f 7b       	andi	r24, 0xBF	; 191
    16aa:	89 bf       	out	0x39, r24	; 57
	TIFR |= _BV( OCF2 );
    16ac:	88 b7       	in	r24, 0x38	; 56
    16ae:	80 68       	ori	r24, 0x80	; 128
    16b0:	88 bf       	out	0x38, r24	; 56
#elif __AVR_ATmega16__
	TCCR2 &= ~( (1<<CS21) | (1<<CS20) );
	TIMSK &= ~(1<<TOIE2);
	TIFR |= _BV( OCF2 );
#endif
	TCNT2 = 0;
    16b2:	14 bc       	out	0x24, r1	; 36
}
    16b4:	08 95       	ret

000016b6 <xMBPortTimersInit>:

#ifdef __AVR_ATmega644__
	TCCR2B = 0;
	TIMSK2 = 0;
#elif __AVR_ATmega32__
	TCCR2 = 0;
    16b6:	15 bc       	out	0x25, r1	; 37
	TIMSK &= ~(1<<TOIE2);
    16b8:	89 b7       	in	r24, 0x39	; 57
    16ba:	8f 7b       	andi	r24, 0xBF	; 191
    16bc:	89 bf       	out	0x39, r24	; 57
#elif __AVR_ATmega16__
	TCCR2 = 0;
	TIMSK &= ~(1<<TOIE2);
#endif
	TCNT2 = 5;
    16be:	85 e0       	ldi	r24, 0x05	; 5
    16c0:	84 bd       	out	0x24, r24	; 36

    vMBPortTimersDisable(  );
    16c2:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <vMBPortTimersDisable>

    return TRUE;
}
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	08 95       	ret

000016ca <__vector_5>:
//{
//   ( void )pxMBPortCBTimerExpired(  );
//}

ISR( TIMER2_OVF_vect )
{
    16ca:	1f 92       	push	r1
    16cc:	0f 92       	push	r0
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	0f 92       	push	r0
    16d2:	11 24       	eor	r1, r1
    16d4:	2f 93       	push	r18
    16d6:	3f 93       	push	r19
    16d8:	4f 93       	push	r20
    16da:	5f 93       	push	r21
    16dc:	6f 93       	push	r22
    16de:	7f 93       	push	r23
    16e0:	8f 93       	push	r24
    16e2:	9f 93       	push	r25
    16e4:	af 93       	push	r26
    16e6:	bf 93       	push	r27
    16e8:	ef 93       	push	r30
    16ea:	ff 93       	push	r31
	TCNT2 = 5;
    16ec:	85 e0       	ldi	r24, 0x05	; 5
    16ee:	84 bd       	out	0x24, r24	; 36
	( void )pxMBPortCBTimerExpired(  );
    16f0:	e0 91 e7 01 	lds	r30, 0x01E7
    16f4:	f0 91 e8 01 	lds	r31, 0x01E8
    16f8:	09 95       	icall
}
    16fa:	ff 91       	pop	r31
    16fc:	ef 91       	pop	r30
    16fe:	bf 91       	pop	r27
    1700:	af 91       	pop	r26
    1702:	9f 91       	pop	r25
    1704:	8f 91       	pop	r24
    1706:	7f 91       	pop	r23
    1708:	6f 91       	pop	r22
    170a:	5f 91       	pop	r21
    170c:	4f 91       	pop	r20
    170e:	3f 91       	pop	r19
    1710:	2f 91       	pop	r18
    1712:	0f 90       	pop	r0
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	0f 90       	pop	r0
    1718:	1f 90       	pop	r1
    171a:	18 95       	reti

0000171c <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    171c:	dc 01       	movw	r26, r24
    171e:	3f ef       	ldi	r19, 0xFF	; 255
    1720:	2f ef       	ldi	r18, 0xFF	; 255
    1722:	11 c0       	rjmp	.+34     	; 0x1746 <usMBCRC16+0x2a>
    int iIndex;
	UCHAR ucCRCHi = 0xFF;
    UCHAR ucCRCLo = 0xFF;

	while( usLen-- ) {
		iIndex = ucCRCLo ^ *( pucFrame++ );
    1724:	8d 91       	ld	r24, X+

		UCHAR table_h = pgm_read_byte( &aucCRCHi[iIndex] );
    1726:	42 2f       	mov	r20, r18
    1728:	48 27       	eor	r20, r24
    172a:	50 e0       	ldi	r21, 0x00	; 0
    172c:	ca 01       	movw	r24, r20
    172e:	8c 5a       	subi	r24, 0xAC	; 172
    1730:	9f 4f       	sbci	r25, 0xFF	; 255
    1732:	fc 01       	movw	r30, r24
    1734:	24 91       	lpm	r18, Z+
		UCHAR table_l = pgm_read_byte( &aucCRCLo[iIndex] );
    1736:	4c 5a       	subi	r20, 0xAC	; 172
    1738:	5e 4f       	sbci	r21, 0xFE	; 254
    173a:	fa 01       	movw	r30, r20
    173c:	84 91       	lpm	r24, Z+
		
		ucCRCLo = ( UCHAR )( ucCRCHi ^ table_h );
    173e:	23 27       	eor	r18, r19
    1740:	61 50       	subi	r22, 0x01	; 1
    1742:	70 40       	sbci	r23, 0x00	; 0
    1744:	38 2f       	mov	r19, r24
{
    int iIndex;
	UCHAR ucCRCHi = 0xFF;
    UCHAR ucCRCLo = 0xFF;

	while( usLen-- ) {
    1746:	61 15       	cp	r22, r1
    1748:	71 05       	cpc	r23, r1
    174a:	61 f7       	brne	.-40     	; 0x1724 <usMBCRC16+0x8>
    174c:	93 2f       	mov	r25, r19
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	28 2b       	or	r18, r24
    1754:	39 2b       	or	r19, r25
		ucCRCLo = ( UCHAR )( ucCRCHi ^ table_h );
		ucCRCHi = table_l;
	}
	
	return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
}
    1756:	c9 01       	movw	r24, r18
    1758:	08 95       	ret

0000175a <xMBRTUTimerT35Expired>:
	return xNeedPoll;
}

BOOL
xMBRTUTimerT35Expired( void )
{
    175a:	1f 93       	push	r17
	BOOL			xNeedPoll = FALSE;

	switch ( eRcvState )
    175c:	80 91 cf 00 	lds	r24, 0x00CF
    1760:	88 23       	and	r24, r24
    1762:	21 f0       	breq	.+8      	; 0x176c <xMBRTUTimerT35Expired+0x12>
    1764:	82 30       	cpi	r24, 0x02	; 2
    1766:	21 f0       	breq	.+8      	; 0x1770 <xMBRTUTimerT35Expired+0x16>
    1768:	10 e0       	ldi	r17, 0x00	; 0
    176a:	06 c0       	rjmp	.+12     	; 0x1778 <xMBRTUTimerT35Expired+0x1e>
	{
		/* Timer t35 expired. Startup phase is finished. */
	case STATE_RX_INIT:
		xNeedPoll = xMBPortEventPost( EV_READY );
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	01 c0       	rjmp	.+2      	; 0x1772 <xMBRTUTimerT35Expired+0x18>
		break;

		/* A frame was received and t35 expired. Notify the listener that
		 * a new frame was received. */
	case STATE_RX_RCV:
		xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	0e 94 ca 09 	call	0x1394	; 0x1394 <xMBPortEventPost>
    1776:	18 2f       	mov	r17, r24
	default:
		assert( ( eRcvState == STATE_RX_INIT ) ||
				( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
	}

	vMBPortTimersDisable(  );
    1778:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <vMBPortTimersDisable>
	eRcvState = STATE_RX_IDLE;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	80 93 cf 00 	sts	0x00CF, r24

	return xNeedPoll;
}
    1782:	81 2f       	mov	r24, r17
    1784:	1f 91       	pop	r17
    1786:	08 95       	ret

00001788 <eMBRTUStop>:
}

void
eMBRTUStop( void )
{
	ENTER_CRITICAL_SECTION(  );
    1788:	f8 94       	cli
	vMBPortSerialEnable( FALSE, FALSE );
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vMBPortSerialEnable>
	vMBPortTimersDisable(  );
    1792:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <vMBPortTimersDisable>
	EXIT_CRITICAL_SECTION(  );
    1796:	78 94       	sei
}
    1798:	08 95       	ret

0000179a <xMBRTUTransmitFSM>:
	return xTaskNeedSwitch;
}

BOOL
xMBRTUTransmitFSM( void )
{
    179a:	1f 93       	push	r17
	BOOL			xNeedPoll = FALSE;

	assert( eRcvState == STATE_RX_IDLE );

	switch ( eSndState )
    179c:	80 91 ce 00 	lds	r24, 0x00CE
    17a0:	88 23       	and	r24, r24
    17a2:	19 f0       	breq	.+6      	; 0x17aa <xMBRTUTransmitFSM+0x10>
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	29 f4       	brne	.+10     	; 0x17b2 <xMBRTUTransmitFSM+0x18>
    17a8:	06 c0       	rjmp	.+12     	; 0x17b6 <xMBRTUTransmitFSM+0x1c>
	{
		/* We should not get a transmitter event if the transmitter is in
		 * idle state.  */
	case STATE_TX_IDLE:
		/* enable receiver/disable transmitter. */
		vMBPortSerialEnable( TRUE, FALSE );
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vMBPortSerialEnable>
    17b2:	10 e0       	ldi	r17, 0x00	; 0
    17b4:	2a c0       	rjmp	.+84     	; 0x180a <xMBRTUTransmitFSM+0x70>
		break;

	case STATE_TX_XMIT:
		/* check if we are finished. */
		if( usSndBufferCount != 0 )
    17b6:	80 91 d2 00 	lds	r24, 0x00D2
    17ba:	90 91 d3 00 	lds	r25, 0x00D3
    17be:	89 2b       	or	r24, r25
    17c0:	d1 f0       	breq	.+52     	; 0x17f6 <xMBRTUTransmitFSM+0x5c>
		{
			xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
    17c2:	e0 91 d0 00 	lds	r30, 0x00D0
    17c6:	f0 91 d1 00 	lds	r31, 0x00D1
    17ca:	80 81       	ld	r24, Z
    17cc:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <xMBPortSerialPutByte>
			pucSndBufferCur++;  /* next byte in sendbuffer. */
    17d0:	80 91 d0 00 	lds	r24, 0x00D0
    17d4:	90 91 d1 00 	lds	r25, 0x00D1
    17d8:	01 96       	adiw	r24, 0x01	; 1
    17da:	90 93 d1 00 	sts	0x00D1, r25
    17de:	80 93 d0 00 	sts	0x00D0, r24
			usSndBufferCount--;
    17e2:	80 91 d2 00 	lds	r24, 0x00D2
    17e6:	90 91 d3 00 	lds	r25, 0x00D3
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	90 93 d3 00 	sts	0x00D3, r25
    17f0:	80 93 d2 00 	sts	0x00D2, r24
    17f4:	de cf       	rjmp	.-68     	; 0x17b2 <xMBRTUTransmitFSM+0x18>
		}
		else
		{
			xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
    17f6:	83 e0       	ldi	r24, 0x03	; 3
    17f8:	0e 94 ca 09 	call	0x1394	; 0x1394 <xMBPortEventPost>
    17fc:	18 2f       	mov	r17, r24
			/* Disable transmitter. This prevents another transmit buffer
			 * empty interrupt. */
			vMBPortSerialEnable( TRUE, FALSE );
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vMBPortSerialEnable>
			eSndState = STATE_TX_IDLE;
    1806:	10 92 ce 00 	sts	0x00CE, r1
		}
		break;
	}

	return xNeedPoll;
}
    180a:	81 2f       	mov	r24, r17
    180c:	1f 91       	pop	r17
    180e:	08 95       	ret

00001810 <xMBRTUReceiveFSM>:
	return eStatus;
}

BOOL
xMBRTUReceiveFSM( void )
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	0f 92       	push	r0
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
	UCHAR		   ucByte;

	assert( eSndState == STATE_TX_IDLE );

	/* Always read the character. */
	( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
    181a:	ce 01       	movw	r24, r28
    181c:	01 96       	adiw	r24, 0x01	; 1
    181e:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <xMBPortSerialGetByte>

	switch ( eRcvState )
    1822:	80 91 cf 00 	lds	r24, 0x00CF
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	39 f0       	breq	.+14     	; 0x1838 <xMBRTUReceiveFSM+0x28>
    182a:	81 30       	cpi	r24, 0x01	; 1
    182c:	98 f1       	brcs	.+102    	; 0x1894 <xMBRTUReceiveFSM+0x84>
    182e:	82 30       	cpi	r24, 0x02	; 2
    1830:	b9 f0       	breq	.+46     	; 0x1860 <xMBRTUReceiveFSM+0x50>
    1832:	83 30       	cpi	r24, 0x03	; 3
    1834:	89 f5       	brne	.+98     	; 0x1898 <xMBRTUReceiveFSM+0x88>
    1836:	2e c0       	rjmp	.+92     	; 0x1894 <xMBRTUReceiveFSM+0x84>
		/* In the idle state we wait for a new character. If a character
		 * is received the t1.5 and t3.5 timers are started and the
		 * receiver is in the state STATE_RX_RECEIVCE.
		 */
	case STATE_RX_IDLE:
		usRcvBufferPos = 0;
    1838:	10 92 d5 00 	sts	0x00D5, r1
    183c:	10 92 d4 00 	sts	0x00D4, r1
		ucRTUBuf[usRcvBufferPos++] = ucByte;
    1840:	80 91 d4 00 	lds	r24, 0x00D4
    1844:	90 91 d5 00 	lds	r25, 0x00D5
    1848:	29 81       	ldd	r18, Y+1	; 0x01
    184a:	fc 01       	movw	r30, r24
    184c:	e1 51       	subi	r30, 0x11	; 17
    184e:	fe 4f       	sbci	r31, 0xFE	; 254
    1850:	20 83       	st	Z, r18
    1852:	01 96       	adiw	r24, 0x01	; 1
    1854:	90 93 d5 00 	sts	0x00D5, r25
    1858:	80 93 d4 00 	sts	0x00D4, r24
		eRcvState = STATE_RX_RCV;
    185c:	82 e0       	ldi	r24, 0x02	; 2
    185e:	18 c0       	rjmp	.+48     	; 0x1890 <xMBRTUReceiveFSM+0x80>
		 * every character received. If more than the maximum possible
		 * number of bytes in a modbus frame is received the frame is
		 * ignored.
		 */
	case STATE_RX_RCV:
		if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
    1860:	80 91 d4 00 	lds	r24, 0x00D4
    1864:	90 91 d5 00 	lds	r25, 0x00D5
    1868:	8f 3f       	cpi	r24, 0xFF	; 255
    186a:	91 05       	cpc	r25, r1
    186c:	09 f0       	breq	.+2      	; 0x1870 <xMBRTUReceiveFSM+0x60>
    186e:	78 f4       	brcc	.+30     	; 0x188e <xMBRTUReceiveFSM+0x7e>
		{
			ucRTUBuf[usRcvBufferPos++] = ucByte;
    1870:	80 91 d4 00 	lds	r24, 0x00D4
    1874:	90 91 d5 00 	lds	r25, 0x00D5
    1878:	29 81       	ldd	r18, Y+1	; 0x01
    187a:	fc 01       	movw	r30, r24
    187c:	e1 51       	subi	r30, 0x11	; 17
    187e:	fe 4f       	sbci	r31, 0xFE	; 254
    1880:	20 83       	st	Z, r18
    1882:	01 96       	adiw	r24, 0x01	; 1
    1884:	90 93 d5 00 	sts	0x00D5, r25
    1888:	80 93 d4 00 	sts	0x00D4, r24
    188c:	03 c0       	rjmp	.+6      	; 0x1894 <xMBRTUReceiveFSM+0x84>
		}
		else
		{
			eRcvState = STATE_RX_ERROR;
    188e:	83 e0       	ldi	r24, 0x03	; 3
    1890:	80 93 cf 00 	sts	0x00CF, r24
		}
		vMBPortTimersEnable(  );
    1894:	0e 94 48 0b 	call	0x1690	; 0x1690 <vMBPortTimersEnable>
		break;
	}
	return xTaskNeedSwitch;
}
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	0f 90       	pop	r0
    189c:	cf 91       	pop	r28
    189e:	df 91       	pop	r29
    18a0:	08 95       	ret

000018a2 <eMBRTUStart>:
}

void
eMBRTUStart( void )
{
	ENTER_CRITICAL_SECTION(  );
    18a2:	f8 94       	cli
	/* Initially the receiver is in the state STATE_RX_INIT. we start
	 * the timer and if no character is received within t3.5 we change
	 * to STATE_RX_IDLE. This makes sure that we delay startup of the
	 * modbus protocol stack until the bus is free.
	 */
	eRcvState = STATE_RX_INIT;
    18a4:	10 92 cf 00 	sts	0x00CF, r1
	vMBPortSerialEnable( TRUE, FALSE );
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vMBPortSerialEnable>
	vMBPortTimersEnable(  );
    18b0:	0e 94 48 0b 	call	0x1690	; 0x1690 <vMBPortTimersEnable>

	EXIT_CRITICAL_SECTION(  );
    18b4:	78 94       	sei
}
    18b6:	08 95       	ret

000018b8 <eMBRTUSend>:
	return eStatus;
}

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    18b8:	1f 93       	push	r17
    18ba:	28 2f       	mov	r18, r24
	eMBErrorCode	eStatus = MB_ENOERR;
	USHORT		  usCRC16;

	ENTER_CRITICAL_SECTION(  );
    18bc:	f8 94       	cli

	/* Check if the receiver is still in idle state. If not we where to
	 * slow with processing the received frame and the master sent another
	 * frame on the network. We have to abort sending the frame.
	 */
	if( eRcvState == STATE_RX_IDLE )
    18be:	10 91 cf 00 	lds	r17, 0x00CF
    18c2:	11 30       	cpi	r17, 0x01	; 1
    18c4:	11 f0       	breq	.+4      	; 0x18ca <eMBRTUSend+0x12>
    18c6:	85 e0       	ldi	r24, 0x05	; 5
    18c8:	41 c0       	rjmp	.+130    	; 0x194c <eMBRTUSend+0x94>
	{
		/* First byte before the Modbus-PDU is the slave address. */
		pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
    18ca:	fb 01       	movw	r30, r22
    18cc:	31 97       	sbiw	r30, 0x01	; 1
    18ce:	f0 93 d1 00 	sts	0x00D1, r31
    18d2:	e0 93 d0 00 	sts	0x00D0, r30
		usSndBufferCount = 1;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	90 93 d3 00 	sts	0x00D3, r25
    18de:	80 93 d2 00 	sts	0x00D2, r24

		/* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
		pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
    18e2:	20 83       	st	Z, r18
		usSndBufferCount += usLength;
    18e4:	80 91 d2 00 	lds	r24, 0x00D2
    18e8:	90 91 d3 00 	lds	r25, 0x00D3
    18ec:	84 0f       	add	r24, r20
    18ee:	95 1f       	adc	r25, r21
    18f0:	90 93 d3 00 	sts	0x00D3, r25
    18f4:	80 93 d2 00 	sts	0x00D2, r24

		/* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
		usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
    18f8:	60 91 d2 00 	lds	r22, 0x00D2
    18fc:	70 91 d3 00 	lds	r23, 0x00D3
    1900:	cf 01       	movw	r24, r30
    1902:	0e 94 8e 0b 	call	0x171c	; 0x171c <usMBCRC16>
		ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
    1906:	20 91 d2 00 	lds	r18, 0x00D2
    190a:	30 91 d3 00 	lds	r19, 0x00D3
    190e:	f9 01       	movw	r30, r18
    1910:	e1 51       	subi	r30, 0x11	; 17
    1912:	fe 4f       	sbci	r31, 0xFE	; 254
    1914:	80 83       	st	Z, r24
    1916:	2f 5f       	subi	r18, 0xFF	; 255
    1918:	3f 4f       	sbci	r19, 0xFF	; 255
    191a:	30 93 d3 00 	sts	0x00D3, r19
    191e:	20 93 d2 00 	sts	0x00D2, r18
		ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
    1922:	20 91 d2 00 	lds	r18, 0x00D2
    1926:	30 91 d3 00 	lds	r19, 0x00D3
    192a:	f9 01       	movw	r30, r18
    192c:	e1 51       	subi	r30, 0x11	; 17
    192e:	fe 4f       	sbci	r31, 0xFE	; 254
    1930:	90 83       	st	Z, r25
    1932:	2f 5f       	subi	r18, 0xFF	; 255
    1934:	3f 4f       	sbci	r19, 0xFF	; 255
    1936:	30 93 d3 00 	sts	0x00D3, r19
    193a:	20 93 d2 00 	sts	0x00D2, r18

		/* Activate the transmitter. */
		eSndState = STATE_TX_XMIT;
    193e:	10 93 ce 00 	sts	0x00CE, r17
		vMBPortSerialEnable( FALSE, TRUE );
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	61 e0       	ldi	r22, 0x01	; 1
    1946:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vMBPortSerialEnable>
    194a:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		eStatus = MB_EIO;
	}
	EXIT_CRITICAL_SECTION(  );
    194c:	78 94       	sei
	return eStatus;
}
    194e:	1f 91       	pop	r17
    1950:	08 95       	ret

00001952 <eMBRTUReceive>:
	EXIT_CRITICAL_SECTION(  );
}

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    1952:	ef 92       	push	r14
    1954:	ff 92       	push	r15
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	ec 01       	movw	r28, r24
    1960:	7b 01       	movw	r14, r22
    1962:	8a 01       	movw	r16, r20
	BOOL			xFrameReceived = FALSE;
	eMBErrorCode	eStatus = MB_ENOERR;

	ENTER_CRITICAL_SECTION(  );
    1964:	f8 94       	cli
	assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

	/* Length and CRC check */
	if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
    1966:	80 91 d4 00 	lds	r24, 0x00D4
    196a:	90 91 d5 00 	lds	r25, 0x00D5
    196e:	04 97       	sbiw	r24, 0x04	; 4
    1970:	e0 f0       	brcs	.+56     	; 0x19aa <eMBRTUReceive+0x58>
    1972:	60 91 d4 00 	lds	r22, 0x00D4
    1976:	70 91 d5 00 	lds	r23, 0x00D5
    197a:	8f ee       	ldi	r24, 0xEF	; 239
    197c:	91 e0       	ldi	r25, 0x01	; 1
    197e:	0e 94 8e 0b 	call	0x171c	; 0x171c <usMBCRC16>
    1982:	89 2b       	or	r24, r25
    1984:	91 f4       	brne	.+36     	; 0x19aa <eMBRTUReceive+0x58>
		&& ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
	{
		/* Save the address field. All frames are passed to the upper layed
		 * and the decision if a frame is used is done there.
		 */
		*pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
    1986:	80 91 ef 01 	lds	r24, 0x01EF
    198a:	88 83       	st	Y, r24

		/* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
		 * size of address field and CRC checksum.
		 */
		*pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
    198c:	80 91 d4 00 	lds	r24, 0x00D4
    1990:	90 91 d5 00 	lds	r25, 0x00D5
    1994:	03 97       	sbiw	r24, 0x03	; 3
    1996:	f8 01       	movw	r30, r16
    1998:	91 83       	std	Z+1, r25	; 0x01
    199a:	80 83       	st	Z, r24

		/* Return the start of the Modbus PDU to the caller. */
		*pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
    199c:	80 ef       	ldi	r24, 0xF0	; 240
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	f7 01       	movw	r30, r14
    19a2:	91 83       	std	Z+1, r25	; 0x01
    19a4:	80 83       	st	Z, r24
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	01 c0       	rjmp	.+2      	; 0x19ac <eMBRTUReceive+0x5a>

	ENTER_CRITICAL_SECTION(  );
	assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

	/* Length and CRC check */
	if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
    19aa:	85 e0       	ldi	r24, 0x05	; 5
	else
	{
		eStatus = MB_EIO;
	}

	EXIT_CRITICAL_SECTION(  );
    19ac:	78 94       	sei
	return eStatus;
}
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	1f 91       	pop	r17
    19b4:	0f 91       	pop	r16
    19b6:	ff 90       	pop	r15
    19b8:	ef 90       	pop	r14
    19ba:	08 95       	ret

000019bc <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    19bc:	cf 92       	push	r12
    19be:	df 92       	push	r13
    19c0:	ef 92       	push	r14
    19c2:	ff 92       	push	r15
    19c4:	0f 93       	push	r16
    19c6:	86 2f       	mov	r24, r22
    19c8:	69 01       	movw	r12, r18
    19ca:	7a 01       	movw	r14, r20
	eMBErrorCode	eStatus = MB_ENOERR;
	ULONG		   usTimerT35_50us;

	( void )ucSlaveAddress;
	ENTER_CRITICAL_SECTION(  );
    19cc:	f8 94       	cli

	/* Modbus RTU uses 8 Databits. */
	if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
    19ce:	ba 01       	movw	r22, r20
    19d0:	a9 01       	movw	r20, r18
    19d2:	28 e0       	ldi	r18, 0x08	; 8
    19d4:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <xMBPortSerialInit>
    19d8:	81 30       	cpi	r24, 0x01	; 1
    19da:	09 f5       	brne	.+66     	; 0x1a1e <eMBRTUInit+0x62>
	else
	{
		/* If baudrate > 19200 then we should use the fixed timer values
		 * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
		 */
		if( ulBaudRate > 19200 )  {
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	c8 16       	cp	r12, r24
    19e0:	8b e4       	ldi	r24, 0x4B	; 75
    19e2:	d8 06       	cpc	r13, r24
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	e8 06       	cpc	r14, r24
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	f8 06       	cpc	r15, r24
    19ec:	28 f0       	brcs	.+10     	; 0x19f8 <eMBRTUInit+0x3c>
    19ee:	8a e0       	ldi	r24, 0x0A	; 10
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	a0 e0       	ldi	r26, 0x00	; 0
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	0d c0       	rjmp	.+26     	; 0x1a12 <eMBRTUInit+0x56>
			 *			 = 11 * Ticks_per_1s / Baudrate
			 *			 = 220000 / Baudrate
			 * The reload for t3.5 is 1.5 times this value and similary
			 * for t3.5.
			 */
			usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
    19f8:	cc 0c       	add	r12, r12
    19fa:	dd 1c       	adc	r13, r13
    19fc:	ee 1c       	adc	r14, r14
    19fe:	ff 1c       	adc	r15, r15
    1a00:	60 ea       	ldi	r22, 0xA0	; 160
    1a02:	7f e7       	ldi	r23, 0x7F	; 127
    1a04:	87 e1       	ldi	r24, 0x17	; 23
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	a7 01       	movw	r20, r14
    1a0a:	96 01       	movw	r18, r12
    1a0c:	0e 94 b7 10 	call	0x216e	; 0x216e <__udivmodsi4>
    1a10:	c9 01       	movw	r24, r18
		}
		if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
    1a12:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <xMBPortTimersInit>
    1a16:	81 30       	cpi	r24, 0x01	; 1
    1a18:	11 f4       	brne	.+4      	; 0x1a1e <eMBRTUInit+0x62>
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	01 c0       	rjmp	.+2      	; 0x1a20 <eMBRTUInit+0x64>
    1a1e:	83 e0       	ldi	r24, 0x03	; 3
		{
			eStatus = MB_EPORTERR;
		}
	}
	EXIT_CRITICAL_SECTION(  );
    1a20:	78 94       	sei

	return eStatus;
}
    1a22:	0f 91       	pop	r16
    1a24:	ff 90       	pop	r15
    1a26:	ef 90       	pop	r14
    1a28:	df 90       	pop	r13
    1a2a:	cf 90       	pop	r12
    1a2c:	08 95       	ret

00001a2e <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
    1a2e:	cf 93       	push	r28
    1a30:	df 93       	push	r29
    1a32:	fc 01       	movw	r30, r24
    1a34:	eb 01       	movw	r28, r22
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    1a36:	88 81       	ld	r24, Y
    1a38:	99 81       	ldd	r25, Y+1	; 0x01
    1a3a:	06 97       	sbiw	r24, 0x06	; 6
    1a3c:	c0 f1       	brcs	.+112    	; 0x1aae <eMBFuncWriteMultipleCoils+0x80>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    1a3e:	a1 81       	ldd	r26, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    1a40:	b2 81       	ldd	r27, Z+2	; 0x02
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
    1a42:	93 81       	ldd	r25, Z+3	; 0x03
    1a44:	80 e0       	ldi	r24, 0x00	; 0
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
    1a46:	24 81       	ldd	r18, Z+4	; 0x04
    1a48:	42 2f       	mov	r20, r18
    1a4a:	50 e0       	ldi	r21, 0x00	; 0
    1a4c:	48 2b       	or	r20, r24
    1a4e:	59 2b       	or	r21, r25

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
    1a50:	35 81       	ldd	r19, Z+5	; 0x05

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
    1a52:	ca 01       	movw	r24, r20
    1a54:	87 70       	andi	r24, 0x07	; 7
    1a56:	90 70       	andi	r25, 0x00	; 0
    1a58:	ba 01       	movw	r22, r20
    1a5a:	23 e0       	ldi	r18, 0x03	; 3
    1a5c:	76 95       	lsr	r23
    1a5e:	67 95       	ror	r22
    1a60:	2a 95       	dec	r18
    1a62:	e1 f7       	brne	.-8      	; 0x1a5c <eMBFuncWriteMultipleCoils+0x2e>
    1a64:	89 2b       	or	r24, r25
    1a66:	19 f0       	breq	.+6      	; 0x1a6e <eMBFuncWriteMultipleCoils+0x40>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
    1a68:	26 2f       	mov	r18, r22
    1a6a:	2f 5f       	subi	r18, 0xFF	; 255
    1a6c:	01 c0       	rjmp	.+2      	; 0x1a70 <eMBFuncWriteMultipleCoils+0x42>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
    1a6e:	26 2f       	mov	r18, r22
        }

        if( ( usCoilCnt >= 1 ) &&
    1a70:	ca 01       	movw	r24, r20
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	80 5b       	subi	r24, 0xB0	; 176
    1a76:	97 40       	sbci	r25, 0x07	; 7
    1a78:	d0 f4       	brcc	.+52     	; 0x1aae <eMBFuncWriteMultipleCoils+0x80>
    1a7a:	23 17       	cp	r18, r19
    1a7c:	c1 f4       	brne	.+48     	; 0x1aae <eMBFuncWriteMultipleCoils+0x80>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    1a7e:	7a 2f       	mov	r23, r26
    1a80:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    1a82:	8b 2f       	mov	r24, r27
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	68 2b       	or	r22, r24
    1a88:	79 2b       	or	r23, r25

        if( ( usCoilCnt >= 1 ) &&
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
    1a8a:	6f 5f       	subi	r22, 0xFF	; 255
    1a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8e:	cf 01       	movw	r24, r30
    1a90:	06 96       	adiw	r24, 0x06	; 6
    1a92:	21 e0       	ldi	r18, 0x01	; 1
    1a94:	0e 94 8d 03 	call	0x71a	; 0x71a <eMBRegCoilsCB>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    1a98:	88 23       	and	r24, r24
    1a9a:	19 f0       	breq	.+6      	; 0x1aa2 <eMBFuncWriteMultipleCoils+0x74>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1a9c:	0e 94 6e 10 	call	0x20dc	; 0x20dc <prveMBError2Exception>
    1aa0:	07 c0       	rjmp	.+14     	; 0x1ab0 <eMBFuncWriteMultipleCoils+0x82>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
    1aa2:	85 e0       	ldi	r24, 0x05	; 5
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	99 83       	std	Y+1, r25	; 0x01
    1aa8:	88 83       	st	Y, r24
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	01 c0       	rjmp	.+2      	; 0x1ab0 <eMBFuncWriteMultipleCoils+0x82>
    1aae:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	08 95       	ret

00001ab6 <eMBFuncWriteCoil>:
}

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <eMBFuncWriteCoil+0x6>
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	fb 01       	movw	r30, r22
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    1ac4:	80 81       	ld	r24, Z
    1ac6:	91 81       	ldd	r25, Z+1	; 0x01
    1ac8:	05 97       	sbiw	r24, 0x05	; 5
    1aca:	61 f5       	brne	.+88     	; 0x1b24 <eMBFuncWriteCoil+0x6e>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    1acc:	11 96       	adiw	r26, 0x01	; 1
    1ace:	2c 91       	ld	r18, X
    1ad0:	11 97       	sbiw	r26, 0x01	; 1
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    1ad2:	12 96       	adiw	r26, 0x02	; 2
    1ad4:	3c 91       	ld	r19, X
    1ad6:	12 97       	sbiw	r26, 0x02	; 2
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
    1ad8:	14 96       	adiw	r26, 0x04	; 4
    1ada:	8c 91       	ld	r24, X
    1adc:	14 97       	sbiw	r26, 0x04	; 4
    1ade:	88 23       	and	r24, r24
    1ae0:	09 f5       	brne	.+66     	; 0x1b24 <eMBFuncWriteCoil+0x6e>
    1ae2:	13 96       	adiw	r26, 0x03	; 3
    1ae4:	9c 91       	ld	r25, X
    1ae6:	89 2f       	mov	r24, r25
    1ae8:	81 50       	subi	r24, 0x01	; 1
    1aea:	8e 3f       	cpi	r24, 0xFE	; 254
    1aec:	d8 f0       	brcs	.+54     	; 0x1b24 <eMBFuncWriteCoil+0x6e>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
    1aee:	1a 82       	std	Y+2, r1	; 0x02
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
    1af0:	9f 3f       	cpi	r25, 0xFF	; 255
    1af2:	19 f4       	brne	.+6      	; 0x1afa <eMBFuncWriteCoil+0x44>
            {
                ucBuf[0] = 1;
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	89 83       	std	Y+1, r24	; 0x01
    1af8:	01 c0       	rjmp	.+2      	; 0x1afc <eMBFuncWriteCoil+0x46>
            }
            else
            {
                ucBuf[0] = 0;
    1afa:	19 82       	std	Y+1, r1	; 0x01
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    1afc:	72 2f       	mov	r23, r18
    1afe:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    1b00:	83 2f       	mov	r24, r19
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	68 2b       	or	r22, r24
    1b06:	79 2b       	or	r23, r25
            }
            else
            {
                ucBuf[0] = 0;
            }
            eRegStatus =
    1b08:	6f 5f       	subi	r22, 0xFF	; 255
    1b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	01 96       	adiw	r24, 0x01	; 1
    1b10:	41 e0       	ldi	r20, 0x01	; 1
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	21 e0       	ldi	r18, 0x01	; 1
    1b16:	0e 94 8d 03 	call	0x71a	; 0x71a <eMBRegCoilsCB>
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    1b1a:	88 23       	and	r24, r24
    1b1c:	21 f0       	breq	.+8      	; 0x1b26 <eMBFuncWriteCoil+0x70>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1b1e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <prveMBError2Exception>
    1b22:	01 c0       	rjmp	.+2      	; 0x1b26 <eMBFuncWriteCoil+0x70>
    1b24:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
    1b30:	0f 93       	push	r16
    1b32:	1f 93       	push	r17
    1b34:	cf 93       	push	r28
    1b36:	df 93       	push	r29
    1b38:	fc 01       	movw	r30, r24
    1b3a:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    1b3c:	88 81       	ld	r24, Y
    1b3e:	99 81       	ldd	r25, Y+1	; 0x01
    1b40:	05 97       	sbiw	r24, 0x05	; 5
    1b42:	09 f0       	breq	.+2      	; 0x1b46 <eMBFuncReadCoils+0x16>
    1b44:	47 c0       	rjmp	.+142    	; 0x1bd4 <eMBFuncReadCoils+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1b46:	01 81       	ldd	r16, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1b48:	df 01       	movw	r26, r30
    1b4a:	12 96       	adiw	r26, 0x02	; 2
    1b4c:	32 81       	ldd	r19, Z+2	; 0x02
        usRegAddress++;

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
    1b4e:	93 81       	ldd	r25, Z+3	; 0x03
    1b50:	80 e0       	ldi	r24, 0x00	; 0
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
    1b52:	24 81       	ldd	r18, Z+4	; 0x04
    1b54:	42 2f       	mov	r20, r18
    1b56:	50 e0       	ldi	r21, 0x00	; 0
    1b58:	48 2b       	or	r20, r24
    1b5a:	59 2b       	or	r21, r25

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
    1b5c:	ca 01       	movw	r24, r20
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	8f 5c       	subi	r24, 0xCF	; 207
    1b62:	97 40       	sbci	r25, 0x07	; 7
    1b64:	b8 f5       	brcc	.+110    	; 0x1bd4 <eMBFuncReadCoils+0xa4>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    1b66:	19 82       	std	Y+1, r1	; 0x01
    1b68:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	80 83       	st	Z, r24
            *usLen += 1;
    1b6e:	88 81       	ld	r24, Y
    1b70:	99 81       	ldd	r25, Y+1	; 0x01
    1b72:	01 96       	adiw	r24, 0x01	; 1
    1b74:	99 83       	std	Y+1, r25	; 0x01
    1b76:	88 83       	st	Y, r24

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
    1b78:	ca 01       	movw	r24, r20
    1b7a:	87 70       	andi	r24, 0x07	; 7
    1b7c:	90 70       	andi	r25, 0x00	; 0
    1b7e:	ba 01       	movw	r22, r20
    1b80:	13 e0       	ldi	r17, 0x03	; 3
    1b82:	76 95       	lsr	r23
    1b84:	67 95       	ror	r22
    1b86:	1a 95       	dec	r17
    1b88:	e1 f7       	brne	.-8      	; 0x1b82 <eMBFuncReadCoils+0x52>
    1b8a:	89 2b       	or	r24, r25
    1b8c:	19 f0       	breq	.+6      	; 0x1b94 <eMBFuncReadCoils+0x64>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
    1b8e:	16 2f       	mov	r17, r22
    1b90:	1f 5f       	subi	r17, 0xFF	; 255
    1b92:	01 c0       	rjmp	.+2      	; 0x1b96 <eMBFuncReadCoils+0x66>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
    1b94:	16 2f       	mov	r17, r22
            }
            *pucFrameCur++ = ucNBytes;
    1b96:	11 83       	std	Z+1, r17	; 0x01
            *usLen += 1;
    1b98:	88 81       	ld	r24, Y
    1b9a:	99 81       	ldd	r25, Y+1	; 0x01
    1b9c:	01 96       	adiw	r24, 0x01	; 1
    1b9e:	99 83       	std	Y+1, r25	; 0x01
    1ba0:	88 83       	st	Y, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1ba2:	70 2f       	mov	r23, r16
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1ba6:	83 2f       	mov	r24, r19
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	68 2b       	or	r22, r24
    1bac:	79 2b       	or	r23, r25
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
    1bae:	6f 5f       	subi	r22, 0xFF	; 255
    1bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb2:	cd 01       	movw	r24, r26
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	0e 94 8d 03 	call	0x71a	; 0x71a <eMBRegCoilsCB>
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    1bba:	88 23       	and	r24, r24
    1bbc:	19 f0       	breq	.+6      	; 0x1bc4 <eMBFuncReadCoils+0x94>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1bbe:	0e 94 6e 10 	call	0x20dc	; 0x20dc <prveMBError2Exception>
    1bc2:	09 c0       	rjmp	.+18     	; 0x1bd6 <eMBFuncReadCoils+0xa6>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
    1bc4:	88 81       	ld	r24, Y
    1bc6:	99 81       	ldd	r25, Y+1	; 0x01
    1bc8:	81 0f       	add	r24, r17
    1bca:	91 1d       	adc	r25, r1
    1bcc:	99 83       	std	Y+1, r25	; 0x01
    1bce:	88 83       	st	Y, r24
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	01 c0       	rjmp	.+2      	; 0x1bd6 <eMBFuncReadCoils+0xa6>
    1bd4:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	08 95       	ret

00001be0 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
    1be0:	0f 93       	push	r16
    1be2:	1f 93       	push	r17
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	fc 01       	movw	r30, r24
    1bea:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    1bec:	88 81       	ld	r24, Y
    1bee:	99 81       	ldd	r25, Y+1	; 0x01
    1bf0:	05 97       	sbiw	r24, 0x05	; 5
    1bf2:	09 f0       	breq	.+2      	; 0x1bf6 <eMBFuncReadDiscreteInputs+0x16>
    1bf4:	46 c0       	rjmp	.+140    	; 0x1c82 <eMBFuncReadDiscreteInputs+0xa2>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1bf6:	01 81       	ldd	r16, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1bf8:	df 01       	movw	r26, r30
    1bfa:	12 96       	adiw	r26, 0x02	; 2
    1bfc:	32 81       	ldd	r19, Z+2	; 0x02
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
    1bfe:	93 81       	ldd	r25, Z+3	; 0x03
    1c00:	80 e0       	ldi	r24, 0x00	; 0
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
    1c02:	24 81       	ldd	r18, Z+4	; 0x04
    1c04:	42 2f       	mov	r20, r18
    1c06:	50 e0       	ldi	r21, 0x00	; 0
    1c08:	48 2b       	or	r20, r24
    1c0a:	59 2b       	or	r21, r25

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
    1c0c:	ca 01       	movw	r24, r20
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	8f 5c       	subi	r24, 0xCF	; 207
    1c12:	97 40       	sbci	r25, 0x07	; 7
    1c14:	b0 f5       	brcc	.+108    	; 0x1c82 <eMBFuncReadDiscreteInputs+0xa2>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    1c16:	19 82       	std	Y+1, r1	; 0x01
    1c18:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
    1c1a:	82 e0       	ldi	r24, 0x02	; 2
    1c1c:	80 83       	st	Z, r24
            *usLen += 1;
    1c1e:	88 81       	ld	r24, Y
    1c20:	99 81       	ldd	r25, Y+1	; 0x01
    1c22:	01 96       	adiw	r24, 0x01	; 1
    1c24:	99 83       	std	Y+1, r25	; 0x01
    1c26:	88 83       	st	Y, r24

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
    1c28:	ca 01       	movw	r24, r20
    1c2a:	87 70       	andi	r24, 0x07	; 7
    1c2c:	90 70       	andi	r25, 0x00	; 0
    1c2e:	ba 01       	movw	r22, r20
    1c30:	23 e0       	ldi	r18, 0x03	; 3
    1c32:	76 95       	lsr	r23
    1c34:	67 95       	ror	r22
    1c36:	2a 95       	dec	r18
    1c38:	e1 f7       	brne	.-8      	; 0x1c32 <eMBFuncReadDiscreteInputs+0x52>
    1c3a:	89 2b       	or	r24, r25
    1c3c:	19 f0       	breq	.+6      	; 0x1c44 <eMBFuncReadDiscreteInputs+0x64>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
    1c3e:	16 2f       	mov	r17, r22
    1c40:	1f 5f       	subi	r17, 0xFF	; 255
    1c42:	01 c0       	rjmp	.+2      	; 0x1c46 <eMBFuncReadDiscreteInputs+0x66>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
    1c44:	16 2f       	mov	r17, r22
            }
            *pucFrameCur++ = ucNBytes;
    1c46:	11 83       	std	Z+1, r17	; 0x01
            *usLen += 1;
    1c48:	88 81       	ld	r24, Y
    1c4a:	99 81       	ldd	r25, Y+1	; 0x01
    1c4c:	01 96       	adiw	r24, 0x01	; 1
    1c4e:	99 83       	std	Y+1, r25	; 0x01
    1c50:	88 83       	st	Y, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1c52:	70 2f       	mov	r23, r16
    1c54:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1c56:	83 2f       	mov	r24, r19
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	68 2b       	or	r22, r24
    1c5c:	79 2b       	or	r23, r25
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
    1c5e:	6f 5f       	subi	r22, 0xFF	; 255
    1c60:	7f 4f       	sbci	r23, 0xFF	; 255
    1c62:	cd 01       	movw	r24, r26
    1c64:	0e 94 45 03 	call	0x68a	; 0x68a <eMBRegDiscreteCB>
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    1c68:	88 23       	and	r24, r24
    1c6a:	19 f0       	breq	.+6      	; 0x1c72 <eMBFuncReadDiscreteInputs+0x92>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1c6c:	0e 94 6e 10 	call	0x20dc	; 0x20dc <prveMBError2Exception>
    1c70:	09 c0       	rjmp	.+18     	; 0x1c84 <eMBFuncReadDiscreteInputs+0xa4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
    1c72:	88 81       	ld	r24, Y
    1c74:	99 81       	ldd	r25, Y+1	; 0x01
    1c76:	81 0f       	add	r24, r17
    1c78:	91 1d       	adc	r25, r1
    1c7a:	99 83       	std	Y+1, r25	; 0x01
    1c7c:	88 83       	st	Y, r24
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	01 c0       	rjmp	.+2      	; 0x1c84 <eMBFuncReadDiscreteInputs+0xa4>
    1c82:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	1f 91       	pop	r17
    1c8a:	0f 91       	pop	r16
    1c8c:	08 95       	ret

00001c8e <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    1c8e:	8f 92       	push	r8
    1c90:	9f 92       	push	r9
    1c92:	af 92       	push	r10
    1c94:	bf 92       	push	r11
    1c96:	cf 92       	push	r12
    1c98:	df 92       	push	r13
    1c9a:	ef 92       	push	r14
    1c9c:	ff 92       	push	r15
    1c9e:	0f 93       	push	r16
    1ca0:	1f 93       	push	r17
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	ec 01       	movw	r28, r24
    1ca8:	8b 01       	movw	r16, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    1caa:	fb 01       	movw	r30, r22
    1cac:	80 81       	ld	r24, Z
    1cae:	91 81       	ldd	r25, Z+1	; 0x01
    1cb0:	0a 97       	sbiw	r24, 0x0a	; 10
    1cb2:	08 f4       	brcc	.+2      	; 0x1cb6 <eMBFuncReadWriteMultipleHoldingRegister+0x28>
    1cb4:	67 c0       	rjmp	.+206    	; 0x1d84 <eMBFuncReadWriteMultipleHoldingRegister+0xf6>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
    1cb6:	89 80       	ldd	r8, Y+1	; 0x01
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
    1cb8:	22 e0       	ldi	r18, 0x02	; 2
    1cba:	a2 2e       	mov	r10, r18
    1cbc:	b1 2c       	mov	r11, r1
    1cbe:	ac 0e       	add	r10, r28
    1cc0:	bd 1e       	adc	r11, r29
    1cc2:	9a 80       	ldd	r9, Y+2	; 0x02
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
    1cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
    1cc8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cca:	e2 2e       	mov	r14, r18
    1ccc:	ff 24       	eor	r15, r15
    1cce:	e8 2a       	or	r14, r24
    1cd0:	f9 2a       	or	r15, r25

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
    1cd2:	ed 81       	ldd	r30, Y+5	; 0x05
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
    1cd4:	fe 81       	ldd	r31, Y+6	; 0x06
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
    1cd6:	6f 81       	ldd	r22, Y+7	; 0x07
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
    1cd8:	28 85       	ldd	r18, Y+8	; 0x08

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
    1cda:	79 85       	ldd	r23, Y+9	; 0x09

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
    1cdc:	c7 01       	movw	r24, r14
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	8d 37       	cpi	r24, 0x7D	; 125
    1ce2:	91 05       	cpc	r25, r1
    1ce4:	08 f0       	brcs	.+2      	; 0x1ce8 <eMBFuncReadWriteMultipleHoldingRegister+0x5a>
    1ce6:	53 c0       	rjmp	.+166    	; 0x1d8e <eMBFuncReadWriteMultipleHoldingRegister+0x100>

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
    1ce8:	96 2f       	mov	r25, r22
    1cea:	80 e0       	ldi	r24, 0x00	; 0
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
    1cec:	42 2f       	mov	r20, r18
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	48 2b       	or	r20, r24
    1cf2:	59 2b       	or	r21, r25

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
    1cf4:	41 15       	cp	r20, r1
    1cf6:	51 05       	cpc	r21, r1
    1cf8:	09 f4       	brne	.+2      	; 0x1cfc <eMBFuncReadWriteMultipleHoldingRegister+0x6e>
    1cfa:	49 c0       	rjmp	.+146    	; 0x1d8e <eMBFuncReadWriteMultipleHoldingRegister+0x100>
    1cfc:	4a 37       	cpi	r20, 0x7A	; 122
    1cfe:	51 05       	cpc	r21, r1
    1d00:	08 f0       	brcs	.+2      	; 0x1d04 <eMBFuncReadWriteMultipleHoldingRegister+0x76>
    1d02:	45 c0       	rjmp	.+138    	; 0x1d8e <eMBFuncReadWriteMultipleHoldingRegister+0x100>
    1d04:	9a 01       	movw	r18, r20
    1d06:	22 0f       	add	r18, r18
    1d08:	33 1f       	adc	r19, r19
    1d0a:	87 2f       	mov	r24, r23
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	28 17       	cp	r18, r24
    1d10:	39 07       	cpc	r19, r25
    1d12:	e9 f5       	brne	.+122    	; 0x1d8e <eMBFuncReadWriteMultipleHoldingRegister+0x100>
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
    1d14:	7e 2f       	mov	r23, r30
    1d16:	60 e0       	ldi	r22, 0x00	; 0
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
    1d18:	8f 2f       	mov	r24, r31
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	68 2b       	or	r22, r24
    1d1e:	79 2b       	or	r23, r25
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
    1d20:	6f 5f       	subi	r22, 0xFF	; 255
    1d22:	7f 4f       	sbci	r23, 0xFF	; 255
    1d24:	ce 01       	movw	r24, r28
    1d26:	0a 96       	adiw	r24, 0x0a	; 10
    1d28:	21 e0       	ldi	r18, 0x01	; 1
    1d2a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <eMBRegHoldingCB>
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
    1d2e:	88 23       	and	r24, r24
    1d30:	59 f5       	brne	.+86     	; 0x1d88 <eMBFuncReadWriteMultipleHoldingRegister+0xfa>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;
    1d32:	f8 01       	movw	r30, r16
    1d34:	11 82       	std	Z+1, r1	; 0x01
    1d36:	10 82       	st	Z, r1

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
    1d38:	87 e1       	ldi	r24, 0x17	; 23
    1d3a:	88 83       	st	Y, r24
                *usLen += 1;
    1d3c:	80 81       	ld	r24, Z
    1d3e:	91 81       	ldd	r25, Z+1	; 0x01
    1d40:	01 96       	adiw	r24, 0x01	; 1
    1d42:	91 83       	std	Z+1, r25	; 0x01
    1d44:	80 83       	st	Z, r24

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
    1d46:	67 01       	movw	r12, r14
    1d48:	cc 0c       	add	r12, r12
    1d4a:	dd 1c       	adc	r13, r13
    1d4c:	c9 82       	std	Y+1, r12	; 0x01
                *usLen += 1;
    1d4e:	80 81       	ld	r24, Z
    1d50:	91 81       	ldd	r25, Z+1	; 0x01
    1d52:	01 96       	adiw	r24, 0x01	; 1
    1d54:	91 83       	std	Z+1, r25	; 0x01
    1d56:	80 83       	st	Z, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
    1d58:	78 2d       	mov	r23, r8
    1d5a:	60 e0       	ldi	r22, 0x00	; 0
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
    1d5c:	89 2d       	mov	r24, r9
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	68 2b       	or	r22, r24
    1d62:	79 2b       	or	r23, r25
                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
                *usLen += 1;

                /* Make the read callback. */
                eRegStatus =
    1d64:	6f 5f       	subi	r22, 0xFF	; 255
    1d66:	7f 4f       	sbci	r23, 0xFF	; 255
    1d68:	c5 01       	movw	r24, r10
    1d6a:	a7 01       	movw	r20, r14
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <eMBRegHoldingCB>
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
    1d72:	88 23       	and	r24, r24
    1d74:	49 f4       	brne	.+18     	; 0x1d88 <eMBFuncReadWriteMultipleHoldingRegister+0xfa>
                {
                    *usLen += 2 * usRegReadCount;
    1d76:	f8 01       	movw	r30, r16
    1d78:	80 81       	ld	r24, Z
    1d7a:	91 81       	ldd	r25, Z+1	; 0x01
    1d7c:	8c 0d       	add	r24, r12
    1d7e:	9d 1d       	adc	r25, r13
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	80 83       	st	Z, r24
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	04 c0       	rjmp	.+8      	; 0x1d90 <eMBFuncReadWriteMultipleHoldingRegister+0x102>
                }
            }
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1d88:	0e 94 6e 10 	call	0x20dc	; 0x20dc <prveMBError2Exception>
    1d8c:	01 c0       	rjmp	.+2      	; 0x1d90 <eMBFuncReadWriteMultipleHoldingRegister+0x102>
    1d8e:	83 e0       	ldi	r24, 0x03	; 3
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
        }
    }
    return eStatus;
}
    1d90:	df 91       	pop	r29
    1d92:	cf 91       	pop	r28
    1d94:	1f 91       	pop	r17
    1d96:	0f 91       	pop	r16
    1d98:	ff 90       	pop	r15
    1d9a:	ef 90       	pop	r14
    1d9c:	df 90       	pop	r13
    1d9e:	cf 90       	pop	r12
    1da0:	bf 90       	pop	r11
    1da2:	af 90       	pop	r10
    1da4:	9f 90       	pop	r9
    1da6:	8f 90       	pop	r8
    1da8:	08 95       	ret

00001daa <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    1daa:	0f 93       	push	r16
    1dac:	1f 93       	push	r17
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	fc 01       	movw	r30, r24
    1db4:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    1db6:	88 81       	ld	r24, Y
    1db8:	99 81       	ldd	r25, Y+1	; 0x01
    1dba:	05 97       	sbiw	r24, 0x05	; 5
    1dbc:	c1 f5       	brne	.+112    	; 0x1e2e <eMBFuncReadHoldingRegister+0x84>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1dbe:	b1 81       	ldd	r27, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1dc0:	9f 01       	movw	r18, r30
    1dc2:	2e 5f       	subi	r18, 0xFE	; 254
    1dc4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc6:	a2 81       	ldd	r26, Z+2	; 0x02
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
    1dc8:	84 81       	ldd	r24, Z+4	; 0x04
    1dca:	48 2f       	mov	r20, r24
    1dcc:	50 e0       	ldi	r21, 0x00	; 0

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
    1dce:	ca 01       	movw	r24, r20
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	8d 37       	cpi	r24, 0x7D	; 125
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	58 f5       	brcc	.+86     	; 0x1e2e <eMBFuncReadHoldingRegister+0x84>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    1dd8:	19 82       	std	Y+1, r1	; 0x01
    1dda:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
    1ddc:	83 e0       	ldi	r24, 0x03	; 3
    1dde:	80 83       	st	Z, r24
            *usLen += 1;
    1de0:	88 81       	ld	r24, Y
    1de2:	99 81       	ldd	r25, Y+1	; 0x01
    1de4:	01 96       	adiw	r24, 0x01	; 1
    1de6:	99 83       	std	Y+1, r25	; 0x01
    1de8:	88 83       	st	Y, r24

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
    1dea:	8a 01       	movw	r16, r20
    1dec:	00 0f       	add	r16, r16
    1dee:	11 1f       	adc	r17, r17
    1df0:	01 83       	std	Z+1, r16	; 0x01
            *usLen += 1;
    1df2:	88 81       	ld	r24, Y
    1df4:	99 81       	ldd	r25, Y+1	; 0x01
    1df6:	01 96       	adiw	r24, 0x01	; 1
    1df8:	99 83       	std	Y+1, r25	; 0x01
    1dfa:	88 83       	st	Y, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1dfc:	7b 2f       	mov	r23, r27
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1e00:	8a 2f       	mov	r24, r26
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	68 2b       	or	r22, r24
    1e06:	79 2b       	or	r23, r25
            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
            *usLen += 1;

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
    1e08:	6f 5f       	subi	r22, 0xFF	; 255
    1e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0c:	c9 01       	movw	r24, r18
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <eMBRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    1e14:	88 23       	and	r24, r24
    1e16:	19 f0       	breq	.+6      	; 0x1e1e <eMBFuncReadHoldingRegister+0x74>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1e18:	0e 94 6e 10 	call	0x20dc	; 0x20dc <prveMBError2Exception>
    1e1c:	09 c0       	rjmp	.+18     	; 0x1e30 <eMBFuncReadHoldingRegister+0x86>
            }
            else
            {
                *usLen += usRegCount * 2;
    1e1e:	88 81       	ld	r24, Y
    1e20:	99 81       	ldd	r25, Y+1	; 0x01
    1e22:	80 0f       	add	r24, r16
    1e24:	91 1f       	adc	r25, r17
    1e26:	99 83       	std	Y+1, r25	; 0x01
    1e28:	88 83       	st	Y, r24
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	01 c0       	rjmp	.+2      	; 0x1e30 <eMBFuncReadHoldingRegister+0x86>
    1e2e:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	08 95       	ret

00001e3a <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	fc 01       	movw	r30, r24
    1e40:	eb 01       	movw	r28, r22
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    1e42:	88 81       	ld	r24, Y
    1e44:	99 81       	ldd	r25, Y+1	; 0x01
    1e46:	06 97       	sbiw	r24, 0x06	; 6
    1e48:	60 f1       	brcs	.+88     	; 0x1ea2 <eMBFuncWriteMultipleHoldingRegister+0x68>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    1e4a:	31 81       	ldd	r19, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    1e4c:	a2 81       	ldd	r26, Z+2	; 0x02
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	80 e0       	ldi	r24, 0x00	; 0
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
    1e52:	24 81       	ldd	r18, Z+4	; 0x04
    1e54:	42 2f       	mov	r20, r18
    1e56:	50 e0       	ldi	r21, 0x00	; 0
    1e58:	48 2b       	or	r20, r24
    1e5a:	59 2b       	or	r21, r25

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
    1e5c:	25 81       	ldd	r18, Z+5	; 0x05

        if( ( usRegCount >= 1 ) &&
    1e5e:	ca 01       	movw	r24, r20
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	88 37       	cpi	r24, 0x78	; 120
    1e64:	91 05       	cpc	r25, r1
    1e66:	e8 f4       	brcc	.+58     	; 0x1ea2 <eMBFuncWriteMultipleHoldingRegister+0x68>
    1e68:	ca 01       	movw	r24, r20
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	28 17       	cp	r18, r24
    1e70:	c1 f4       	brne	.+48     	; 0x1ea2 <eMBFuncWriteMultipleHoldingRegister+0x68>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    1e72:	73 2f       	mov	r23, r19
    1e74:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    1e76:	8a 2f       	mov	r24, r26
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	68 2b       	or	r22, r24
    1e7c:	79 2b       	or	r23, r25
        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
        {
            /* Make callback to update the register values. */
            eRegStatus =
    1e7e:	6f 5f       	subi	r22, 0xFF	; 255
    1e80:	7f 4f       	sbci	r23, 0xFF	; 255
    1e82:	cf 01       	movw	r24, r30
    1e84:	06 96       	adiw	r24, 0x06	; 6
    1e86:	21 e0       	ldi	r18, 0x01	; 1
    1e88:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <eMBRegHoldingCB>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    1e8c:	88 23       	and	r24, r24
    1e8e:	19 f0       	breq	.+6      	; 0x1e96 <eMBFuncWriteMultipleHoldingRegister+0x5c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1e90:	0e 94 6e 10 	call	0x20dc	; 0x20dc <prveMBError2Exception>
    1e94:	07 c0       	rjmp	.+14     	; 0x1ea4 <eMBFuncWriteMultipleHoldingRegister+0x6a>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
    1e96:	85 e0       	ldi	r24, 0x05	; 5
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	99 83       	std	Y+1, r25	; 0x01
    1e9c:	88 83       	st	Y, r24
    1e9e:	80 e0       	ldi	r24, 0x00	; 0
    1ea0:	01 c0       	rjmp	.+2      	; 0x1ea4 <eMBFuncWriteMultipleHoldingRegister+0x6a>
    1ea2:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	08 95       	ret

00001eaa <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    1eaa:	dc 01       	movw	r26, r24
    1eac:	fb 01       	movw	r30, r22
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    1eae:	80 81       	ld	r24, Z
    1eb0:	91 81       	ldd	r25, Z+1	; 0x01
    1eb2:	05 97       	sbiw	r24, 0x05	; 5
    1eb4:	11 f0       	breq	.+4      	; 0x1eba <eMBFuncWriteHoldingRegister+0x10>
    1eb6:	83 e0       	ldi	r24, 0x03	; 3
    1eb8:	08 95       	ret
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    1eba:	11 96       	adiw	r26, 0x01	; 1
    1ebc:	7c 91       	ld	r23, X
    1ebe:	11 97       	sbiw	r26, 0x01	; 1
    1ec0:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    1ec2:	12 96       	adiw	r26, 0x02	; 2
    1ec4:	8c 91       	ld	r24, X
    1ec6:	12 97       	sbiw	r26, 0x02	; 2
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	68 2b       	or	r22, r24
    1ecc:	79 2b       	or	r23, r25
        usRegAddress++;

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
    1ece:	6f 5f       	subi	r22, 0xFF	; 255
    1ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	03 96       	adiw	r24, 0x03	; 3
    1ed6:	41 e0       	ldi	r20, 0x01	; 1
    1ed8:	50 e0       	ldi	r21, 0x00	; 0
    1eda:	21 e0       	ldi	r18, 0x01	; 1
    1edc:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <eMBRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
    1ee0:	88 23       	and	r24, r24
    1ee2:	11 f0       	breq	.+4      	; 0x1ee8 <eMBFuncWriteHoldingRegister+0x3e>
        {
            eStatus = prveMBError2Exception( eRegStatus );
    1ee4:	0e 94 6e 10 	call	0x20dc	; 0x20dc <prveMBError2Exception>
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1ee8:	08 95       	ret

00001eea <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
    1eea:	ff 92       	push	r15
    1eec:	0f 93       	push	r16
    1eee:	1f 93       	push	r17
    1ef0:	cf 93       	push	r28
    1ef2:	df 93       	push	r29
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    1ef8:	88 81       	ld	r24, Y
    1efa:	99 81       	ldd	r25, Y+1	; 0x01
    1efc:	05 97       	sbiw	r24, 0x05	; 5
    1efe:	d1 f5       	brne	.+116    	; 0x1f74 <eMBFuncReadInputRegister+0x8a>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1f00:	f1 80       	ldd	r15, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1f02:	df 01       	movw	r26, r30
    1f04:	12 96       	adiw	r26, 0x02	; 2
    1f06:	32 81       	ldd	r19, Z+2	; 0x02
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
    1f08:	93 81       	ldd	r25, Z+3	; 0x03
    1f0a:	80 e0       	ldi	r24, 0x00	; 0
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
    1f0c:	24 81       	ldd	r18, Z+4	; 0x04
    1f0e:	42 2f       	mov	r20, r18
    1f10:	50 e0       	ldi	r21, 0x00	; 0
    1f12:	48 2b       	or	r20, r24
    1f14:	59 2b       	or	r21, r25

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
    1f16:	ca 01       	movw	r24, r20
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	8c 37       	cpi	r24, 0x7C	; 124
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	50 f5       	brcc	.+84     	; 0x1f74 <eMBFuncReadInputRegister+0x8a>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    1f20:	19 82       	std	Y+1, r1	; 0x01
    1f22:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
    1f24:	84 e0       	ldi	r24, 0x04	; 4
    1f26:	80 83       	st	Z, r24
            *usLen += 1;
    1f28:	88 81       	ld	r24, Y
    1f2a:	99 81       	ldd	r25, Y+1	; 0x01
    1f2c:	01 96       	adiw	r24, 0x01	; 1
    1f2e:	99 83       	std	Y+1, r25	; 0x01
    1f30:	88 83       	st	Y, r24

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
    1f32:	8a 01       	movw	r16, r20
    1f34:	00 0f       	add	r16, r16
    1f36:	11 1f       	adc	r17, r17
    1f38:	01 83       	std	Z+1, r16	; 0x01
            *usLen += 1;
    1f3a:	88 81       	ld	r24, Y
    1f3c:	99 81       	ldd	r25, Y+1	; 0x01
    1f3e:	01 96       	adiw	r24, 0x01	; 1
    1f40:	99 83       	std	Y+1, r25	; 0x01
    1f42:	88 83       	st	Y, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1f44:	7f 2d       	mov	r23, r15
    1f46:	60 e0       	ldi	r22, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1f48:	83 2f       	mov	r24, r19
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	68 2b       	or	r22, r24
    1f4e:	79 2b       	or	r23, r25

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
            *usLen += 1;

            eRegStatus =
    1f50:	6f 5f       	subi	r22, 0xFF	; 255
    1f52:	7f 4f       	sbci	r23, 0xFF	; 255
    1f54:	cd 01       	movw	r24, r26
    1f56:	0e 94 bc 01 	call	0x378	; 0x378 <eMBRegInputCB>
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    1f5a:	88 23       	and	r24, r24
    1f5c:	19 f0       	breq	.+6      	; 0x1f64 <eMBFuncReadInputRegister+0x7a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1f5e:	0e 94 6e 10 	call	0x20dc	; 0x20dc <prveMBError2Exception>
    1f62:	09 c0       	rjmp	.+18     	; 0x1f76 <eMBFuncReadInputRegister+0x8c>
            }
            else
            {
                *usLen += usRegCount * 2;
    1f64:	88 81       	ld	r24, Y
    1f66:	99 81       	ldd	r25, Y+1	; 0x01
    1f68:	80 0f       	add	r24, r16
    1f6a:	91 1f       	adc	r25, r17
    1f6c:	99 83       	std	Y+1, r25	; 0x01
    1f6e:	88 83       	st	Y, r24
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	01 c0       	rjmp	.+2      	; 0x1f76 <eMBFuncReadInputRegister+0x8c>
    1f74:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	1f 91       	pop	r17
    1f7c:	0f 91       	pop	r16
    1f7e:	ff 90       	pop	r15
    1f80:	08 95       	ret

00001f82 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
    1f86:	8b 01       	movw	r16, r22
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
    1f88:	9c 01       	movw	r18, r24
    1f8a:	2f 5f       	subi	r18, 0xFF	; 255
    1f8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8e:	e6 ed       	ldi	r30, 0xD6	; 214
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	40 91 f6 00 	lds	r20, 0x00F6
    1f96:	50 91 f7 00 	lds	r21, 0x00F7
    1f9a:	c9 01       	movw	r24, r18
    1f9c:	bf 01       	movw	r22, r30
    1f9e:	0e 94 08 11 	call	0x2210	; 0x2210 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
    1fa2:	80 91 f6 00 	lds	r24, 0x00F6
    1fa6:	90 91 f7 00 	lds	r25, 0x00F7
    1faa:	01 96       	adiw	r24, 0x01	; 1
    1fac:	f8 01       	movw	r30, r16
    1fae:	91 83       	std	Z+1, r25	; 0x01
    1fb0:	80 83       	st	Z, r24
    return MB_EX_NONE;
}
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	1f 91       	pop	r17
    1fb6:	0f 91       	pop	r16
    1fb8:	08 95       	ret

00001fba <eMBSetSlaveID>:
/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	e8 2f       	mov	r30, r24
    1fc0:	e9 01       	movw	r28, r18
    eMBErrorCode    eStatus = MB_ENOERR;

    /* the first byte and second byte in the buffer is reserved for
     * the parameter ucSlaveID and the running flag. The rest of
     * the buffer is available for additional data. */
    if( usAdditionalLen + 2 < MB_FUNC_OTHER_REP_SLAVEID_BUF )
    1fc2:	c9 01       	movw	r24, r18
    1fc4:	02 96       	adiw	r24, 0x02	; 2
    1fc6:	80 97       	sbiw	r24, 0x20	; 32
    1fc8:	10 f0       	brcs	.+4      	; 0x1fce <eMBSetSlaveID+0x14>
    1fca:	84 e0       	ldi	r24, 0x04	; 4
    1fcc:	23 c0       	rjmp	.+70     	; 0x2014 <eMBSetSlaveID+0x5a>
    {
        usMBSlaveIDLen = 0;
        ucMBSlaveID[usMBSlaveIDLen++] = ucSlaveID;
    1fce:	e0 93 d6 00 	sts	0x00D6, r30
        ucMBSlaveID[usMBSlaveIDLen++] = ( UCHAR )( xIsRunning ? 0xFF : 0x00 );
    1fd2:	66 23       	and	r22, r22
    1fd4:	11 f4       	brne	.+4      	; 0x1fda <eMBSetSlaveID+0x20>
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	01 c0       	rjmp	.+2      	; 0x1fdc <eMBSetSlaveID+0x22>
    1fda:	8f ef       	ldi	r24, 0xFF	; 255
    1fdc:	80 93 d7 00 	sts	0x00D7, r24
    1fe0:	82 e0       	ldi	r24, 0x02	; 2
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	90 93 f7 00 	sts	0x00F7, r25
    1fe8:	80 93 f6 00 	sts	0x00F6, r24
        if( usAdditionalLen > 0 )
    1fec:	20 97       	sbiw	r28, 0x00	; 0
    1fee:	89 f0       	breq	.+34     	; 0x2012 <eMBSetSlaveID+0x58>
        {
            memcpy( &ucMBSlaveID[usMBSlaveIDLen], pucAdditional,
    1ff0:	28 ed       	ldi	r18, 0xD8	; 216
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	c9 01       	movw	r24, r18
    1ff6:	ba 01       	movw	r22, r20
    1ff8:	ae 01       	movw	r20, r28
    1ffa:	0e 94 08 11 	call	0x2210	; 0x2210 <memcpy>
                    ( size_t )usAdditionalLen );
            usMBSlaveIDLen += usAdditionalLen;
    1ffe:	80 91 f6 00 	lds	r24, 0x00F6
    2002:	90 91 f7 00 	lds	r25, 0x00F7
    2006:	8c 0f       	add	r24, r28
    2008:	9d 1f       	adc	r25, r29
    200a:	90 93 f7 00 	sts	0x00F7, r25
    200e:	80 93 f6 00 	sts	0x00F6, r24
    2012:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_ENORES;
    }
    return eStatus;
}
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	08 95       	ret

0000201a <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
    201a:	0f 93       	push	r16
    201c:	1f 93       	push	r17
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
    2022:	30 e0       	ldi	r19, 0x00	; 0

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
    2024:	db 01       	movw	r26, r22
    2026:	53 e0       	ldi	r21, 0x03	; 3
    2028:	b6 95       	lsr	r27
    202a:	a7 95       	ror	r26
    202c:	5a 95       	dec	r21
    202e:	e1 f7       	brne	.-8      	; 0x2028 <xMBUtilSetBits+0xe>
    2030:	67 70       	andi	r22, 0x07	; 7
    2032:	70 70       	andi	r23, 0x00	; 0

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
    2034:	e1 e0       	ldi	r30, 0x01	; 1
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	02 c0       	rjmp	.+4      	; 0x203e <xMBUtilSetBits+0x24>
    203a:	ee 0f       	add	r30, r30
    203c:	ff 1f       	adc	r31, r31
    203e:	4a 95       	dec	r20
    2040:	e2 f7       	brpl	.-8      	; 0x203a <xMBUtilSetBits+0x20>
    2042:	31 97       	sbiw	r30, 0x01	; 1
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    2044:	8c 01       	movw	r16, r24
    2046:	0a 0f       	add	r16, r26
    2048:	1b 1f       	adc	r17, r27
    204a:	e8 01       	movw	r28, r16
    204c:	48 81       	ld	r20, Y
    204e:	50 e0       	ldi	r21, 0x00	; 0
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
    2050:	11 96       	adiw	r26, 0x01	; 1
    2052:	a8 0f       	add	r26, r24
    2054:	b9 1f       	adc	r27, r25

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
    2056:	9c 91       	ld	r25, X
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	48 2b       	or	r20, r24
    205c:	59 2b       	or	r21, r25
    205e:	06 2e       	mov	r0, r22
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <xMBUtilSetBits+0x4c>
    2062:	ee 0f       	add	r30, r30
    2064:	ff 1f       	adc	r31, r31
    2066:	0a 94       	dec	r0
    2068:	e2 f7       	brpl	.-8      	; 0x2062 <xMBUtilSetBits+0x48>
    206a:	e0 95       	com	r30
    206c:	f0 95       	com	r31
    206e:	4e 23       	and	r20, r30
    2070:	5f 23       	and	r21, r31
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <xMBUtilSetBits+0x5e>
    2074:	22 0f       	add	r18, r18
    2076:	33 1f       	adc	r19, r19
    2078:	6a 95       	dec	r22
    207a:	e2 f7       	brpl	.-8      	; 0x2074 <xMBUtilSetBits+0x5a>
    207c:	42 2b       	or	r20, r18
    207e:	53 2b       	or	r21, r19

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
    2080:	48 83       	st	Y, r20
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
    2082:	5c 93       	st	X, r21
}
    2084:	df 91       	pop	r29
    2086:	cf 91       	pop	r28
    2088:	1f 91       	pop	r17
    208a:	0f 91       	pop	r16
    208c:	08 95       	ret

0000208e <xMBUtilGetBits>:
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
    208e:	fb 01       	movw	r30, r22
    2090:	b3 e0       	ldi	r27, 0x03	; 3
    2092:	f6 95       	lsr	r31
    2094:	e7 95       	ror	r30
    2096:	ba 95       	dec	r27
    2098:	e1 f7       	brne	.-8      	; 0x2092 <xMBUtilGetBits+0x4>

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    209a:	dc 01       	movw	r26, r24
    209c:	ae 0f       	add	r26, r30
    209e:	bf 1f       	adc	r27, r31
    20a0:	2c 91       	ld	r18, X
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
    20a4:	11 96       	adiw	r26, 0x01	; 1
    20a6:	9c 91       	ld	r25, X
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	82 2b       	or	r24, r18
    20ac:	93 2b       	or	r25, r19

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
    20ae:	a3 e0       	ldi	r26, 0x03	; 3
    20b0:	ee 0f       	add	r30, r30
    20b2:	ff 1f       	adc	r31, r31
    20b4:	aa 95       	dec	r26
    20b6:	e1 f7       	brne	.-8      	; 0x20b0 <xMBUtilGetBits+0x22>
    20b8:	6e 1b       	sub	r22, r30
    20ba:	7f 0b       	sbc	r23, r31
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <xMBUtilGetBits+0x34>
    20be:	96 95       	lsr	r25
    20c0:	87 95       	ror	r24
    20c2:	6a 95       	dec	r22
    20c4:	e2 f7       	brpl	.-8      	; 0x20be <xMBUtilGetBits+0x30>
    20c6:	21 e0       	ldi	r18, 0x01	; 1
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <xMBUtilGetBits+0x42>
    20cc:	22 0f       	add	r18, r18
    20ce:	33 1f       	adc	r19, r19
    20d0:	4a 95       	dec	r20
    20d2:	e2 f7       	brpl	.-8      	; 0x20cc <xMBUtilGetBits+0x3e>
    20d4:	21 50       	subi	r18, 0x01	; 1
    20d6:	30 40       	sbci	r19, 0x00	; 0

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;

    return ( UCHAR ) usWordBuf;
}
    20d8:	82 23       	and	r24, r18
    20da:	08 95       	ret

000020dc <prveMBError2Exception>:
eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    eMBException    eStatus;

    switch ( eErrorCode )
    20dc:	81 30       	cpi	r24, 0x01	; 1
    20de:	29 f0       	breq	.+10     	; 0x20ea <prveMBError2Exception+0xe>
    20e0:	81 30       	cpi	r24, 0x01	; 1
    20e2:	28 f0       	brcs	.+10     	; 0x20ee <prveMBError2Exception+0x12>
    20e4:	87 30       	cpi	r24, 0x07	; 7
    20e6:	39 f4       	brne	.+14     	; 0x20f6 <prveMBError2Exception+0x1a>
    20e8:	04 c0       	rjmp	.+8      	; 0x20f2 <prveMBError2Exception+0x16>
    20ea:	82 e0       	ldi	r24, 0x02	; 2
    20ec:	08 95       	ret
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	08 95       	ret
    20f2:	86 e0       	ldi	r24, 0x06	; 6
    20f4:	08 95       	ret
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
            break;

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
            break;
    20f6:	84 e0       	ldi	r24, 0x04	; 4
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
    20f8:	08 95       	ret

000020fa <current_loop_update>:

void current_loop_update( int16_t pwm, uint8_t direction )
{
	uint8_t pwm_width = (uint8_t)pwm;

	if( !direction ) {
    20fa:	66 23       	and	r22, r22
    20fc:	19 f4       	brne	.+6      	; 0x2104 <current_loop_update+0xa>
#if !SWAP_PWM_DIRECTION_ENABLED
		pwm_dir_a( pwm_width );
    20fe:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <pwm_dir_a>
    2102:	08 95       	ret
#else
		pwm_dir_b( pwm_width );
#endif
	} else {
#if !SWAP_PWM_DIRECTION_ENABLED
		pwm_dir_b( pwm_width );
    2104:	0e 94 13 06 	call	0xc26	; 0xc26 <pwm_dir_b>
    2108:	08 95       	ret

0000210a <__mulsi3>:
    210a:	62 9f       	mul	r22, r18
    210c:	d0 01       	movw	r26, r0
    210e:	73 9f       	mul	r23, r19
    2110:	f0 01       	movw	r30, r0
    2112:	82 9f       	mul	r24, r18
    2114:	e0 0d       	add	r30, r0
    2116:	f1 1d       	adc	r31, r1
    2118:	64 9f       	mul	r22, r20
    211a:	e0 0d       	add	r30, r0
    211c:	f1 1d       	adc	r31, r1
    211e:	92 9f       	mul	r25, r18
    2120:	f0 0d       	add	r31, r0
    2122:	83 9f       	mul	r24, r19
    2124:	f0 0d       	add	r31, r0
    2126:	74 9f       	mul	r23, r20
    2128:	f0 0d       	add	r31, r0
    212a:	65 9f       	mul	r22, r21
    212c:	f0 0d       	add	r31, r0
    212e:	99 27       	eor	r25, r25
    2130:	72 9f       	mul	r23, r18
    2132:	b0 0d       	add	r27, r0
    2134:	e1 1d       	adc	r30, r1
    2136:	f9 1f       	adc	r31, r25
    2138:	63 9f       	mul	r22, r19
    213a:	b0 0d       	add	r27, r0
    213c:	e1 1d       	adc	r30, r1
    213e:	f9 1f       	adc	r31, r25
    2140:	bd 01       	movw	r22, r26
    2142:	cf 01       	movw	r24, r30
    2144:	11 24       	eor	r1, r1
    2146:	08 95       	ret

00002148 <__divmodhi4>:
    2148:	97 fb       	bst	r25, 7
    214a:	09 2e       	mov	r0, r25
    214c:	07 26       	eor	r0, r23
    214e:	0a d0       	rcall	.+20     	; 0x2164 <__divmodhi4_neg1>
    2150:	77 fd       	sbrc	r23, 7
    2152:	04 d0       	rcall	.+8      	; 0x215c <__divmodhi4_neg2>
    2154:	49 d0       	rcall	.+146    	; 0x21e8 <__udivmodhi4>
    2156:	06 d0       	rcall	.+12     	; 0x2164 <__divmodhi4_neg1>
    2158:	00 20       	and	r0, r0
    215a:	1a f4       	brpl	.+6      	; 0x2162 <__divmodhi4_exit>

0000215c <__divmodhi4_neg2>:
    215c:	70 95       	com	r23
    215e:	61 95       	neg	r22
    2160:	7f 4f       	sbci	r23, 0xFF	; 255

00002162 <__divmodhi4_exit>:
    2162:	08 95       	ret

00002164 <__divmodhi4_neg1>:
    2164:	f6 f7       	brtc	.-4      	; 0x2162 <__divmodhi4_exit>
    2166:	90 95       	com	r25
    2168:	81 95       	neg	r24
    216a:	9f 4f       	sbci	r25, 0xFF	; 255
    216c:	08 95       	ret

0000216e <__udivmodsi4>:
    216e:	a1 e2       	ldi	r26, 0x21	; 33
    2170:	1a 2e       	mov	r1, r26
    2172:	aa 1b       	sub	r26, r26
    2174:	bb 1b       	sub	r27, r27
    2176:	fd 01       	movw	r30, r26
    2178:	0d c0       	rjmp	.+26     	; 0x2194 <__udivmodsi4_ep>

0000217a <__udivmodsi4_loop>:
    217a:	aa 1f       	adc	r26, r26
    217c:	bb 1f       	adc	r27, r27
    217e:	ee 1f       	adc	r30, r30
    2180:	ff 1f       	adc	r31, r31
    2182:	a2 17       	cp	r26, r18
    2184:	b3 07       	cpc	r27, r19
    2186:	e4 07       	cpc	r30, r20
    2188:	f5 07       	cpc	r31, r21
    218a:	20 f0       	brcs	.+8      	; 0x2194 <__udivmodsi4_ep>
    218c:	a2 1b       	sub	r26, r18
    218e:	b3 0b       	sbc	r27, r19
    2190:	e4 0b       	sbc	r30, r20
    2192:	f5 0b       	sbc	r31, r21

00002194 <__udivmodsi4_ep>:
    2194:	66 1f       	adc	r22, r22
    2196:	77 1f       	adc	r23, r23
    2198:	88 1f       	adc	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	1a 94       	dec	r1
    219e:	69 f7       	brne	.-38     	; 0x217a <__udivmodsi4_loop>
    21a0:	60 95       	com	r22
    21a2:	70 95       	com	r23
    21a4:	80 95       	com	r24
    21a6:	90 95       	com	r25
    21a8:	9b 01       	movw	r18, r22
    21aa:	ac 01       	movw	r20, r24
    21ac:	bd 01       	movw	r22, r26
    21ae:	cf 01       	movw	r24, r30
    21b0:	08 95       	ret

000021b2 <__divmodsi4>:
    21b2:	97 fb       	bst	r25, 7
    21b4:	09 2e       	mov	r0, r25
    21b6:	05 26       	eor	r0, r21
    21b8:	0e d0       	rcall	.+28     	; 0x21d6 <__divmodsi4_neg1>
    21ba:	57 fd       	sbrc	r21, 7
    21bc:	04 d0       	rcall	.+8      	; 0x21c6 <__divmodsi4_neg2>
    21be:	d7 df       	rcall	.-82     	; 0x216e <__udivmodsi4>
    21c0:	0a d0       	rcall	.+20     	; 0x21d6 <__divmodsi4_neg1>
    21c2:	00 1c       	adc	r0, r0
    21c4:	38 f4       	brcc	.+14     	; 0x21d4 <__divmodsi4_exit>

000021c6 <__divmodsi4_neg2>:
    21c6:	50 95       	com	r21
    21c8:	40 95       	com	r20
    21ca:	30 95       	com	r19
    21cc:	21 95       	neg	r18
    21ce:	3f 4f       	sbci	r19, 0xFF	; 255
    21d0:	4f 4f       	sbci	r20, 0xFF	; 255
    21d2:	5f 4f       	sbci	r21, 0xFF	; 255

000021d4 <__divmodsi4_exit>:
    21d4:	08 95       	ret

000021d6 <__divmodsi4_neg1>:
    21d6:	f6 f7       	brtc	.-4      	; 0x21d4 <__divmodsi4_exit>
    21d8:	90 95       	com	r25
    21da:	80 95       	com	r24
    21dc:	70 95       	com	r23
    21de:	61 95       	neg	r22
    21e0:	7f 4f       	sbci	r23, 0xFF	; 255
    21e2:	8f 4f       	sbci	r24, 0xFF	; 255
    21e4:	9f 4f       	sbci	r25, 0xFF	; 255
    21e6:	08 95       	ret

000021e8 <__udivmodhi4>:
    21e8:	aa 1b       	sub	r26, r26
    21ea:	bb 1b       	sub	r27, r27
    21ec:	51 e1       	ldi	r21, 0x11	; 17
    21ee:	07 c0       	rjmp	.+14     	; 0x21fe <__udivmodhi4_ep>

000021f0 <__udivmodhi4_loop>:
    21f0:	aa 1f       	adc	r26, r26
    21f2:	bb 1f       	adc	r27, r27
    21f4:	a6 17       	cp	r26, r22
    21f6:	b7 07       	cpc	r27, r23
    21f8:	10 f0       	brcs	.+4      	; 0x21fe <__udivmodhi4_ep>
    21fa:	a6 1b       	sub	r26, r22
    21fc:	b7 0b       	sbc	r27, r23

000021fe <__udivmodhi4_ep>:
    21fe:	88 1f       	adc	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	5a 95       	dec	r21
    2204:	a9 f7       	brne	.-22     	; 0x21f0 <__udivmodhi4_loop>
    2206:	80 95       	com	r24
    2208:	90 95       	com	r25
    220a:	bc 01       	movw	r22, r24
    220c:	cd 01       	movw	r24, r26
    220e:	08 95       	ret

00002210 <memcpy>:
    2210:	fb 01       	movw	r30, r22
    2212:	dc 01       	movw	r26, r24
    2214:	02 c0       	rjmp	.+4      	; 0x221a <memcpy+0xa>
    2216:	01 90       	ld	r0, Z+
    2218:	0d 92       	st	X+, r0
    221a:	41 50       	subi	r20, 0x01	; 1
    221c:	50 40       	sbci	r21, 0x00	; 0
    221e:	d8 f7       	brcc	.-10     	; 0x2216 <memcpy+0x6>
    2220:	08 95       	ret

00002222 <memset>:
    2222:	dc 01       	movw	r26, r24
    2224:	01 c0       	rjmp	.+2      	; 0x2228 <memset+0x6>
    2226:	6d 93       	st	X+, r22
    2228:	41 50       	subi	r20, 0x01	; 1
    222a:	50 40       	sbci	r21, 0x00	; 0
    222c:	e0 f7       	brcc	.-8      	; 0x2226 <memset+0x4>
    222e:	08 95       	ret

00002230 <__eerd_block_m32>:
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22

00002234 <__eerd_blraw_m32>:
    2234:	fc 01       	movw	r30, r24
    2236:	e1 99       	sbic	0x1c, 1	; 28
    2238:	fe cf       	rjmp	.-4      	; 0x2236 <__eerd_blraw_m32+0x2>
    223a:	06 c0       	rjmp	.+12     	; 0x2248 <__eerd_blraw_m32+0x14>
    223c:	ff bb       	out	0x1f, r31	; 31
    223e:	ee bb       	out	0x1e, r30	; 30
    2240:	e0 9a       	sbi	0x1c, 0	; 28
    2242:	31 96       	adiw	r30, 0x01	; 1
    2244:	0d b2       	in	r0, 0x1d	; 29
    2246:	0d 92       	st	X+, r0
    2248:	41 50       	subi	r20, 0x01	; 1
    224a:	50 40       	sbci	r21, 0x00	; 0
    224c:	b8 f7       	brcc	.-18     	; 0x223c <__eerd_blraw_m32+0x8>
    224e:	08 95       	ret

00002250 <__eewr_block_m32>:
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	03 c0       	rjmp	.+6      	; 0x225c <__eewr_block_m32+0xc>
    2256:	2d 91       	ld	r18, X+
    2258:	0e 94 33 11 	call	0x2266	; 0x2266 <__eewr_r18_m32>
    225c:	41 50       	subi	r20, 0x01	; 1
    225e:	50 40       	sbci	r21, 0x00	; 0
    2260:	d0 f7       	brcc	.-12     	; 0x2256 <__eewr_block_m32+0x6>
    2262:	08 95       	ret

00002264 <__eewr_byte_m32>:
    2264:	26 2f       	mov	r18, r22

00002266 <__eewr_r18_m32>:
    2266:	e1 99       	sbic	0x1c, 1	; 28
    2268:	fe cf       	rjmp	.-4      	; 0x2266 <__eewr_r18_m32>
    226a:	9f bb       	out	0x1f, r25	; 31
    226c:	8e bb       	out	0x1e, r24	; 30
    226e:	2d bb       	out	0x1d, r18	; 29
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	e2 9a       	sbi	0x1c, 2	; 28
    2276:	e1 9a       	sbi	0x1c, 1	; 28
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	01 96       	adiw	r24, 0x01	; 1
    227c:	08 95       	ret

0000227e <_exit>:
    227e:	f8 94       	cli

00002280 <__stop_program>:
    2280:	ff cf       	rjmp	.-2      	; 0x2280 <__stop_program>
